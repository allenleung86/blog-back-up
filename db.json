{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/yilia/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/yilia/source/README.MDOWN","path":"README.MDOWN","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/busuanzi.min.js","path":"js/busuanzi.min.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/reSlider.js","path":"js/reSlider.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/photo.js","path":"js/photo.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.gif","path":"img/img-loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/top.png","path":"img/top.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/require,jquery.min.js","path":"js/require,jquery.min.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/user.png","path":"img/user.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.DS_Store","hash":"dd5ae0267523e2f49760a37af5cff1560ad20929","modified":1477144484000},{"_id":"themes/yilia/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1461160894000},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1461160894000},{"_id":"themes/yilia/_config.yml","hash":"7950266d0b6643cc204cf89d2a899e54f156406e","modified":1476286033000},{"_id":"themes/yilia/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1461160894000},{"_id":"source/CNAME","hash":"c9abb9914cf3ffb92fe5c7c66a6c6472983c30df","modified":1468330475000},{"_id":"themes/yilia/source/favicon.ico","hash":"d9a571c119ce1bae6265892d5ee12cd66cae4b7d","modified":1477144443000},{"_id":"themes/yilia/source/.DS_Store","hash":"8d3037bbef3d1b35f753e022aa8e88e06556bcf2","modified":1477144500000},{"_id":"themes/yilia/source/README.MDOWN","hash":"a762d1b497af570d5f90d0f0057de1f96783d7dd","modified":1461420144000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1461160894000},{"_id":"themes/yilia/.git/index","hash":"d6fd6736edd574e8f913a3ebeca0b2199e4356de","modified":1461160894000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1461160294000},{"_id":"themes/yilia/.git/packed-refs","hash":"102a8556f68dca2b07b7ef5c523080d0dcbbe257","modified":1461160894000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1461160894000},{"_id":"themes/yilia/layout/layout.ejs","hash":"89b28d576a3e9da88fe68dd3af559fc169dd6f36","modified":1476589513000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1461160894000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1461160894000},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1461160894000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461160894000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1461160894000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461160894000},{"_id":"themes/yilia/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1461160894000},{"_id":"themes/yilia/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1461160894000},{"_id":"themes/yilia/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1461160894000},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1461160894000},{"_id":"themes/yilia/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1461160894000},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1461160894000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1461160894000},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1461160894000},{"_id":"source/_posts/css3-study02.md","hash":"48ae2517e9bb022c88540e405788cc0d938f1ddc","modified":1476286467000},{"_id":"source/_posts/canvas-study01.md","hash":"221517b0981ff38afd4bd5740a1361cbb24216f3","modified":1476203306000},{"_id":"source/_posts/atom-edit.md","hash":"729bdad73bcb4692385037a6cd1f19e3cbc40cac","modified":1476203300000},{"_id":"source/_posts/com-func-skill.md","hash":"4236e4e18b3b886f7dff2d9a7ca86d256ef45734","modified":1476463246000},{"_id":"source/_posts/heoll-hexo.md","hash":"1b6e19179690610ca28676a361f34a18be11945a","modified":1476200768000},{"_id":"source/_posts/file-upload.md","hash":"46bc6aa6cb02880b22be7c36f3ecc70993e3960e","modified":1476203336000},{"_id":"source/_posts/grunt-angular.md","hash":"07431ac58b60539048832bf5b0066147ed613312","modified":1476203342000},{"_id":"source/_posts/es6-feature.md","hash":"52d574e5e2986f08fbb88f506737d7eb6cefb4c6","modified":1476203330000},{"_id":"source/_posts/high-extend.md","hash":"cab9970ee150dc7106b5dbb65d0c1a01fdc7c0f4","modified":1464496640000},{"_id":"source/_posts/hexo-advance.md","hash":"8e0ce1e158f1eab073fc0d64177322636caf478d","modified":1476203351000},{"_id":"source/_posts/css3-study01.md","hash":"7df9a59f2f6fec7b170936b9023e1e4f66b07af6","modified":1476203315000},{"_id":"source/_posts/hexo-faster.md","hash":"e0ff5ecbe74074ac6040ee613e774e688e64f8d0","modified":1476203358000},{"_id":"source/_posts/rect-grid-demo.md","hash":"404752976a844cdfcfdf4b07934eef07fdfcf5e4","modified":1470576417000},{"_id":"source/_posts/life-miss-bike.md","hash":"c1f180894875bd5cc484d2d725fb7903e03271d5","modified":1476203378000},{"_id":"source/_posts/tiny-heart-demo.md","hash":"ea9380dab8f391321a8167b492d20170d009af5e","modified":1468334236000},{"_id":"source/_posts/react-todo-demo.md","hash":"063072a3d8a00fe02711246f6f0613100606bd0c","modified":1476203383000},{"_id":"source/_posts/weixin-share.md","hash":"f1b20427b60d9fedc6578910d8d85233345ca677","modified":1476203291000},{"_id":"source/_posts/yeoman-reactpackage.md","hash":"a707eba9b35f18eaacb2954035a94680a01c682a","modified":1476284932000},{"_id":"source/photos/data.json","hash":"4d74a7b9239c459da5698fbeeb3c7131b846086e","modified":1463887076000},{"_id":"source/demo/index.md","hash":"1d5f82be901de6668de3c9d9f46893507e7cb87a","modified":1470576775000},{"_id":"source/_posts/tiny-heart-study.md","hash":"ad9dff3fbbcffe5dc11618febdb2df65641e963b","modified":1476203405000},{"_id":"source/_posts/react-todo-study.md","hash":"c2281143ea106ee5d28e8394b8b918ef17a98a22","modified":1476203392000},{"_id":"source/photos/index.md","hash":"eb7bfaeb9810849ebabecd32c204e87a8cf57fd0","modified":1462798332000},{"_id":"source/data/getArticleUrl.json","hash":"dbce0deaa75042f66466bd33a69b8e33cbff0ba2","modified":1471971450000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1461160894000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1461160894000},{"_id":"themes/yilia/source/css/style.styl","hash":"fc6c94ae964e8e68786e30378e0ebdc3720b0b7a","modified":1463302670000},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1461160894000},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1461160894000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"3a9b06e4f12b6b1886b3318bfe77edd7ab49f05f","modified":1462626716000},{"_id":"themes/yilia/source/js/busuanzi.min.js","hash":"b23a1de036c1ec697c82c955afda497e584d45ef","modified":1468331289000},{"_id":"themes/yilia/source/js/mobile.js","hash":"29be8eb396b7562800270d283d10a7802f71316e","modified":1471444416000},{"_id":"themes/yilia/source/js/reSlider.js","hash":"0336bbac814573ceaf78d14256caf4bc3cd46655","modified":1476199282000},{"_id":"themes/yilia/source/js/pc.js","hash":"aaf0d0e30c0d3d3b95b164404e4466f762fded77","modified":1476588781000},{"_id":"themes/yilia/source/js/main.js","hash":"f30df1140f7f28412a4b41dd10c9e57f22470af7","modified":1471972877000},{"_id":"themes/yilia/source/js/photo.js","hash":"908535e8719a16f04e71d23afe40b38cede2b655","modified":1463844230000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1461160894000},{"_id":"themes/yilia/source/img/.DS_Store","hash":"fe51f8cc9ea7a96fc7888951187fb0f4d4af924d","modified":1468050490000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1461160894000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1461160894000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1461160894000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1461160894000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1461160894000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1461160894000},{"_id":"themes/yilia/source/img/img-err.png","hash":"24d6a4fb8fd2fb7cec761846b243126987586777","modified":1462629826000},{"_id":"themes/yilia/source/img/img-loading.gif","hash":"0591a34ad2442c6304ba66502380f90b35155f24","modified":1462626618000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1461160894000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1461160894000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1461160894000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1461160894000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1461160894000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1461160894000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1461160894000},{"_id":"themes/yilia/source/img/top.png","hash":"7498511f0e95eb67708f7cb5f1c4aa8debe53d9f","modified":1468047510000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1461160894000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1461160894000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1461160894000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1461160894000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1461160294000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1461160294000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"74ca854435c0ae495d4c46b9e2ec2676cd5bb44e","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"2787f3d659dd2e5f62d0c89f46684e0834e7c3bf","modified":1468047011000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1461160294000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"5d299257d8059d8a035ea8d9bb138cc2a249e296","modified":1471973528000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"963a62b14e985cfe8b6c1e2a95e98eb5a80f1104","modified":1471974938000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"46479af16707e28dd098a37808059b3b3da90447","modified":1468144621000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"00ea6a9c38d3a5a0c73cce0d7ceb679b1c90ee48","modified":1472054687000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"ef6c3790033c0b536bbf7577cb1c20f5535cadb7","modified":1468331406000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1461160894000},{"_id":"themes/yilia/source/js/require,jquery.min.js","hash":"7c51ab8c7a21ac07d5038f14dd7982a33c570c25","modified":1468046968000},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1461160894000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"28b742c070b86fae5a787e828f6c38cea93eeb8b","modified":1462798996000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"4e6b19c26d39fe62b2121c4d767793ef07f31e89","modified":1476286647000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"e0175c5f060e9932da8289974db761875767842e","modified":1461950090000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1461160894000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"46834e27e5b1bad14f7f89490007ab9ae302cb73","modified":1467729775000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"3a38508e1fd67b6c92529fdc50c4509c3d7ef781","modified":1476199219000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"83a91a06b51b85e50e49f2a6d23d9cbc12a680c8","modified":1472055152000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"0fa6dd3653621ff9d9631023ac686fa5871db936","modified":1464495412000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1461160894000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1461160894000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"6d4e509b97fce1833e4cc98fde384df5cce9ed5c","modified":1461947398000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1461160894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1461160894000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"e84b578dc574867fde1005bbce83b592d9317b3a","modified":1461471948000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1461160894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1461160894000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1461160894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1461160894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1461160894000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1461160894000},{"_id":"themes/yilia/.git/objects/pack/pack-7c6281fcfbb53c4b1a1c9210b8dcf0eeedcf91b2.idx","hash":"86a78011839c03052caa24f288f7f139361b0fc0","modified":1461160894000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"154ba3f579c6295c558c47456b8023ff4f0cc214","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"9c418212743f52dc50a08fb132a83e64ff5c9a03","modified":1462798216000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"06d23fe6d8aa8ca4a6cd2b0339db86c910a2d20a","modified":1463295622000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1461160894000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"73eef756a11103d9809ab034f5a947b7902758a5","modified":1463064936000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"0c74b6cb6d52675e1d6565073241040072550bd7","modified":1461505908000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1461160894000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1461160894000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"74ca854435c0ae495d4c46b9e2ec2676cd5bb44e","modified":1461160894000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1461160894000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"74ca854435c0ae495d4c46b9e2ec2676cd5bb44e","modified":1461160894000},{"_id":"themes/yilia/source/img/user.png","hash":"4df22e9190af6b16ce74426f4fe9a7a6563c3ced","modified":1468142939000},{"_id":"themes/yilia/.git/objects/pack/pack-7c6281fcfbb53c4b1a1c9210b8dcf0eeedcf91b2.pack","hash":"905d5ca172da1ab03afbcbc9212cd75485c84edb","modified":1461160894000}],"Category":[{"name":"工作","_id":"ciul9pdc6000pu13gh3eyuomc"},{"name":"生活","_id":"ciul9pdco001du13gy03msnx5"}],"Data":[],"Page":[{"_content":"[\n\t\"IMG_0019.JPG\",\n\t\"IMG_0020.JPG\",\n\t\"IMG_0022.JPG\",\n\t\"IMG_0055.JPG\",\n\t\"IMG_0099.JPG\",\n\t\"IMG_0106.JPG\",\n\t\"IMG_0157.JPG\",\n\t\"IMG_0191.JPG\",\n\t\"IMG_0288.JPG\",\n\t\"IMG_0296.JPG\",\n\t\"IMG_0306.JPG\",\n\t\"IMG_0438.JPG\",\n\t\"IMG_0455.JPG\",\n\t\"IMG_0648.JPG\",\n\t\"IMG_0670.JPG\",\n\t\"IMG_0785.JPG\",\n\t\"IMG_1271.JPG\",\n\t\"IMG_1426.JPG\",\n\t\"IMG_1429.JPG\",\n\t\"IMG_1535.JPG\",\n\t\"IMG_1582.JPG\",\n\t\"IMG_1634.JPG\",\n\t\"IMG_1639.JPG\",\n\t\"IMG_1866.JPG\"\n]\n","source":"photos/data.json","raw":"[\n\t\"IMG_0019.JPG\",\n\t\"IMG_0020.JPG\",\n\t\"IMG_0022.JPG\",\n\t\"IMG_0055.JPG\",\n\t\"IMG_0099.JPG\",\n\t\"IMG_0106.JPG\",\n\t\"IMG_0157.JPG\",\n\t\"IMG_0191.JPG\",\n\t\"IMG_0288.JPG\",\n\t\"IMG_0296.JPG\",\n\t\"IMG_0306.JPG\",\n\t\"IMG_0438.JPG\",\n\t\"IMG_0455.JPG\",\n\t\"IMG_0648.JPG\",\n\t\"IMG_0670.JPG\",\n\t\"IMG_0785.JPG\",\n\t\"IMG_1271.JPG\",\n\t\"IMG_1426.JPG\",\n\t\"IMG_1429.JPG\",\n\t\"IMG_1535.JPG\",\n\t\"IMG_1582.JPG\",\n\t\"IMG_1634.JPG\",\n\t\"IMG_1639.JPG\",\n\t\"IMG_1866.JPG\"\n]\n","date":"2016-07-03T14:17:54.000Z","updated":"2016-05-22T03:17:56.000Z","path":"photos/data.json","layout":"false","title":"","comments":1,"_id":"ciul9pda00000u13gu8tku3vf","content":"[\"IMG_0019.JPG\",\"IMG_0020.JPG\",\"IMG_0022.JPG\",\"IMG_0055.JPG\",\"IMG_0099.JPG\",\"IMG_0106.JPG\",\"IMG_0157.JPG\",\"IMG_0191.JPG\",\"IMG_0288.JPG\",\"IMG_0296.JPG\",\"IMG_0306.JPG\",\"IMG_0438.JPG\",\"IMG_0455.JPG\",\"IMG_0648.JPG\",\"IMG_0670.JPG\",\"IMG_0785.JPG\",\"IMG_1271.JPG\",\"IMG_1426.JPG\",\"IMG_1429.JPG\",\"IMG_1535.JPG\",\"IMG_1582.JPG\",\"IMG_1634.JPG\",\"IMG_1639.JPG\",\"IMG_1866.JPG\"]","excerpt":"","more":"[\"IMG_0019.JPG\",\"IMG_0020.JPG\",\"IMG_0022.JPG\",\"IMG_0055.JPG\",\"IMG_0099.JPG\",\"IMG_0106.JPG\",\"IMG_0157.JPG\",\"IMG_0191.JPG\",\"IMG_0288.JPG\",\"IMG_0296.JPG\",\"IMG_0306.JPG\",\"IMG_0438.JPG\",\"IMG_0455.JPG\",\"IMG_0648.JPG\",\"IMG_0670.JPG\",\"IMG_0785.JPG\",\"IMG_1271.JPG\",\"IMG_1426.JPG\",\"IMG_1429.JPG\",\"IMG_1535.JPG\",\"IMG_1582.JPG\",\"IMG_1634.JPG\",\"IMG_1639.JPG\",\"IMG_1866.JPG\"]"},{"title":"学习折腾出的实例demo","date":"2016-05-08T14:11:51.000Z","toc":true,"_content":"\n---\n\n> 编程写代码是一门艺术，特别是对于前端，总觉得需要做出点什么看得见的，才会有成就感。\n\n---\n\n# 实例1. react-todos\n\nreact技术现在在前端界是炙手可热的话题，所以我们也得紧跟潮流。最近在学习的过程中，也顺便了解了下webpack打包管理工具和es6的语法，然后使用react+webpack编写了一个todo-list的应用，使用localstorage存储任务数据。\n- demo地址：[查看demo地址](/work/2016-05-08/react-todo-demo.html)\n- 代码地址：[View on GitHub](https://github.com/luckykun/react-demo)\n\n\n\n# 实例2. highextend图表\n\nhighextend是基于highcharts和原生js进一步封装的图表组件，组件暴露一个`Hxt`的全局对象，它有自己的一套默认图表样式，而暴露了我们会经常用到的配置项，另外，还提供了很多个方法来绘制不同的图表，妈妈再也不用担心绘制图表的需求啦！哈哈！。\n- demo地址：[查看demo地址](/work/2016-05-12/high-extend.html)\n- 代码地址：[View on GitHub](https://github.com/luckykun/highextend)\n\n\n\n# 实例3. tinyHeart游戏\n\n使用h5的API和canvas开发的一个小游戏。源码在github上，down下来就能直接运行。\n- demo地址：[查看demo地址](/work/2016-05-30/tiny-heart-demo.html)\n- 代码地址：[View on GitHub](https://github.com/luckykun/tinyHeart)\n\n\n\n# 实例4. 3D立方体效果\n\n使用CSS3的transform属性实现的一个3D立方体的效果，换上照片再加上旋转的动画，真的是酷炫吊炸天！不信就点下面的demo地址。\n- demo地址：[查看demo地址](/work/2016-07-24/rect-grid-demo.html)\n- 代码地址：直接在demo页面右键查看源码，就能看到全部代码了。另外你还可以移步到这个demo的制作教程[CSS3 3D立方体效果－transform也不过如此](/work/2016-07-23/css3-study02.html)\n\n---\n","source":"demo/index.md","raw":"---\ntitle: 学习折腾出的实例demo\ndate: 2016-05-08 22:11:51\ntoc: true\n---\n\n---\n\n> 编程写代码是一门艺术，特别是对于前端，总觉得需要做出点什么看得见的，才会有成就感。\n\n---\n\n# 实例1. react-todos\n\nreact技术现在在前端界是炙手可热的话题，所以我们也得紧跟潮流。最近在学习的过程中，也顺便了解了下webpack打包管理工具和es6的语法，然后使用react+webpack编写了一个todo-list的应用，使用localstorage存储任务数据。\n- demo地址：[查看demo地址](/work/2016-05-08/react-todo-demo.html)\n- 代码地址：[View on GitHub](https://github.com/luckykun/react-demo)\n\n\n\n# 实例2. highextend图表\n\nhighextend是基于highcharts和原生js进一步封装的图表组件，组件暴露一个`Hxt`的全局对象，它有自己的一套默认图表样式，而暴露了我们会经常用到的配置项，另外，还提供了很多个方法来绘制不同的图表，妈妈再也不用担心绘制图表的需求啦！哈哈！。\n- demo地址：[查看demo地址](/work/2016-05-12/high-extend.html)\n- 代码地址：[View on GitHub](https://github.com/luckykun/highextend)\n\n\n\n# 实例3. tinyHeart游戏\n\n使用h5的API和canvas开发的一个小游戏。源码在github上，down下来就能直接运行。\n- demo地址：[查看demo地址](/work/2016-05-30/tiny-heart-demo.html)\n- 代码地址：[View on GitHub](https://github.com/luckykun/tinyHeart)\n\n\n\n# 实例4. 3D立方体效果\n\n使用CSS3的transform属性实现的一个3D立方体的效果，换上照片再加上旋转的动画，真的是酷炫吊炸天！不信就点下面的demo地址。\n- demo地址：[查看demo地址](/work/2016-07-24/rect-grid-demo.html)\n- 代码地址：直接在demo页面右键查看源码，就能看到全部代码了。另外你还可以移步到这个demo的制作教程[CSS3 3D立方体效果－transform也不过如此](/work/2016-07-23/css3-study02.html)\n\n---\n","updated":"2016-08-07T13:32:55.000Z","path":"demo/index.html","comments":1,"layout":"page","_id":"ciul9pdaa0002u13gwf16wo66","content":"<hr>\n<blockquote>\n<p>编程写代码是一门艺术，特别是对于前端，总觉得需要做出点什么看得见的，才会有成就感。</p>\n</blockquote>\n<hr>\n<h1 id=\"实例1-react-todos\"><a href=\"#实例1-react-todos\" class=\"headerlink\" title=\"实例1. react-todos\"></a>实例1. react-todos</h1><p>react技术现在在前端界是炙手可热的话题，所以我们也得紧跟潮流。最近在学习的过程中，也顺便了解了下webpack打包管理工具和es6的语法，然后使用react+webpack编写了一个todo-list的应用，使用localstorage存储任务数据。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-05-08/react-todo-demo.html\">查看demo地址</a></li>\n<li>代码地址：<a href=\"https://github.com/luckykun/react-demo\" target=\"_blank\" rel=\"external\">View on GitHub</a></li>\n</ul>\n<h1 id=\"实例2-highextend图表\"><a href=\"#实例2-highextend图表\" class=\"headerlink\" title=\"实例2. highextend图表\"></a>实例2. highextend图表</h1><p>highextend是基于highcharts和原生js进一步封装的图表组件，组件暴露一个<code>Hxt</code>的全局对象，它有自己的一套默认图表样式，而暴露了我们会经常用到的配置项，另外，还提供了很多个方法来绘制不同的图表，妈妈再也不用担心绘制图表的需求啦！哈哈！。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-05-12/high-extend.html\">查看demo地址</a></li>\n<li>代码地址：<a href=\"https://github.com/luckykun/highextend\" target=\"_blank\" rel=\"external\">View on GitHub</a></li>\n</ul>\n<h1 id=\"实例3-tinyHeart游戏\"><a href=\"#实例3-tinyHeart游戏\" class=\"headerlink\" title=\"实例3. tinyHeart游戏\"></a>实例3. tinyHeart游戏</h1><p>使用h5的API和canvas开发的一个小游戏。源码在github上，down下来就能直接运行。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-05-30/tiny-heart-demo.html\">查看demo地址</a></li>\n<li>代码地址：<a href=\"https://github.com/luckykun/tinyHeart\" target=\"_blank\" rel=\"external\">View on GitHub</a></li>\n</ul>\n<h1 id=\"实例4-3D立方体效果\"><a href=\"#实例4-3D立方体效果\" class=\"headerlink\" title=\"实例4. 3D立方体效果\"></a>实例4. 3D立方体效果</h1><p>使用CSS3的transform属性实现的一个3D立方体的效果，换上照片再加上旋转的动画，真的是酷炫吊炸天！不信就点下面的demo地址。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-07-24/rect-grid-demo.html\">查看demo地址</a></li>\n<li>代码地址：直接在demo页面右键查看源码，就能看到全部代码了。另外你还可以移步到这个demo的制作教程<a href=\"/work/2016-07-23/css3-study02.html\">CSS3 3D立方体效果－transform也不过如此</a></li>\n</ul>\n<hr>\n","excerpt":"","more":"<hr>\n<blockquote>\n<p>编程写代码是一门艺术，特别是对于前端，总觉得需要做出点什么看得见的，才会有成就感。</p>\n</blockquote>\n<hr>\n<h1 id=\"实例1-react-todos\"><a href=\"#实例1-react-todos\" class=\"headerlink\" title=\"实例1. react-todos\"></a>实例1. react-todos</h1><p>react技术现在在前端界是炙手可热的话题，所以我们也得紧跟潮流。最近在学习的过程中，也顺便了解了下webpack打包管理工具和es6的语法，然后使用react+webpack编写了一个todo-list的应用，使用localstorage存储任务数据。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-05-08/react-todo-demo.html\">查看demo地址</a></li>\n<li>代码地址：<a href=\"https://github.com/luckykun/react-demo\">View on GitHub</a></li>\n</ul>\n<h1 id=\"实例2-highextend图表\"><a href=\"#实例2-highextend图表\" class=\"headerlink\" title=\"实例2. highextend图表\"></a>实例2. highextend图表</h1><p>highextend是基于highcharts和原生js进一步封装的图表组件，组件暴露一个<code>Hxt</code>的全局对象，它有自己的一套默认图表样式，而暴露了我们会经常用到的配置项，另外，还提供了很多个方法来绘制不同的图表，妈妈再也不用担心绘制图表的需求啦！哈哈！。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-05-12/high-extend.html\">查看demo地址</a></li>\n<li>代码地址：<a href=\"https://github.com/luckykun/highextend\">View on GitHub</a></li>\n</ul>\n<h1 id=\"实例3-tinyHeart游戏\"><a href=\"#实例3-tinyHeart游戏\" class=\"headerlink\" title=\"实例3. tinyHeart游戏\"></a>实例3. tinyHeart游戏</h1><p>使用h5的API和canvas开发的一个小游戏。源码在github上，down下来就能直接运行。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-05-30/tiny-heart-demo.html\">查看demo地址</a></li>\n<li>代码地址：<a href=\"https://github.com/luckykun/tinyHeart\">View on GitHub</a></li>\n</ul>\n<h1 id=\"实例4-3D立方体效果\"><a href=\"#实例4-3D立方体效果\" class=\"headerlink\" title=\"实例4. 3D立方体效果\"></a>实例4. 3D立方体效果</h1><p>使用CSS3的transform属性实现的一个3D立方体的效果，换上照片再加上旋转的动画，真的是酷炫吊炸天！不信就点下面的demo地址。</p>\n<ul>\n<li>demo地址：<a href=\"/work/2016-07-24/rect-grid-demo.html\">查看demo地址</a></li>\n<li>代码地址：直接在demo页面右键查看源码，就能看到全部代码了。另外你还可以移步到这个demo的制作教程<a href=\"/work/2016-07-23/css3-study02.html\">CSS3 3D立方体效果－transform也不过如此</a></li>\n</ul>\n<hr>\n"},{"title":"相册","date":"2016-05-01T14:11:51.000Z","_content":"\n\n---\n\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n","source":"photos/index.md","raw":"---\ntitle: 相册\ndate: 2016-05-01 22:11:51\n---\n\n\n---\n\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n","updated":"2016-05-09T12:52:12.000Z","path":"photos/index.html","comments":1,"layout":"page","_id":"ciul9pdad0004u13gb8pn93lm","content":"<hr>\n<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n","excerpt":"","more":"<hr>\n<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n"},{"_content":"\n{\n    \"code\": 200,\n    \"data\": [{\n        \"title\": \"hexo搭建属于自己的博客\",\n        \"url\": \"/work/2016-04-23/heoll-hexo.html\",\n        \"tags\": \"工作,hexo系列,教程\"\n    }, {\n        \"title\": \"前后端分离之前端项目构建（grunt+require+angular）\",\n        \"url\": \"/work/2016-05-02/grunt-angular.html\",\n        \"tags\": \"angular,grunt,教程,构建,工作\"\n    }, {\n        \"title\": \"实例demo之React-Todos\",\n        \"url\": \"/work/2016-05-08/react-todo-demo.html\",\n        \"tags\": \"demo,react,工作\"\n    }, {\n        \"title\": \"总结ES6常用的新特性\",\n        \"url\": \"/work/2016-05-10/es6-feature.html\",\n        \"tags\": \"es6,javascript,工作\"\n    }, {\n        \"title\": \"瑾以此文纪念我逝去的“宝马”\",\n        \"url\": \"/life/2016-05-11/life-miss-bike.html\",\n        \"tags\": \"生活\"\n    }, {\n        \"title\": \"实例demo之Highextend图表\",\n        \"url\": \"/work/2016-05-12/high-extend.html\",\n        \"tags\": \"demo,highcharts,插件,工作\"\n    }, {\n        \"title\": \"优美的编辑器－Github Atom\",\n        \"url\": \"/work/2016-05-13/atom-edit.html\",\n        \"tags\": \"编辑器,工作\"\n    }, {\n        \"title\": \"简单封装微信分享插件\",\n        \"url\": \"/work/2016-05-14/weixin-share.html\",\n        \"tags\": \"javascript,微信分享,插件,工作\"\n    }, {\n        \"title\": \"hexo博客进阶－相册和独立域名\",\n        \"url\": \"/work/2016-05-20/hexo-advance.html\",\n        \"tags\": \"hexo系列,教程,工作\"\n    }, {\n        \"title\": \"React入门最好的实例－TodoList\",\n        \"url\": \"/work/2016-05-23/react-todo-study.html\",\n        \"tags\": \"es6,react,教程,工作\"\n    }, {\n        \"title\": \"h5+canvas实现酷炫的小游戏\",\n        \"url\": \"/work/2016-05-29/tiny-heart-study.html\",\n        \"tags\": \"canvas,html5,教程,工作\"\n    }, {\n        \"title\": \"实例demo之小游戏tinyHeart\",\n        \"url\": \"/work/2016-05-30/tiny-heart-demo.html\",\n        \"tags\": \"canvas,demo,html5,工作\"\n    }, {\n        \"title\": \"CSS3初体验之奇技淫巧\",\n        \"url\": \"/work/2016-07-04/css3-study01.html\",\n        \"tags\": \"CSS3,实例,工作\"\n    }, {\n        \"title\": \"hexo博客进阶－性能优化\",\n        \"url\": \"/work/2016-07-10/hexo-faster.html\",\n        \"tags\": \"hexo系列,教程,工作\"\n    }, {\n        \"title\": \"CSS3 3D立方体效果－transform也不过如此\",\n        \"url\": \"/work/2016-07-23/css3-study02.html\",\n        \"tags\": \"3D效果,CSS3,教程,工作\"\n    }, {\n        \"title\": \"实例demo之3D transform立方体效果\",\n        \"url\": \"/work/2016-07-24/rect-grid-demo.html\",\n        \"tags\": \"CSS3,demo,工作\"\n    }, {\n        \"title\": \"两种文件上传的实现－Ajax上传和form+iframe\",\n        \"url\": \"/work/2016-08-16/file-upload.html\",\n        \"tags\": \"ajax,javascript,文件上传,工作\"\n    }]\n}\n","source":"data/getArticleUrl.json","raw":"\n{\n    \"code\": 200,\n    \"data\": [{\n        \"title\": \"hexo搭建属于自己的博客\",\n        \"url\": \"/work/2016-04-23/heoll-hexo.html\",\n        \"tags\": \"工作,hexo系列,教程\"\n    }, {\n        \"title\": \"前后端分离之前端项目构建（grunt+require+angular）\",\n        \"url\": \"/work/2016-05-02/grunt-angular.html\",\n        \"tags\": \"angular,grunt,教程,构建,工作\"\n    }, {\n        \"title\": \"实例demo之React-Todos\",\n        \"url\": \"/work/2016-05-08/react-todo-demo.html\",\n        \"tags\": \"demo,react,工作\"\n    }, {\n        \"title\": \"总结ES6常用的新特性\",\n        \"url\": \"/work/2016-05-10/es6-feature.html\",\n        \"tags\": \"es6,javascript,工作\"\n    }, {\n        \"title\": \"瑾以此文纪念我逝去的“宝马”\",\n        \"url\": \"/life/2016-05-11/life-miss-bike.html\",\n        \"tags\": \"生活\"\n    }, {\n        \"title\": \"实例demo之Highextend图表\",\n        \"url\": \"/work/2016-05-12/high-extend.html\",\n        \"tags\": \"demo,highcharts,插件,工作\"\n    }, {\n        \"title\": \"优美的编辑器－Github Atom\",\n        \"url\": \"/work/2016-05-13/atom-edit.html\",\n        \"tags\": \"编辑器,工作\"\n    }, {\n        \"title\": \"简单封装微信分享插件\",\n        \"url\": \"/work/2016-05-14/weixin-share.html\",\n        \"tags\": \"javascript,微信分享,插件,工作\"\n    }, {\n        \"title\": \"hexo博客进阶－相册和独立域名\",\n        \"url\": \"/work/2016-05-20/hexo-advance.html\",\n        \"tags\": \"hexo系列,教程,工作\"\n    }, {\n        \"title\": \"React入门最好的实例－TodoList\",\n        \"url\": \"/work/2016-05-23/react-todo-study.html\",\n        \"tags\": \"es6,react,教程,工作\"\n    }, {\n        \"title\": \"h5+canvas实现酷炫的小游戏\",\n        \"url\": \"/work/2016-05-29/tiny-heart-study.html\",\n        \"tags\": \"canvas,html5,教程,工作\"\n    }, {\n        \"title\": \"实例demo之小游戏tinyHeart\",\n        \"url\": \"/work/2016-05-30/tiny-heart-demo.html\",\n        \"tags\": \"canvas,demo,html5,工作\"\n    }, {\n        \"title\": \"CSS3初体验之奇技淫巧\",\n        \"url\": \"/work/2016-07-04/css3-study01.html\",\n        \"tags\": \"CSS3,实例,工作\"\n    }, {\n        \"title\": \"hexo博客进阶－性能优化\",\n        \"url\": \"/work/2016-07-10/hexo-faster.html\",\n        \"tags\": \"hexo系列,教程,工作\"\n    }, {\n        \"title\": \"CSS3 3D立方体效果－transform也不过如此\",\n        \"url\": \"/work/2016-07-23/css3-study02.html\",\n        \"tags\": \"3D效果,CSS3,教程,工作\"\n    }, {\n        \"title\": \"实例demo之3D transform立方体效果\",\n        \"url\": \"/work/2016-07-24/rect-grid-demo.html\",\n        \"tags\": \"CSS3,demo,工作\"\n    }, {\n        \"title\": \"两种文件上传的实现－Ajax上传和form+iframe\",\n        \"url\": \"/work/2016-08-16/file-upload.html\",\n        \"tags\": \"ajax,javascript,文件上传,工作\"\n    }]\n}\n","date":"2016-08-23T16:57:30.000Z","updated":"2016-08-23T16:57:30.000Z","path":"data/getArticleUrl.json","layout":"false","title":"","comments":1,"_id":"ciul9pdai0006u13gjx2opi78","content":"{\"code\":200,\"data\":[{\"title\":\"hexo搭建属于自己的博客\",\"url\":\"/work/2016-04-23/heoll-hexo.html\",\"tags\":\"工作,hexo系列,教程\"},{\"title\":\"前后端分离之前端项目构建（grunt+require+angular）\",\"url\":\"/work/2016-05-02/grunt-angular.html\",\"tags\":\"angular,grunt,教程,构建,工作\"},{\"title\":\"实例demo之React-Todos\",\"url\":\"/work/2016-05-08/react-todo-demo.html\",\"tags\":\"demo,react,工作\"},{\"title\":\"总结ES6常用的新特性\",\"url\":\"/work/2016-05-10/es6-feature.html\",\"tags\":\"es6,javascript,工作\"},{\"title\":\"瑾以此文纪念我逝去的“宝马”\",\"url\":\"/life/2016-05-11/life-miss-bike.html\",\"tags\":\"生活\"},{\"title\":\"实例demo之Highextend图表\",\"url\":\"/work/2016-05-12/high-extend.html\",\"tags\":\"demo,highcharts,插件,工作\"},{\"title\":\"优美的编辑器－Github Atom\",\"url\":\"/work/2016-05-13/atom-edit.html\",\"tags\":\"编辑器,工作\"},{\"title\":\"简单封装微信分享插件\",\"url\":\"/work/2016-05-14/weixin-share.html\",\"tags\":\"javascript,微信分享,插件,工作\"},{\"title\":\"hexo博客进阶－相册和独立域名\",\"url\":\"/work/2016-05-20/hexo-advance.html\",\"tags\":\"hexo系列,教程,工作\"},{\"title\":\"React入门最好的实例－TodoList\",\"url\":\"/work/2016-05-23/react-todo-study.html\",\"tags\":\"es6,react,教程,工作\"},{\"title\":\"h5+canvas实现酷炫的小游戏\",\"url\":\"/work/2016-05-29/tiny-heart-study.html\",\"tags\":\"canvas,html5,教程,工作\"},{\"title\":\"实例demo之小游戏tinyHeart\",\"url\":\"/work/2016-05-30/tiny-heart-demo.html\",\"tags\":\"canvas,demo,html5,工作\"},{\"title\":\"CSS3初体验之奇技淫巧\",\"url\":\"/work/2016-07-04/css3-study01.html\",\"tags\":\"CSS3,实例,工作\"},{\"title\":\"hexo博客进阶－性能优化\",\"url\":\"/work/2016-07-10/hexo-faster.html\",\"tags\":\"hexo系列,教程,工作\"},{\"title\":\"CSS3 3D立方体效果－transform也不过如此\",\"url\":\"/work/2016-07-23/css3-study02.html\",\"tags\":\"3D效果,CSS3,教程,工作\"},{\"title\":\"实例demo之3D transform立方体效果\",\"url\":\"/work/2016-07-24/rect-grid-demo.html\",\"tags\":\"CSS3,demo,工作\"},{\"title\":\"两种文件上传的实现－Ajax上传和form+iframe\",\"url\":\"/work/2016-08-16/file-upload.html\",\"tags\":\"ajax,javascript,文件上传,工作\"}]}","excerpt":"","more":"{\"code\":200,\"data\":[{\"title\":\"hexo搭建属于自己的博客\",\"url\":\"/work/2016-04-23/heoll-hexo.html\",\"tags\":\"工作,hexo系列,教程\"},{\"title\":\"前后端分离之前端项目构建（grunt+require+angular）\",\"url\":\"/work/2016-05-02/grunt-angular.html\",\"tags\":\"angular,grunt,教程,构建,工作\"},{\"title\":\"实例demo之React-Todos\",\"url\":\"/work/2016-05-08/react-todo-demo.html\",\"tags\":\"demo,react,工作\"},{\"title\":\"总结ES6常用的新特性\",\"url\":\"/work/2016-05-10/es6-feature.html\",\"tags\":\"es6,javascript,工作\"},{\"title\":\"瑾以此文纪念我逝去的“宝马”\",\"url\":\"/life/2016-05-11/life-miss-bike.html\",\"tags\":\"生活\"},{\"title\":\"实例demo之Highextend图表\",\"url\":\"/work/2016-05-12/high-extend.html\",\"tags\":\"demo,highcharts,插件,工作\"},{\"title\":\"优美的编辑器－Github Atom\",\"url\":\"/work/2016-05-13/atom-edit.html\",\"tags\":\"编辑器,工作\"},{\"title\":\"简单封装微信分享插件\",\"url\":\"/work/2016-05-14/weixin-share.html\",\"tags\":\"javascript,微信分享,插件,工作\"},{\"title\":\"hexo博客进阶－相册和独立域名\",\"url\":\"/work/2016-05-20/hexo-advance.html\",\"tags\":\"hexo系列,教程,工作\"},{\"title\":\"React入门最好的实例－TodoList\",\"url\":\"/work/2016-05-23/react-todo-study.html\",\"tags\":\"es6,react,教程,工作\"},{\"title\":\"h5+canvas实现酷炫的小游戏\",\"url\":\"/work/2016-05-29/tiny-heart-study.html\",\"tags\":\"canvas,html5,教程,工作\"},{\"title\":\"实例demo之小游戏tinyHeart\",\"url\":\"/work/2016-05-30/tiny-heart-demo.html\",\"tags\":\"canvas,demo,html5,工作\"},{\"title\":\"CSS3初体验之奇技淫巧\",\"url\":\"/work/2016-07-04/css3-study01.html\",\"tags\":\"CSS3,实例,工作\"},{\"title\":\"hexo博客进阶－性能优化\",\"url\":\"/work/2016-07-10/hexo-faster.html\",\"tags\":\"hexo系列,教程,工作\"},{\"title\":\"CSS3 3D立方体效果－transform也不过如此\",\"url\":\"/work/2016-07-23/css3-study02.html\",\"tags\":\"3D效果,CSS3,教程,工作\"},{\"title\":\"实例demo之3D transform立方体效果\",\"url\":\"/work/2016-07-24/rect-grid-demo.html\",\"tags\":\"CSS3,demo,工作\"},{\"title\":\"两种文件上传的实现－Ajax上传和form+iframe\",\"url\":\"/work/2016-08-16/file-upload.html\",\"tags\":\"ajax,javascript,文件上传,工作\"}]}"}],"Post":[{"title":"CSS3 3D立方体效果－transform也不过如此","date":"2016-07-23T09:41:57.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\nCSS3系列已经学习了一段时间了，第一篇文章写了一些css3的奇技淫巧，[原文戳这里](http://luckykun.com/work/2016-07-04/css3-study01.html)，还获得了较多网友的支持，在此谢过各位，你们的支持是我写文章最大的动力^_^。\n\n那么这一篇文章呢，主要是通过一个3D立方体的效果实例来深入了解css3的`transform属性`，下面是这个实例的截图，加上动画还能旋转起来哟，是不是很酷炫？换上你喜欢的女生的照片，就可以大胆的撩妹了，哈哈！ `想要查看demo，请点击这里`，[3D transform立方体效果](http://luckykun.com/work/2016-07-24/rect-grid-demo.html)\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/rect.png)\n\n<!--more-->\n\n\n# 初识transform\n顾名思义：变换。就可以想到它可以做很多很多的事情了，这个属性有很多的值，在这里简单列举一下：\n- translate(x,y)、translateX(x)、translateY(y)、translateZ(z)、translate3d(x,y,z)：定义位置的`移动距离`。\n- scale(x,y)、scaleX(x)、scaleY(y)、scaleZ(z)、scale3d(x,y,z)：定义元素的`缩放比例`。\n- rotate(angle)、rotateX(a)、rotateY(a)、rotateZ(a)、rotate3d(x,y,z,angle)：定义元素的`旋转角度`。\n- skew(x-angle,y-angle)、skewX(angle)、skewY(angle)：定义元素的`倾斜角度`。\n\n# 3D效果的认知\n![](http://7xtawy.com1.z0.glb.clouddn.com/weidu.png)\n\n我们可以看到这是一个三维的空间图，不要被第一眼的复杂感吓到，仔细分解一下其实还是很清晰的：反正就X轴、Y轴、Z轴三个方向嘛。\n\n想象一下，假如你现在坐在电脑面前，`电脑屏幕中心是原点，原点往右就是X轴正方向，往下就是Y轴正方向，往屏幕前方（也就是往人脸）的方向就是Z轴的正方向了`。把坐标轴的方向搞清楚了，上面的方法就能正确的使用了。\n\n如果你觉得上面的解释仍然太过于枯燥抽象，那就来举个生活中的例子来对应一下三个rotate属性（rotateX、rotateY、rotateZ）吧：\n\n如下图：体操表演－绕着X轴旋转就是`rotateX`（单杠就是X轴）\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/x.png)\n\n如下图：钢管舞表演－绕着Y轴旋转就是`rotateY`（钢管就是Y轴）\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/y.png)\n\n如下图：转盘旋转－绕着Z轴在旋转就是`rotateZ`（想象有一根绳子从转盘的中心穿过，图不好找＝＝）\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/Z.png)\n\n# perspective属性\n> perspective的中文意思是：透视，视角！该属性用来激活一个3D空间。\n\n当为元素定义perspective属性时，其子元素都会获得透视效果（使用了3D变换的元素）。所以一般来说perspective属性都应用在父元素上，我们可以把这个父元素称为`舞台元素`。\n\n只看解释可能还是难以理解，我们还是用实例说话吧：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/test9.gif)\n\n从上图可以看出，div1是div2的父元素，开始我们给div2元素增加旋转`transform:rotateX(50deg)`的时候，只感觉div2在平面上被'压缩'了，没有3D的效果，然后当我们给父元素div1增加`perspective: 150px;`的时候，立马就能看到3D的效果了，感受到他的神奇之处了吧。\n\n`另外，perspective的取值也一直是个谜，经过我的多次查阅和测试，得出了一下几个结论`：\n- 取值为none或不设置，就没有3D空间。\n- 取值越小，3D效果就越明显，也就是你的眼睛越靠近真3D。\n- 貌似当取值为元素的宽度时，视觉效果比较好。\n\n# transform-style\n> transform-style指定嵌套元素如何在3D空间中呈现。\n\n```js\ntransform-style: flat | preserve-3d\n```\n\n`flat`是默认值，表示所有子元素在2D平面呈现；`preserve-3d`表示所有子元素在3D空间中呈现。\n\n因此，我们想要实现一些3D效果的时候，`transform-style: preserve-3d`是少不了的。一般而言，该声明应用在3D变换的兄弟元素们的父元素上，我们可以叫它`容器`。\n\n# transform-origin\n> transform-origin用来改变元素的原点位置。\n\n它的取值方式有很多种，下面我们通过实例（把背景为黄色的div顺时针旋转45deg）来介绍一下它的常用取值方式：\n- `transform-origin:center`（默认值，等价于：center center/ 50% 50%）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/center.png)\n\n- `transform-origin:top`（等价于：top center/center top）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/1.png)\n\n- `transform-origin:bottom`（等价于：bottom center/center bottom）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/bottom.png)\n\n- `transform-origin:right`（等价于：right center/center right）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/right.png)\n\n- `transform-origin:left`（等价于：left center/center left）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/left.png)\n\n- `transform-origin:top left`（等价于：left top）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/top-left.png)\n\n- 同理，还可以设置为：`transform-origin:top right（右上角为原点）`、`transform-origin:bottom right（右下角为原点）`、`transform-origin:bottom left（左下角为原点）`\n\n# 绘制立方体效果\n各位看官等不及了吧，讲了那么多'废话'，本篇文章的`重头戏`终于来了！\n\n## dom结构\n\n```js\n<div class=\"rect-wrap\">   //舞台元素，设置perspective，让其子元素获得透视效果。\n    <div class=\"container\">    //容器，设置transform-style: preserve-3d，让其子元素在3D空间呈现\n        <div class=\"top slide\"></div>   //立方体的六个面\n        <div class=\"bottom slide\"></div>\n        <div class=\"left slide\"></div>\n        <div class=\"right slide\"></div>\n        <div class=\"front slide\"></div>\n        <div class=\"back slide\"></div>\n    </div>\n</div>\n```\n\n## css代码\n- 对于舞台元素\n\n  ```js\n    .rect-wrap {\n        position: relative;\n        perspective: 1600px;\n    }\n  ```\n\n- 对于容器\n\n  ```js\n    .container {\n        width: 800px;\n        height: 800px;\n        transform-style: preserve-3d;\n        transform-origin: 50% 50% 200px; //设置3d空间的原点在平面中心再向Z轴移动200px的位置\n    }\n  ```\n\n- 立方体的每个面\n\n  ```js\n    .slide {\n        width: 400px;\n        height: 400px;\n        position: absolute;  //定位\n    }\n  ```\n\n- 立方体顶面\n\n  ```js\n    .top {\n        left: 200px;\n        top: -200px;\n        transform: rotateX(-90deg);\n        transform-origin: bottom;\n    }\n  ```\n\n- 立方体底面\n\n  ```js\n    .bottom {\n        left: 200px;\n        bottom: -200px;\n        transform: rotateX(90deg);\n        transform-origin: top;\n    }\n  ```\n\n- 立方体左面\n\n  ```js\n    .left {\n        left: -200px;\n        top: 200px;\n        transform: rotateY(90deg);\n        transform-origin: right;\n    }\n  ```\n\n- 立方体右面\n\n  ```js\n    .right {\n        left: 600px;\n        top: 200px;\n        transform: rotateY(-90deg);\n        transform-origin: left;\n    }\n  ```\n\n- 立方体前面\n\n  ```js\n    .front {\n        left: 200px;\n        top: 200px;\n        transform: translateZ(400px);  //立方体前面正对着屏幕，所以不用旋转，只需向Z轴前移动距离\n    }\n  ```\n\n- 立方体后面\n\n  ```js\n    .back {\n        left: 200px;\n        top: 200px;\n        transform: translateZ(0);   //立方体后面正对着屏幕，所以不用旋转，只需向Z轴后移动距离\n    }\n  ```\n\n    最后别忘了给每个不同面加上图片，位置什么的再稍微调一下，这个酷炫的立方体就大功告成了。\n\n## 加动画\n最后我们还想要这个立方体自己动起来，我定义了一个动画，看官们可以试试。\n\n```js\n@keyframes rotate-frame {\n    0% {\n        transform: rotateX(0deg) rotateY(0deg);\n    }\n    10% {\n        transform: rotateX(0deg) rotateY(180deg);\n    }\n    20% {\n        transform: rotateX(-180deg) rotateY(180deg);\n    }\n    30% {\n        transform: rotateX(-360deg) rotateY(180deg);\n    }\n    40% {\n        transform: rotateX(-360deg) rotateY(360deg);\n    }\n    50% {\n        transform: rotateX(-180deg) rotateY(360deg);\n    }\n    60% {\n        transform: rotateX(90deg) rotateY(180deg);\n    }\n    70% {\n        transform: rotateX(0) rotateY(180deg);\n    }\n    80% {\n        transform: rotateX(90deg) rotateY(90deg);\n    }\n    90% {\n        transform: rotateX(90deg) rotateY(0);\n    }\n    100% {\n        transform: rotateX(0) rotateY(0);\n    }\n}\n```\n\n最后把这个动画用到这个立方体的容器元素上，就OK了：\n\n```js\n.container{\n    animation: rotate-frame 30s linear infinite;\n}\n```\n\n# 总结\n总而言之，在我学习CSS3的过程中，见到了不少的新特性，也学会了如何使用，但是我想说的是我们不管要学会怎么使用，更要去理解每一行代码为什么产生对应的效果，特别是对于`3D transform`，我们要从根本去理解了`3D空间`，才能更好的去掌握它的每一个属性值能够带来的效果。\n\n这篇文章内容稍微有点多，自己记录这篇文章的同时又对这个效果学习巩固了一篇，还是蛮开心哒。同时也希望能对各位看官在以后学习`3D transform`的道路上起到一点点作用！\n\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/css3-study02.md","raw":"---\ntitle: CSS3 3D立方体效果－transform也不过如此\ndate: 2016-07-23T17:41:57.000Z\ncategories: 工作\ntags:\n  - CSS3\n  - 教程\n  - 3D效果\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\nCSS3系列已经学习了一段时间了，第一篇文章写了一些css3的奇技淫巧，[原文戳这里](http://luckykun.com/work/2016-07-04/css3-study01.html)，还获得了较多网友的支持，在此谢过各位，你们的支持是我写文章最大的动力^_^。\n\n那么这一篇文章呢，主要是通过一个3D立方体的效果实例来深入了解css3的`transform属性`，下面是这个实例的截图，加上动画还能旋转起来哟，是不是很酷炫？换上你喜欢的女生的照片，就可以大胆的撩妹了，哈哈！ `想要查看demo，请点击这里`，[3D transform立方体效果](http://luckykun.com/work/2016-07-24/rect-grid-demo.html)\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/rect.png)\n\n<!--more-->\n\n\n# 初识transform\n顾名思义：变换。就可以想到它可以做很多很多的事情了，这个属性有很多的值，在这里简单列举一下：\n- translate(x,y)、translateX(x)、translateY(y)、translateZ(z)、translate3d(x,y,z)：定义位置的`移动距离`。\n- scale(x,y)、scaleX(x)、scaleY(y)、scaleZ(z)、scale3d(x,y,z)：定义元素的`缩放比例`。\n- rotate(angle)、rotateX(a)、rotateY(a)、rotateZ(a)、rotate3d(x,y,z,angle)：定义元素的`旋转角度`。\n- skew(x-angle,y-angle)、skewX(angle)、skewY(angle)：定义元素的`倾斜角度`。\n\n# 3D效果的认知\n![](http://7xtawy.com1.z0.glb.clouddn.com/weidu.png)\n\n我们可以看到这是一个三维的空间图，不要被第一眼的复杂感吓到，仔细分解一下其实还是很清晰的：反正就X轴、Y轴、Z轴三个方向嘛。\n\n想象一下，假如你现在坐在电脑面前，`电脑屏幕中心是原点，原点往右就是X轴正方向，往下就是Y轴正方向，往屏幕前方（也就是往人脸）的方向就是Z轴的正方向了`。把坐标轴的方向搞清楚了，上面的方法就能正确的使用了。\n\n如果你觉得上面的解释仍然太过于枯燥抽象，那就来举个生活中的例子来对应一下三个rotate属性（rotateX、rotateY、rotateZ）吧：\n\n如下图：体操表演－绕着X轴旋转就是`rotateX`（单杠就是X轴）\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/x.png)\n\n如下图：钢管舞表演－绕着Y轴旋转就是`rotateY`（钢管就是Y轴）\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/y.png)\n\n如下图：转盘旋转－绕着Z轴在旋转就是`rotateZ`（想象有一根绳子从转盘的中心穿过，图不好找＝＝）\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/Z.png)\n\n# perspective属性\n> perspective的中文意思是：透视，视角！该属性用来激活一个3D空间。\n\n当为元素定义perspective属性时，其子元素都会获得透视效果（使用了3D变换的元素）。所以一般来说perspective属性都应用在父元素上，我们可以把这个父元素称为`舞台元素`。\n\n只看解释可能还是难以理解，我们还是用实例说话吧：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/test9.gif)\n\n从上图可以看出，div1是div2的父元素，开始我们给div2元素增加旋转`transform:rotateX(50deg)`的时候，只感觉div2在平面上被'压缩'了，没有3D的效果，然后当我们给父元素div1增加`perspective: 150px;`的时候，立马就能看到3D的效果了，感受到他的神奇之处了吧。\n\n`另外，perspective的取值也一直是个谜，经过我的多次查阅和测试，得出了一下几个结论`：\n- 取值为none或不设置，就没有3D空间。\n- 取值越小，3D效果就越明显，也就是你的眼睛越靠近真3D。\n- 貌似当取值为元素的宽度时，视觉效果比较好。\n\n# transform-style\n> transform-style指定嵌套元素如何在3D空间中呈现。\n\n```js\ntransform-style: flat | preserve-3d\n```\n\n`flat`是默认值，表示所有子元素在2D平面呈现；`preserve-3d`表示所有子元素在3D空间中呈现。\n\n因此，我们想要实现一些3D效果的时候，`transform-style: preserve-3d`是少不了的。一般而言，该声明应用在3D变换的兄弟元素们的父元素上，我们可以叫它`容器`。\n\n# transform-origin\n> transform-origin用来改变元素的原点位置。\n\n它的取值方式有很多种，下面我们通过实例（把背景为黄色的div顺时针旋转45deg）来介绍一下它的常用取值方式：\n- `transform-origin:center`（默认值，等价于：center center/ 50% 50%）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/center.png)\n\n- `transform-origin:top`（等价于：top center/center top）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/1.png)\n\n- `transform-origin:bottom`（等价于：bottom center/center bottom）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/bottom.png)\n\n- `transform-origin:right`（等价于：right center/center right）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/right.png)\n\n- `transform-origin:left`（等价于：left center/center left）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/left.png)\n\n- `transform-origin:top left`（等价于：left top）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/top-left.png)\n\n- 同理，还可以设置为：`transform-origin:top right（右上角为原点）`、`transform-origin:bottom right（右下角为原点）`、`transform-origin:bottom left（左下角为原点）`\n\n# 绘制立方体效果\n各位看官等不及了吧，讲了那么多'废话'，本篇文章的`重头戏`终于来了！\n\n## dom结构\n\n```js\n<div class=\"rect-wrap\">   //舞台元素，设置perspective，让其子元素获得透视效果。\n    <div class=\"container\">    //容器，设置transform-style: preserve-3d，让其子元素在3D空间呈现\n        <div class=\"top slide\"></div>   //立方体的六个面\n        <div class=\"bottom slide\"></div>\n        <div class=\"left slide\"></div>\n        <div class=\"right slide\"></div>\n        <div class=\"front slide\"></div>\n        <div class=\"back slide\"></div>\n    </div>\n</div>\n```\n\n## css代码\n- 对于舞台元素\n\n  ```js\n    .rect-wrap {\n        position: relative;\n        perspective: 1600px;\n    }\n  ```\n\n- 对于容器\n\n  ```js\n    .container {\n        width: 800px;\n        height: 800px;\n        transform-style: preserve-3d;\n        transform-origin: 50% 50% 200px; //设置3d空间的原点在平面中心再向Z轴移动200px的位置\n    }\n  ```\n\n- 立方体的每个面\n\n  ```js\n    .slide {\n        width: 400px;\n        height: 400px;\n        position: absolute;  //定位\n    }\n  ```\n\n- 立方体顶面\n\n  ```js\n    .top {\n        left: 200px;\n        top: -200px;\n        transform: rotateX(-90deg);\n        transform-origin: bottom;\n    }\n  ```\n\n- 立方体底面\n\n  ```js\n    .bottom {\n        left: 200px;\n        bottom: -200px;\n        transform: rotateX(90deg);\n        transform-origin: top;\n    }\n  ```\n\n- 立方体左面\n\n  ```js\n    .left {\n        left: -200px;\n        top: 200px;\n        transform: rotateY(90deg);\n        transform-origin: right;\n    }\n  ```\n\n- 立方体右面\n\n  ```js\n    .right {\n        left: 600px;\n        top: 200px;\n        transform: rotateY(-90deg);\n        transform-origin: left;\n    }\n  ```\n\n- 立方体前面\n\n  ```js\n    .front {\n        left: 200px;\n        top: 200px;\n        transform: translateZ(400px);  //立方体前面正对着屏幕，所以不用旋转，只需向Z轴前移动距离\n    }\n  ```\n\n- 立方体后面\n\n  ```js\n    .back {\n        left: 200px;\n        top: 200px;\n        transform: translateZ(0);   //立方体后面正对着屏幕，所以不用旋转，只需向Z轴后移动距离\n    }\n  ```\n\n    最后别忘了给每个不同面加上图片，位置什么的再稍微调一下，这个酷炫的立方体就大功告成了。\n\n## 加动画\n最后我们还想要这个立方体自己动起来，我定义了一个动画，看官们可以试试。\n\n```js\n@keyframes rotate-frame {\n    0% {\n        transform: rotateX(0deg) rotateY(0deg);\n    }\n    10% {\n        transform: rotateX(0deg) rotateY(180deg);\n    }\n    20% {\n        transform: rotateX(-180deg) rotateY(180deg);\n    }\n    30% {\n        transform: rotateX(-360deg) rotateY(180deg);\n    }\n    40% {\n        transform: rotateX(-360deg) rotateY(360deg);\n    }\n    50% {\n        transform: rotateX(-180deg) rotateY(360deg);\n    }\n    60% {\n        transform: rotateX(90deg) rotateY(180deg);\n    }\n    70% {\n        transform: rotateX(0) rotateY(180deg);\n    }\n    80% {\n        transform: rotateX(90deg) rotateY(90deg);\n    }\n    90% {\n        transform: rotateX(90deg) rotateY(0);\n    }\n    100% {\n        transform: rotateX(0) rotateY(0);\n    }\n}\n```\n\n最后把这个动画用到这个立方体的容器元素上，就OK了：\n\n```js\n.container{\n    animation: rotate-frame 30s linear infinite;\n}\n```\n\n# 总结\n总而言之，在我学习CSS3的过程中，见到了不少的新特性，也学会了如何使用，但是我想说的是我们不管要学会怎么使用，更要去理解每一行代码为什么产生对应的效果，特别是对于`3D transform`，我们要从根本去理解了`3D空间`，才能更好的去掌握它的每一个属性值能够带来的效果。\n\n这篇文章内容稍微有点多，自己记录这篇文章的同时又对这个效果学习巩固了一篇，还是蛮开心哒。同时也希望能对各位看官在以后学习`3D transform`的道路上起到一点点作用！\n\n\n\n--------------------------------------------------------------------------------\n","slug":"css3-study02","published":1,"updated":"2016-10-12T15:34:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pda40001u13g28jwrzju","content":"<hr>\n<p>CSS3系列已经学习了一段时间了，第一篇文章写了一些css3的奇技淫巧，<a href=\"http://luckykun.com/work/2016-07-04/css3-study01.html\" target=\"_blank\" rel=\"external\">原文戳这里</a>，还获得了较多网友的支持，在此谢过各位，你们的支持是我写文章最大的动力^_^。</p>\n<p>那么这一篇文章呢，主要是通过一个3D立方体的效果实例来深入了解css3的<code>transform属性</code>，下面是这个实例的截图，加上动画还能旋转起来哟，是不是很酷炫？换上你喜欢的女生的照片，就可以大胆的撩妹了，哈哈！ <code>想要查看demo，请点击这里</code>，<a href=\"http://luckykun.com/work/2016-07-24/rect-grid-demo.html\" target=\"_blank\" rel=\"external\">3D transform立方体效果</a></p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/rect.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h1 id=\"初识transform\"><a href=\"#初识transform\" class=\"headerlink\" title=\"初识transform\"></a>初识transform</h1><p>顾名思义：变换。就可以想到它可以做很多很多的事情了，这个属性有很多的值，在这里简单列举一下：</p>\n<ul>\n<li>translate(x,y)、translateX(x)、translateY(y)、translateZ(z)、translate3d(x,y,z)：定义位置的<code>移动距离</code>。</li>\n<li>scale(x,y)、scaleX(x)、scaleY(y)、scaleZ(z)、scale3d(x,y,z)：定义元素的<code>缩放比例</code>。</li>\n<li>rotate(angle)、rotateX(a)、rotateY(a)、rotateZ(a)、rotate3d(x,y,z,angle)：定义元素的<code>旋转角度</code>。</li>\n<li>skew(x-angle,y-angle)、skewX(angle)、skewY(angle)：定义元素的<code>倾斜角度</code>。</li>\n</ul>\n<h1 id=\"3D效果的认知\"><a href=\"#3D效果的认知\" class=\"headerlink\" title=\"3D效果的认知\"></a>3D效果的认知</h1><p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/weidu.png\" alt=\"\"></p>\n<p>我们可以看到这是一个三维的空间图，不要被第一眼的复杂感吓到，仔细分解一下其实还是很清晰的：反正就X轴、Y轴、Z轴三个方向嘛。</p>\n<p>想象一下，假如你现在坐在电脑面前，<code>电脑屏幕中心是原点，原点往右就是X轴正方向，往下就是Y轴正方向，往屏幕前方（也就是往人脸）的方向就是Z轴的正方向了</code>。把坐标轴的方向搞清楚了，上面的方法就能正确的使用了。</p>\n<p>如果你觉得上面的解释仍然太过于枯燥抽象，那就来举个生活中的例子来对应一下三个rotate属性（rotateX、rotateY、rotateZ）吧：</p>\n<p>如下图：体操表演－绕着X轴旋转就是<code>rotateX</code>（单杠就是X轴）</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/x.png\" alt=\"\"></p>\n<p>如下图：钢管舞表演－绕着Y轴旋转就是<code>rotateY</code>（钢管就是Y轴）</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/y.png\" alt=\"\"></p>\n<p>如下图：转盘旋转－绕着Z轴在旋转就是<code>rotateZ</code>（想象有一根绳子从转盘的中心穿过，图不好找＝＝）</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/Z.png\" alt=\"\"></p>\n<h1 id=\"perspective属性\"><a href=\"#perspective属性\" class=\"headerlink\" title=\"perspective属性\"></a>perspective属性</h1><blockquote>\n<p>perspective的中文意思是：透视，视角！该属性用来激活一个3D空间。</p>\n</blockquote>\n<p>当为元素定义perspective属性时，其子元素都会获得透视效果（使用了3D变换的元素）。所以一般来说perspective属性都应用在父元素上，我们可以把这个父元素称为<code>舞台元素</code>。</p>\n<p>只看解释可能还是难以理解，我们还是用实例说话吧：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/test9.gif\" alt=\"\"></p>\n<p>从上图可以看出，div1是div2的父元素，开始我们给div2元素增加旋转<code>transform:rotateX(50deg)</code>的时候，只感觉div2在平面上被’压缩’了，没有3D的效果，然后当我们给父元素div1增加<code>perspective: 150px;</code>的时候，立马就能看到3D的效果了，感受到他的神奇之处了吧。</p>\n<p><code>另外，perspective的取值也一直是个谜，经过我的多次查阅和测试，得出了一下几个结论</code>：</p>\n<ul>\n<li>取值为none或不设置，就没有3D空间。</li>\n<li>取值越小，3D效果就越明显，也就是你的眼睛越靠近真3D。</li>\n<li>貌似当取值为元素的宽度时，视觉效果比较好。</li>\n</ul>\n<h1 id=\"transform-style\"><a href=\"#transform-style\" class=\"headerlink\" title=\"transform-style\"></a>transform-style</h1><blockquote>\n<p>transform-style指定嵌套元素如何在3D空间中呈现。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">transform-style: flat | preserve<span class=\"number\">-3</span>d</div></pre></td></tr></table></figure>\n<p><code>flat</code>是默认值，表示所有子元素在2D平面呈现；<code>preserve-3d</code>表示所有子元素在3D空间中呈现。</p>\n<p>因此，我们想要实现一些3D效果的时候，<code>transform-style: preserve-3d</code>是少不了的。一般而言，该声明应用在3D变换的兄弟元素们的父元素上，我们可以叫它<code>容器</code>。</p>\n<h1 id=\"transform-origin\"><a href=\"#transform-origin\" class=\"headerlink\" title=\"transform-origin\"></a>transform-origin</h1><blockquote>\n<p>transform-origin用来改变元素的原点位置。</p>\n</blockquote>\n<p>它的取值方式有很多种，下面我们通过实例（把背景为黄色的div顺时针旋转45deg）来介绍一下它的常用取值方式：</p>\n<ul>\n<li><p><code>transform-origin:center</code>（默认值，等价于：center center/ 50% 50%）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/center.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:top</code>（等价于：top center/center top）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/1.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:bottom</code>（等价于：bottom center/center bottom）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/bottom.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:right</code>（等价于：right center/center right）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/right.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:left</code>（等价于：left center/center left）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/left.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:top left</code>（等价于：left top）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/top-left.png\" alt=\"\"></p>\n</li>\n<li><p>同理，还可以设置为：<code>transform-origin:top right（右上角为原点）</code>、<code>transform-origin:bottom right（右下角为原点）</code>、<code>transform-origin:bottom left（左下角为原点）</code></p>\n</li>\n</ul>\n<h1 id=\"绘制立方体效果\"><a href=\"#绘制立方体效果\" class=\"headerlink\" title=\"绘制立方体效果\"></a>绘制立方体效果</h1><p>各位看官等不及了吧，讲了那么多’废话’，本篇文章的<code>重头戏</code>终于来了！</p>\n<h2 id=\"dom结构\"><a href=\"#dom结构\" class=\"headerlink\" title=\"dom结构\"></a>dom结构</h2><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"rect-wrap\"&gt;   //舞台元素，设置perspective，让其子元素获得透视效果。</div><div class=\"line\">    &lt;div class=\"container\"&gt;    //容器，设置transform-style: preserve-3d，让其子元素在3D空间呈现</div><div class=\"line\">        &lt;div class=\"top slide\"&gt;&lt;/div&gt;   //立方体的六个面</div><div class=\"line\">        &lt;div class=\"bottom slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"left slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"right slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"front slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"back slide\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h2><ul>\n<li><p>对于舞台元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.rect-wrap &#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">    perspective: <span class=\"number\">1600</span>px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于容器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.container &#123;</div><div class=\"line\">    width: <span class=\"number\">800</span>px;</div><div class=\"line\">    height: <span class=\"number\">800</span>px;</div><div class=\"line\">    transform-style: preserve<span class=\"number\">-3</span>d;</div><div class=\"line\">    transform-origin: <span class=\"number\">50</span>% <span class=\"number\">50</span>% <span class=\"number\">200</span>px; <span class=\"comment\">//设置3d空间的原点在平面中心再向Z轴移动200px的位置</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体的每个面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.slide &#123;</div><div class=\"line\">    width: <span class=\"number\">400</span>px;</div><div class=\"line\">    height: <span class=\"number\">400</span>px;</div><div class=\"line\">    position: absolute;  <span class=\"comment\">//定位</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体顶面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.top &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    top: <span class=\"number\">-200</span>px;</div><div class=\"line\">    transform: rotateX(<span class=\"number\">-90</span>deg);</div><div class=\"line\">    transform-origin: bottom;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体底面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.bottom &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    bottom: <span class=\"number\">-200</span>px;</div><div class=\"line\">    transform: rotateX(<span class=\"number\">90</span>deg);</div><div class=\"line\">    transform-origin: top;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体左面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.left &#123;</div><div class=\"line\">    left: <span class=\"number\">-200</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: rotateY(<span class=\"number\">90</span>deg);</div><div class=\"line\">    transform-origin: right;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体右面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.right &#123;</div><div class=\"line\">    left: <span class=\"number\">600</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: rotateY(<span class=\"number\">-90</span>deg);</div><div class=\"line\">    transform-origin: left;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体前面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.front &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: translateZ(<span class=\"number\">400</span>px);  <span class=\"comment\">//立方体前面正对着屏幕，所以不用旋转，只需向Z轴前移动距离</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体后面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.back &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: translateZ(<span class=\"number\">0</span>);   <span class=\"comment\">//立方体后面正对着屏幕，所以不用旋转，只需向Z轴后移动距离</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  最后别忘了给每个不同面加上图片，位置什么的再稍微调一下，这个酷炫的立方体就大功告成了。</p>\n</li>\n</ul>\n<h2 id=\"加动画\"><a href=\"#加动画\" class=\"headerlink\" title=\"加动画\"></a>加动画</h2><p>最后我们还想要这个立方体自己动起来，我定义了一个动画，看官们可以试试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">@keyframes rotate-frame &#123;</div><div class=\"line\">    <span class=\"number\">0</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>deg) rotateY(<span class=\"number\">0</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">10</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">20</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-180</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">30</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-360</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">40</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-360</span>deg) rotateY(<span class=\"number\">360</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">50</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-180</span>deg) rotateY(<span class=\"number\">360</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">60</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">90</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">70</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">80</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">90</span>deg) rotateY(<span class=\"number\">90</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">90</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">90</span>deg) rotateY(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">100</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>) rotateY(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后把这个动画用到这个立方体的容器元素上，就OK了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.container&#123;</div><div class=\"line\">    animation: rotate-frame <span class=\"number\">30</span>s linear infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总而言之，在我学习CSS3的过程中，见到了不少的新特性，也学会了如何使用，但是我想说的是我们不管要学会怎么使用，更要去理解每一行代码为什么产生对应的效果，特别是对于<code>3D transform</code>，我们要从根本去理解了<code>3D空间</code>，才能更好的去掌握它的每一个属性值能够带来的效果。</p>\n<p>这篇文章内容稍微有点多，自己记录这篇文章的同时又对这个效果学习巩固了一篇，还是蛮开心哒。同时也希望能对各位看官在以后学习<code>3D transform</code>的道路上起到一点点作用！</p>\n<hr>\n","excerpt":"<hr>\n<p>CSS3系列已经学习了一段时间了，第一篇文章写了一些css3的奇技淫巧，<a href=\"http://luckykun.com/work/2016-07-04/css3-study01.html\">原文戳这里</a>，还获得了较多网友的支持，在此谢过各位，你们的支持是我写文章最大的动力^_^。</p>\n<p>那么这一篇文章呢，主要是通过一个3D立方体的效果实例来深入了解css3的<code>transform属性</code>，下面是这个实例的截图，加上动画还能旋转起来哟，是不是很酷炫？换上你喜欢的女生的照片，就可以大胆的撩妹了，哈哈！ <code>想要查看demo，请点击这里</code>，<a href=\"http://luckykun.com/work/2016-07-24/rect-grid-demo.html\">3D transform立方体效果</a></p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/rect.png\" alt=\"\"></p>","more":"<h1 id=\"初识transform\"><a href=\"#初识transform\" class=\"headerlink\" title=\"初识transform\"></a>初识transform</h1><p>顾名思义：变换。就可以想到它可以做很多很多的事情了，这个属性有很多的值，在这里简单列举一下：</p>\n<ul>\n<li>translate(x,y)、translateX(x)、translateY(y)、translateZ(z)、translate3d(x,y,z)：定义位置的<code>移动距离</code>。</li>\n<li>scale(x,y)、scaleX(x)、scaleY(y)、scaleZ(z)、scale3d(x,y,z)：定义元素的<code>缩放比例</code>。</li>\n<li>rotate(angle)、rotateX(a)、rotateY(a)、rotateZ(a)、rotate3d(x,y,z,angle)：定义元素的<code>旋转角度</code>。</li>\n<li>skew(x-angle,y-angle)、skewX(angle)、skewY(angle)：定义元素的<code>倾斜角度</code>。</li>\n</ul>\n<h1 id=\"3D效果的认知\"><a href=\"#3D效果的认知\" class=\"headerlink\" title=\"3D效果的认知\"></a>3D效果的认知</h1><p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/weidu.png\" alt=\"\"></p>\n<p>我们可以看到这是一个三维的空间图，不要被第一眼的复杂感吓到，仔细分解一下其实还是很清晰的：反正就X轴、Y轴、Z轴三个方向嘛。</p>\n<p>想象一下，假如你现在坐在电脑面前，<code>电脑屏幕中心是原点，原点往右就是X轴正方向，往下就是Y轴正方向，往屏幕前方（也就是往人脸）的方向就是Z轴的正方向了</code>。把坐标轴的方向搞清楚了，上面的方法就能正确的使用了。</p>\n<p>如果你觉得上面的解释仍然太过于枯燥抽象，那就来举个生活中的例子来对应一下三个rotate属性（rotateX、rotateY、rotateZ）吧：</p>\n<p>如下图：体操表演－绕着X轴旋转就是<code>rotateX</code>（单杠就是X轴）</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/x.png\" alt=\"\"></p>\n<p>如下图：钢管舞表演－绕着Y轴旋转就是<code>rotateY</code>（钢管就是Y轴）</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/y.png\" alt=\"\"></p>\n<p>如下图：转盘旋转－绕着Z轴在旋转就是<code>rotateZ</code>（想象有一根绳子从转盘的中心穿过，图不好找＝＝）</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/Z.png\" alt=\"\"></p>\n<h1 id=\"perspective属性\"><a href=\"#perspective属性\" class=\"headerlink\" title=\"perspective属性\"></a>perspective属性</h1><blockquote>\n<p>perspective的中文意思是：透视，视角！该属性用来激活一个3D空间。</p>\n</blockquote>\n<p>当为元素定义perspective属性时，其子元素都会获得透视效果（使用了3D变换的元素）。所以一般来说perspective属性都应用在父元素上，我们可以把这个父元素称为<code>舞台元素</code>。</p>\n<p>只看解释可能还是难以理解，我们还是用实例说话吧：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/test9.gif\" alt=\"\"></p>\n<p>从上图可以看出，div1是div2的父元素，开始我们给div2元素增加旋转<code>transform:rotateX(50deg)</code>的时候，只感觉div2在平面上被’压缩’了，没有3D的效果，然后当我们给父元素div1增加<code>perspective: 150px;</code>的时候，立马就能看到3D的效果了，感受到他的神奇之处了吧。</p>\n<p><code>另外，perspective的取值也一直是个谜，经过我的多次查阅和测试，得出了一下几个结论</code>：</p>\n<ul>\n<li>取值为none或不设置，就没有3D空间。</li>\n<li>取值越小，3D效果就越明显，也就是你的眼睛越靠近真3D。</li>\n<li>貌似当取值为元素的宽度时，视觉效果比较好。</li>\n</ul>\n<h1 id=\"transform-style\"><a href=\"#transform-style\" class=\"headerlink\" title=\"transform-style\"></a>transform-style</h1><blockquote>\n<p>transform-style指定嵌套元素如何在3D空间中呈现。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">transform-style: flat | preserve<span class=\"number\">-3</span>d</div></pre></td></tr></table></figure>\n<p><code>flat</code>是默认值，表示所有子元素在2D平面呈现；<code>preserve-3d</code>表示所有子元素在3D空间中呈现。</p>\n<p>因此，我们想要实现一些3D效果的时候，<code>transform-style: preserve-3d</code>是少不了的。一般而言，该声明应用在3D变换的兄弟元素们的父元素上，我们可以叫它<code>容器</code>。</p>\n<h1 id=\"transform-origin\"><a href=\"#transform-origin\" class=\"headerlink\" title=\"transform-origin\"></a>transform-origin</h1><blockquote>\n<p>transform-origin用来改变元素的原点位置。</p>\n</blockquote>\n<p>它的取值方式有很多种，下面我们通过实例（把背景为黄色的div顺时针旋转45deg）来介绍一下它的常用取值方式：</p>\n<ul>\n<li><p><code>transform-origin:center</code>（默认值，等价于：center center/ 50% 50%）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/center.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:top</code>（等价于：top center/center top）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/1.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:bottom</code>（等价于：bottom center/center bottom）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/bottom.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:right</code>（等价于：right center/center right）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/right.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:left</code>（等价于：left center/center left）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/left.png\" alt=\"\"></p>\n</li>\n<li><p><code>transform-origin:top left</code>（等价于：left top）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/top-left.png\" alt=\"\"></p>\n</li>\n<li><p>同理，还可以设置为：<code>transform-origin:top right（右上角为原点）</code>、<code>transform-origin:bottom right（右下角为原点）</code>、<code>transform-origin:bottom left（左下角为原点）</code></p>\n</li>\n</ul>\n<h1 id=\"绘制立方体效果\"><a href=\"#绘制立方体效果\" class=\"headerlink\" title=\"绘制立方体效果\"></a>绘制立方体效果</h1><p>各位看官等不及了吧，讲了那么多’废话’，本篇文章的<code>重头戏</code>终于来了！</p>\n<h2 id=\"dom结构\"><a href=\"#dom结构\" class=\"headerlink\" title=\"dom结构\"></a>dom结构</h2><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"rect-wrap\"&gt;   //舞台元素，设置perspective，让其子元素获得透视效果。</div><div class=\"line\">    &lt;div class=\"container\"&gt;    //容器，设置transform-style: preserve-3d，让其子元素在3D空间呈现</div><div class=\"line\">        &lt;div class=\"top slide\"&gt;&lt;/div&gt;   //立方体的六个面</div><div class=\"line\">        &lt;div class=\"bottom slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"left slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"right slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"front slide\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"back slide\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h2><ul>\n<li><p>对于舞台元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.rect-wrap &#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">    perspective: <span class=\"number\">1600</span>px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于容器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.container &#123;</div><div class=\"line\">    width: <span class=\"number\">800</span>px;</div><div class=\"line\">    height: <span class=\"number\">800</span>px;</div><div class=\"line\">    transform-style: preserve<span class=\"number\">-3</span>d;</div><div class=\"line\">    transform-origin: <span class=\"number\">50</span>% <span class=\"number\">50</span>% <span class=\"number\">200</span>px; <span class=\"comment\">//设置3d空间的原点在平面中心再向Z轴移动200px的位置</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体的每个面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.slide &#123;</div><div class=\"line\">    width: <span class=\"number\">400</span>px;</div><div class=\"line\">    height: <span class=\"number\">400</span>px;</div><div class=\"line\">    position: absolute;  <span class=\"comment\">//定位</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体顶面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.top &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    top: <span class=\"number\">-200</span>px;</div><div class=\"line\">    transform: rotateX(<span class=\"number\">-90</span>deg);</div><div class=\"line\">    transform-origin: bottom;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体底面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.bottom &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    bottom: <span class=\"number\">-200</span>px;</div><div class=\"line\">    transform: rotateX(<span class=\"number\">90</span>deg);</div><div class=\"line\">    transform-origin: top;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体左面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.left &#123;</div><div class=\"line\">    left: <span class=\"number\">-200</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: rotateY(<span class=\"number\">90</span>deg);</div><div class=\"line\">    transform-origin: right;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体右面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.right &#123;</div><div class=\"line\">    left: <span class=\"number\">600</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: rotateY(<span class=\"number\">-90</span>deg);</div><div class=\"line\">    transform-origin: left;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体前面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.front &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: translateZ(<span class=\"number\">400</span>px);  <span class=\"comment\">//立方体前面正对着屏幕，所以不用旋转，只需向Z轴前移动距离</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>立方体后面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.back &#123;</div><div class=\"line\">    left: <span class=\"number\">200</span>px;</div><div class=\"line\">    top: <span class=\"number\">200</span>px;</div><div class=\"line\">    transform: translateZ(<span class=\"number\">0</span>);   <span class=\"comment\">//立方体后面正对着屏幕，所以不用旋转，只需向Z轴后移动距离</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  最后别忘了给每个不同面加上图片，位置什么的再稍微调一下，这个酷炫的立方体就大功告成了。</p>\n</li>\n</ul>\n<h2 id=\"加动画\"><a href=\"#加动画\" class=\"headerlink\" title=\"加动画\"></a>加动画</h2><p>最后我们还想要这个立方体自己动起来，我定义了一个动画，看官们可以试试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">@keyframes rotate-frame &#123;</div><div class=\"line\">    <span class=\"number\">0</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>deg) rotateY(<span class=\"number\">0</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">10</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">20</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-180</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">30</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-360</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">40</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-360</span>deg) rotateY(<span class=\"number\">360</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">50</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">-180</span>deg) rotateY(<span class=\"number\">360</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">60</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">90</span>deg) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">70</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>) rotateY(<span class=\"number\">180</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">80</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">90</span>deg) rotateY(<span class=\"number\">90</span>deg);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">90</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">90</span>deg) rotateY(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"number\">100</span>% &#123;</div><div class=\"line\">        transform: rotateX(<span class=\"number\">0</span>) rotateY(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后把这个动画用到这个立方体的容器元素上，就OK了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">.container&#123;</div><div class=\"line\">    animation: rotate-frame <span class=\"number\">30</span>s linear infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总而言之，在我学习CSS3的过程中，见到了不少的新特性，也学会了如何使用，但是我想说的是我们不管要学会怎么使用，更要去理解每一行代码为什么产生对应的效果，特别是对于<code>3D transform</code>，我们要从根本去理解了<code>3D空间</code>，才能更好的去掌握它的每一个属性值能够带来的效果。</p>\n<p>这篇文章内容稍微有点多，自己记录这篇文章的同时又对这个效果学习巩固了一篇，还是蛮开心哒。同时也希望能对各位看官在以后学习<code>3D transform</code>的道路上起到一点点作用！</p>\n<hr>"},{"title":"canvas学习之API整理笔记（一）","date":"2016-09-01T03:07:56.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n其实canvas本身很简单，就是去学习它的API，多看实例，多自己动手练习，多总结。但是canvas的API实在是有点多，对于初学者来说，可能学到一半就止步不前了。我也有这种感觉，在学习的过程中，编写实例，用到了其中很多的属性和方法，但是回头来看的时候总觉得什么也没用。所以决定系统性的记录一下它常用到的API，方便以后查阅，也顺便造福一下大家。\n\n另外：附一个之前学习的时候自己跟着教程写的一个小游戏：[tinyHeart小游戏](http://luckykun.com/work/2016-05-30/tiny-heart-demo.html)\n<!--more-->\n\n# 开始之前\n假设html代码中有一个canvas标签：\n\n```js\n<canvas id=\"canvas\">你的浏览器不支持canvas！</canvas>\n```\n\n如果你的浏览器是IE8及以下，那么很遗憾，上面那段文字会被渲染出来！而且下面的方法也都不能使用了；所以请使用支持canvas的浏览器来使用后面的方法。\n\n```js\n//获取canvas容器\nvar can = document.getElementById(‘canvas’);\n//创建一个画布\nvar ctx = can.getContext(‘2d’);\n```\n\n另外我们可以还可以得到容器的宽和高度\n\n```js\nvar canWid = can.width;   //canvas 的宽度\nvar canHei = can.height;   //canvas 的高度\n```\n\ncanvas只是一个容器，本身没有绘制的能力，所以我们要得到一个画布`ctx`，使之具有绘制各种图形的能力。下文所有的方法都是ctx的方法。\n\n# 绘制\n绘制一个矩形：\n\n```js\n//填充矩形（x, y是横纵坐标，原点在canvas的左上角）\nctx.fillRect(x, y, width, height);\n//边框矩形，默认1px 黑色。   \nctx.strokeRect(x, y, width, height);\n//清除指定的矩形区域，变为透明\nctx.clearRect(x, y, width, height);       //绘制动态效果时，常用来清除整个画布\n```\n\n绘制路径:\n\n```js\n//新建路径，beginPath是绘制新图形的开始\nctx.beginPath()\n//路径（线）的起点，一般在上面这条命令后执行\nctx.moveTo(x, y)  \n//线的终点\nctx.lineTo(x, y)   \n//绘制圆形\nctx.arc(x, y, r, start, end, true/false)   //x, y圆心，r半径，start和end是开始和结束角度，false表示顺时针（默认），true表示逆时针。\n//绘制弧线\nctx.arcTo(x1, y1, x2, y2, r);    //当前端点、(x1,y1)和(x2,y2)这三个点连成的弧线，r是半径。\n//闭合路径，不是必须的，如果线的终点跟起点一样，会自动闭合。\nctx.closePath()\n//通过线条绘制轮廓（边框）\nctx.stroke()   \n//通过路径填充区域（实心）\nctx.fill()\n```\n\n说明：\n\n1.fill()和stroke()函数表示绘图结束。如果要继续绘制，需要重新新建路径（beginPath()）。\n\n2.如果lineTo()最后的路径没有封闭，fill()函数会自动封闭路径，而stroke()函数不会。\n\n例：绘制一个三角形\n\n```js\nctx.beginPath();\nctx.moveTo(75, 50);    //路径起点\nctx.lineTo(100, 75);\nctx.lineTo(100, 25);\nctx.fill();   //自动将路径闭合，并默认填充黑色。\n```\n\n# 样式\n- 颜色\n\n  ```js\n  ctx.fillStyle = 'red'   //针对fill()有效的颜色，还可以取值：'#fff'、'rgba(0, 0, 0, 0.5)'等。\n  ctx.strokeStyle = 'red'   //针对stroke()有效的颜色，取值同上。\n  ctx.globalAlpha = 0.5;   //透明度\n  ```\n\n- 线段端点\n\n  ```js\n  ctx.lineWidth = 2;   //线条宽度\n  ctx.lineCap = 'butt(默认)'、'round(圆弧)'、'square(方形)'  //线段端点显示的样式\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  var lineCap = ['butt','round','square'];\n  ctx.strokeStyle = 'black';\n  for (var i=0;i<lineCap.length;i++){\n      ctx.lineWidth = 15;\n      ctx.lineCap = lineCap[i];\n      ctx.beginPath();\n      ctx.moveTo(25+i*50,10);\n      ctx.lineTo(25+i*50,140);\n      ctx.stroke();\n  }\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1MubjMVXXXXXuXFXXXXXXXXXX-143-158.png)\n\n- 线段连接处\n\n  ```js\n  ctx.lineJoin = 'miter(默认)'、round(圆角)、`bevel(横线)`   //两线段连接处所显示的样子\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  var lineJoin = ['round','bevel','miter'];\n  ctx.lineWidth = 10;\n  for (var i=0;i<lineJoin.length;i++){\n      ctx.lineJoin = lineJoin[i];\n      ctx.beginPath();\n      ctx.moveTo(10,50+i*40);\n      ctx.lineTo(50,10+i*40);\n      ctx.lineTo(90,50+i*40);\n      ctx.lineTo(130,10+i*40);\n      ctx.lineTo(170,50+i*40);\n      ctx.stroke();\n  }\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1XRvfMVXXXXccXFXXXXXXXXXX-181-139.png)\n\n- 虚线\n\n  ```js\n  ctx.setLineDash([4, 2])   //设置虚线，参数为数组，第一个值为实现宽度，第二个值为空白的宽度\n  ctx.lineDashOffset = 0;   //虚线起始偏移量\n  ```\n\n  ```js\n  var can = document.getElementById('canvas');\n  var ctx = can.getContext('2d');\n  var offset = 0;\n  function draw() {\n      offset++;      \n      if (offset > 16) {            \n          offset = 0;      \n      }\n      ctx.clearRect(0,0, can.width, can.height);  \n      ctx.setLineDash([6, 2]);  \n      ctx.lineDashOffset = -offset;  \n      ctx.strokeRect(10,10, 100, 100);\n  }\n  setInterval(draw, 20);\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1knDkMVXXXXXLXFXXXXXXXXXX-145-114.gif)\n\n- 渐变\n\n  ```js\n  var bg = ctx.createLinearGradient(x1, y1, x2, y2);  //定义线性渐变，渐变的起点 (x1,y1) 与终点 (x2,y2)。\n  var bg1 = ctx.createRadialGradient(50, 50, 0, 50, 50, 100);   //定义径向渐变\n  bg.addColorStop(0, 'red');  //定义好，之后开始上色\n  bg.addColorStop(0.5, 'blue');\n  bg.addColorStop(1, 'rgba(0, 0, 0, 0.6)');\n  ```\n\n  ```js\n  var bg = ctx.createLinearGradient(0, 0, 0, 200);     //线性渐变\n  bg.addColorStop(0, 'black');\n  bg.addColorStop(0.6, '#fff');\n  ctx.fillStyle = bg;\n  ctx.fillRect(10, 10, 100, 100);\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1G3_XMVXXXXX4aXXXXXXXXXXX-125-119.png)\n\n```js\n  var bg1 = ctx.createRadialGradient(100, 100, 0, 100, 100, 50);    //径向渐变\n  bg1.addColorStop(0, '#FF5F98');\n  bg1.addColorStop(0.75, '#FF0188');\n  bg1.addColorStop(1, 'rgba(255,1,136,0)');\n  ctx.fillStyle = bg1;\n  ctx.fillRect(0,0,150,150);\n```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1.qW8MVXXXXbcaXXXXXXXXXXX-140-146.png)\n\n# 文字\n\n```js\nvar ctx = document.getElementById('canvas').getContext('2d');\nctx.shadowOffsetX = 2;     //X轴阴影距离，负值表示往上，正值表示往下\nctx.shadowOffsetY = 2;     //Y轴阴影距离，负值表示往左，正值表示往右\nctx.shadowBlur = 2;     //阴影的模糊程度\nctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";    //阴影颜色\nctx.font = \"30px Times New Roman\";    //设置字体和字体大小\nctx.fillStyle = \"Black\";\nctx.fillText(\"Sample String\", 15, 30);    //实体文字\nctx.strokeStyle = 'red';\nctx.strokeText('Hello world', 15, 100);    //边框文字\n```\n\n效果如下图：\n\n![](https://img.alicdn.com/tps/TB1HIvbMVXXXXcuaXXXXXXXXXXX-219-149.png)\n\n文字的属性出了上面的列出的以外，还有以下一些属性：\n\n```js\nctx.font = '20px Times New Roman';\nctx.textAlign = 'center';    //start, end, left, right or center\nctx.textBaseline = 'middle'  //top, hanging, middle, alphabetic, ideographic, bottom\nctx.direction = 'inherit'   //ltr, rtl, inherit\n```\n\n# 图像\n\n```js\nvar img = new Image();\nimg.src= './images/background.jpg';\nctx.drawImage(img, 0, 0);   //img为图像，(0, 0)为起始坐标\n```\n\n这里的img可以是一个img对象，也可以是一个img元素。\n\n```js\n<img id=\"img\" src=\"./images/background.jpg\" style=\"display:none;\">\nctx.drawImage(document.getElementById('img'), 0, 0);\n```\n\n另外，绘制图片的时候还可以对图片进行缩放，类似于css中的`background-size`：\n\n```js\nctx.drawImage(img, 0, 0, w, h);   //w、h指定图片的宽高，则会同比例缩放。\n```\n\n# 变形\n慢慢的从这里开始，就要开始涉及到复杂的绘制了。而开始复杂的绘制之前，我们得先了解一个概念：`canvas绘图的状态`。\n- 状态\n\n  canvas 的状态就是当前画面应用的所有样式和变形的一个快照。另外，用来操作这个状态的有两个方法：`save()和restore()`。save()用来保存当前状态，restore()用来恢复刚才保存的状态。他们都可以多次调用。\n\n```js\n  ctx.fillStyle = 'black';\n  ctx.fillRect(20, 20, 150, 150);\n  ctx.save();  //保存当前状态\n  ctx.fillStyle= '#fff';\n  ctx.fillRect(45, 45, 100, 100);\n  ctx.restore();    //恢复到刚才保存的状态\n  ctx.fillRect(70, 70, 50, 50);\n```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1CLzJMVXXXXa_aXXXXXXXXXXX-235-227.png)\n- 位移(translate)\n\n  ```js\n  ctx.translate(x, y);   //更改canvas的原点\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  for(var i = 1; i< 4; i++) {\n      ctx.save();   //使用save方法保存状态，让每次位移时都针对（0，0）移动。\n    ctx.translate(100*i, 0);\n    ctx.fillRect(0, 50, 50, 50);\n    ctx.restore();\n  }\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1Oyf8MVXXXXX9XXXXXXXXXXXX-425-170.png)\n\n- 旋转\n\n  ```js\n  ctx.rotate(Math.PI * 2)     //参照原点顺时针旋转360度\n  ```\n\n```js\n  ctx.translate(75,75);    //把原点移动到(75, 75);\n  for (var i=1; i<6; i++){       // 从里到外一共6圈\n    ctx.save();\n    ctx.fillStyle = 'rgb('+(50*i)+','+(255-50*i)+',255)';\n    for (var j=0; j<i*6; j++){     // 每一圈有i*6个圆点\n      ctx.rotate(Math.PI*2/(i*6));\n      ctx.beginPath();\n      ctx.arc(0,i*12.5,5,0,Math.PI*2,true);\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1VMIaMVXXXXXjXXXXXXXXXXXX-183-181.png)\n- 缩放\n\n  ```js\n  ctx.scale(x, y);     //基于原点缩放，x、y是两个轴的缩放倍数\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  ctx.fillStyle = 'red';\n  ctx.scale(0.8, 1.2);\n  ctx.beginPath();\n  ctx.arc(75, 75, 60, 0, Math.PI * 2);\n  ctx.fill();\n  ```\n\n  本来绘制的是一个半径为60的圆形，但是经过缩放之后，实际效果如下：\n\n  ![](https://img.alicdn.com/tps/TB1drnVMVXXXXbqXVXXXXXXXXXX-127-194.png)\n\n# 动画\n> 元素的位置移动，就形成了动画。\n\n一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。实现起来也很方便，js提供了两个方法：`setTimeout 和setInterval`都可以实现，但是一个有逼格的程序员实现动画是不会用这两个方法的，而是用`requestAnimationFrame`这个方法。有什么区别呢？下面简单做个比较。\n- `setInterval(myFun, 10);` 意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而10ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现`丢帧`的问题；反之，如果时间设置太长，就会出现`画面不流畅、视觉卡顿`的问题。\n- `requestAnimationFrame(myFun);` 如果我们这样写，又是什么意思呢？意思是根据一定的时间间隔，会自动执行myFun函数来进行绘制。这个\"一定的时间间隔\"就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。\n\n# 结语\n这些API已经包含了大部分常用的了，结合requestAnimationFrame函数已经可以绘制很多酷炫的效果了。但是光看这些API很简单，但是想要在绘制游戏或者动画中用起来得心应手还需要看大量的实例，自己实践总结的。\n\n本文就到这里，感谢各位看官～\n\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/canvas-study01.md","raw":"---\ntitle: canvas学习之API整理笔记（一）\ndate: 2016-09-01T11:07:56.000Z\ncategories: 工作\ntags:\n  - canvas\n  - html5\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n其实canvas本身很简单，就是去学习它的API，多看实例，多自己动手练习，多总结。但是canvas的API实在是有点多，对于初学者来说，可能学到一半就止步不前了。我也有这种感觉，在学习的过程中，编写实例，用到了其中很多的属性和方法，但是回头来看的时候总觉得什么也没用。所以决定系统性的记录一下它常用到的API，方便以后查阅，也顺便造福一下大家。\n\n另外：附一个之前学习的时候自己跟着教程写的一个小游戏：[tinyHeart小游戏](http://luckykun.com/work/2016-05-30/tiny-heart-demo.html)\n<!--more-->\n\n# 开始之前\n假设html代码中有一个canvas标签：\n\n```js\n<canvas id=\"canvas\">你的浏览器不支持canvas！</canvas>\n```\n\n如果你的浏览器是IE8及以下，那么很遗憾，上面那段文字会被渲染出来！而且下面的方法也都不能使用了；所以请使用支持canvas的浏览器来使用后面的方法。\n\n```js\n//获取canvas容器\nvar can = document.getElementById(‘canvas’);\n//创建一个画布\nvar ctx = can.getContext(‘2d’);\n```\n\n另外我们可以还可以得到容器的宽和高度\n\n```js\nvar canWid = can.width;   //canvas 的宽度\nvar canHei = can.height;   //canvas 的高度\n```\n\ncanvas只是一个容器，本身没有绘制的能力，所以我们要得到一个画布`ctx`，使之具有绘制各种图形的能力。下文所有的方法都是ctx的方法。\n\n# 绘制\n绘制一个矩形：\n\n```js\n//填充矩形（x, y是横纵坐标，原点在canvas的左上角）\nctx.fillRect(x, y, width, height);\n//边框矩形，默认1px 黑色。   \nctx.strokeRect(x, y, width, height);\n//清除指定的矩形区域，变为透明\nctx.clearRect(x, y, width, height);       //绘制动态效果时，常用来清除整个画布\n```\n\n绘制路径:\n\n```js\n//新建路径，beginPath是绘制新图形的开始\nctx.beginPath()\n//路径（线）的起点，一般在上面这条命令后执行\nctx.moveTo(x, y)  \n//线的终点\nctx.lineTo(x, y)   \n//绘制圆形\nctx.arc(x, y, r, start, end, true/false)   //x, y圆心，r半径，start和end是开始和结束角度，false表示顺时针（默认），true表示逆时针。\n//绘制弧线\nctx.arcTo(x1, y1, x2, y2, r);    //当前端点、(x1,y1)和(x2,y2)这三个点连成的弧线，r是半径。\n//闭合路径，不是必须的，如果线的终点跟起点一样，会自动闭合。\nctx.closePath()\n//通过线条绘制轮廓（边框）\nctx.stroke()   \n//通过路径填充区域（实心）\nctx.fill()\n```\n\n说明：\n\n1.fill()和stroke()函数表示绘图结束。如果要继续绘制，需要重新新建路径（beginPath()）。\n\n2.如果lineTo()最后的路径没有封闭，fill()函数会自动封闭路径，而stroke()函数不会。\n\n例：绘制一个三角形\n\n```js\nctx.beginPath();\nctx.moveTo(75, 50);    //路径起点\nctx.lineTo(100, 75);\nctx.lineTo(100, 25);\nctx.fill();   //自动将路径闭合，并默认填充黑色。\n```\n\n# 样式\n- 颜色\n\n  ```js\n  ctx.fillStyle = 'red'   //针对fill()有效的颜色，还可以取值：'#fff'、'rgba(0, 0, 0, 0.5)'等。\n  ctx.strokeStyle = 'red'   //针对stroke()有效的颜色，取值同上。\n  ctx.globalAlpha = 0.5;   //透明度\n  ```\n\n- 线段端点\n\n  ```js\n  ctx.lineWidth = 2;   //线条宽度\n  ctx.lineCap = 'butt(默认)'、'round(圆弧)'、'square(方形)'  //线段端点显示的样式\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  var lineCap = ['butt','round','square'];\n  ctx.strokeStyle = 'black';\n  for (var i=0;i<lineCap.length;i++){\n      ctx.lineWidth = 15;\n      ctx.lineCap = lineCap[i];\n      ctx.beginPath();\n      ctx.moveTo(25+i*50,10);\n      ctx.lineTo(25+i*50,140);\n      ctx.stroke();\n  }\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1MubjMVXXXXXuXFXXXXXXXXXX-143-158.png)\n\n- 线段连接处\n\n  ```js\n  ctx.lineJoin = 'miter(默认)'、round(圆角)、`bevel(横线)`   //两线段连接处所显示的样子\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  var lineJoin = ['round','bevel','miter'];\n  ctx.lineWidth = 10;\n  for (var i=0;i<lineJoin.length;i++){\n      ctx.lineJoin = lineJoin[i];\n      ctx.beginPath();\n      ctx.moveTo(10,50+i*40);\n      ctx.lineTo(50,10+i*40);\n      ctx.lineTo(90,50+i*40);\n      ctx.lineTo(130,10+i*40);\n      ctx.lineTo(170,50+i*40);\n      ctx.stroke();\n  }\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1XRvfMVXXXXccXFXXXXXXXXXX-181-139.png)\n\n- 虚线\n\n  ```js\n  ctx.setLineDash([4, 2])   //设置虚线，参数为数组，第一个值为实现宽度，第二个值为空白的宽度\n  ctx.lineDashOffset = 0;   //虚线起始偏移量\n  ```\n\n  ```js\n  var can = document.getElementById('canvas');\n  var ctx = can.getContext('2d');\n  var offset = 0;\n  function draw() {\n      offset++;      \n      if (offset > 16) {            \n          offset = 0;      \n      }\n      ctx.clearRect(0,0, can.width, can.height);  \n      ctx.setLineDash([6, 2]);  \n      ctx.lineDashOffset = -offset;  \n      ctx.strokeRect(10,10, 100, 100);\n  }\n  setInterval(draw, 20);\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1knDkMVXXXXXLXFXXXXXXXXXX-145-114.gif)\n\n- 渐变\n\n  ```js\n  var bg = ctx.createLinearGradient(x1, y1, x2, y2);  //定义线性渐变，渐变的起点 (x1,y1) 与终点 (x2,y2)。\n  var bg1 = ctx.createRadialGradient(50, 50, 0, 50, 50, 100);   //定义径向渐变\n  bg.addColorStop(0, 'red');  //定义好，之后开始上色\n  bg.addColorStop(0.5, 'blue');\n  bg.addColorStop(1, 'rgba(0, 0, 0, 0.6)');\n  ```\n\n  ```js\n  var bg = ctx.createLinearGradient(0, 0, 0, 200);     //线性渐变\n  bg.addColorStop(0, 'black');\n  bg.addColorStop(0.6, '#fff');\n  ctx.fillStyle = bg;\n  ctx.fillRect(10, 10, 100, 100);\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1G3_XMVXXXXX4aXXXXXXXXXXX-125-119.png)\n\n```js\n  var bg1 = ctx.createRadialGradient(100, 100, 0, 100, 100, 50);    //径向渐变\n  bg1.addColorStop(0, '#FF5F98');\n  bg1.addColorStop(0.75, '#FF0188');\n  bg1.addColorStop(1, 'rgba(255,1,136,0)');\n  ctx.fillStyle = bg1;\n  ctx.fillRect(0,0,150,150);\n```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1.qW8MVXXXXbcaXXXXXXXXXXX-140-146.png)\n\n# 文字\n\n```js\nvar ctx = document.getElementById('canvas').getContext('2d');\nctx.shadowOffsetX = 2;     //X轴阴影距离，负值表示往上，正值表示往下\nctx.shadowOffsetY = 2;     //Y轴阴影距离，负值表示往左，正值表示往右\nctx.shadowBlur = 2;     //阴影的模糊程度\nctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";    //阴影颜色\nctx.font = \"30px Times New Roman\";    //设置字体和字体大小\nctx.fillStyle = \"Black\";\nctx.fillText(\"Sample String\", 15, 30);    //实体文字\nctx.strokeStyle = 'red';\nctx.strokeText('Hello world', 15, 100);    //边框文字\n```\n\n效果如下图：\n\n![](https://img.alicdn.com/tps/TB1HIvbMVXXXXcuaXXXXXXXXXXX-219-149.png)\n\n文字的属性出了上面的列出的以外，还有以下一些属性：\n\n```js\nctx.font = '20px Times New Roman';\nctx.textAlign = 'center';    //start, end, left, right or center\nctx.textBaseline = 'middle'  //top, hanging, middle, alphabetic, ideographic, bottom\nctx.direction = 'inherit'   //ltr, rtl, inherit\n```\n\n# 图像\n\n```js\nvar img = new Image();\nimg.src= './images/background.jpg';\nctx.drawImage(img, 0, 0);   //img为图像，(0, 0)为起始坐标\n```\n\n这里的img可以是一个img对象，也可以是一个img元素。\n\n```js\n<img id=\"img\" src=\"./images/background.jpg\" style=\"display:none;\">\nctx.drawImage(document.getElementById('img'), 0, 0);\n```\n\n另外，绘制图片的时候还可以对图片进行缩放，类似于css中的`background-size`：\n\n```js\nctx.drawImage(img, 0, 0, w, h);   //w、h指定图片的宽高，则会同比例缩放。\n```\n\n# 变形\n慢慢的从这里开始，就要开始涉及到复杂的绘制了。而开始复杂的绘制之前，我们得先了解一个概念：`canvas绘图的状态`。\n- 状态\n\n  canvas 的状态就是当前画面应用的所有样式和变形的一个快照。另外，用来操作这个状态的有两个方法：`save()和restore()`。save()用来保存当前状态，restore()用来恢复刚才保存的状态。他们都可以多次调用。\n\n```js\n  ctx.fillStyle = 'black';\n  ctx.fillRect(20, 20, 150, 150);\n  ctx.save();  //保存当前状态\n  ctx.fillStyle= '#fff';\n  ctx.fillRect(45, 45, 100, 100);\n  ctx.restore();    //恢复到刚才保存的状态\n  ctx.fillRect(70, 70, 50, 50);\n```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1CLzJMVXXXXa_aXXXXXXXXXXX-235-227.png)\n- 位移(translate)\n\n  ```js\n  ctx.translate(x, y);   //更改canvas的原点\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  for(var i = 1; i< 4; i++) {\n      ctx.save();   //使用save方法保存状态，让每次位移时都针对（0，0）移动。\n    ctx.translate(100*i, 0);\n    ctx.fillRect(0, 50, 50, 50);\n    ctx.restore();\n  }\n  ```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1Oyf8MVXXXXX9XXXXXXXXXXXX-425-170.png)\n\n- 旋转\n\n  ```js\n  ctx.rotate(Math.PI * 2)     //参照原点顺时针旋转360度\n  ```\n\n```js\n  ctx.translate(75,75);    //把原点移动到(75, 75);\n  for (var i=1; i<6; i++){       // 从里到外一共6圈\n    ctx.save();\n    ctx.fillStyle = 'rgb('+(50*i)+','+(255-50*i)+',255)';\n    for (var j=0; j<i*6; j++){     // 每一圈有i*6个圆点\n      ctx.rotate(Math.PI*2/(i*6));\n      ctx.beginPath();\n      ctx.arc(0,i*12.5,5,0,Math.PI*2,true);\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n```\n\n  效果如下图：\n\n  ![](https://img.alicdn.com/tps/TB1VMIaMVXXXXXjXXXXXXXXXXXX-183-181.png)\n- 缩放\n\n  ```js\n  ctx.scale(x, y);     //基于原点缩放，x、y是两个轴的缩放倍数\n  ```\n\n  ```js\n  var ctx = document.getElementById('canvas').getContext('2d');\n  ctx.fillStyle = 'red';\n  ctx.scale(0.8, 1.2);\n  ctx.beginPath();\n  ctx.arc(75, 75, 60, 0, Math.PI * 2);\n  ctx.fill();\n  ```\n\n  本来绘制的是一个半径为60的圆形，但是经过缩放之后，实际效果如下：\n\n  ![](https://img.alicdn.com/tps/TB1drnVMVXXXXbqXVXXXXXXXXXX-127-194.png)\n\n# 动画\n> 元素的位置移动，就形成了动画。\n\n一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。实现起来也很方便，js提供了两个方法：`setTimeout 和setInterval`都可以实现，但是一个有逼格的程序员实现动画是不会用这两个方法的，而是用`requestAnimationFrame`这个方法。有什么区别呢？下面简单做个比较。\n- `setInterval(myFun, 10);` 意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而10ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现`丢帧`的问题；反之，如果时间设置太长，就会出现`画面不流畅、视觉卡顿`的问题。\n- `requestAnimationFrame(myFun);` 如果我们这样写，又是什么意思呢？意思是根据一定的时间间隔，会自动执行myFun函数来进行绘制。这个\"一定的时间间隔\"就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。\n\n# 结语\n这些API已经包含了大部分常用的了，结合requestAnimationFrame函数已经可以绘制很多酷炫的效果了。但是光看这些API很简单，但是想要在绘制游戏或者动画中用起来得心应手还需要看大量的实例，自己实践总结的。\n\n本文就到这里，感谢各位看官～\n\n\n\n--------------------------------------------------------------------------------\n","slug":"canvas-study01","published":1,"updated":"2016-10-11T16:28:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdab0003u13g1mak0lbd","content":"<hr>\n<p>其实canvas本身很简单，就是去学习它的API，多看实例，多自己动手练习，多总结。但是canvas的API实在是有点多，对于初学者来说，可能学到一半就止步不前了。我也有这种感觉，在学习的过程中，编写实例，用到了其中很多的属性和方法，但是回头来看的时候总觉得什么也没用。所以决定系统性的记录一下它常用到的API，方便以后查阅，也顺便造福一下大家。</p>\n<p>另外：附一个之前学习的时候自己跟着教程写的一个小游戏：<a href=\"http://luckykun.com/work/2016-05-30/tiny-heart-demo.html\" target=\"_blank\" rel=\"external\">tinyHeart小游戏</a><br><a id=\"more\"></a></p>\n<h1 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h1><p>假设html代码中有一个canvas标签：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;canvas id=<span class=\"string\">\"canvas\"</span>&gt;你的浏览器不支持canvas！&lt;<span class=\"regexp\">/canvas&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你的浏览器是IE8及以下，那么很遗憾，上面那段文字会被渲染出来！而且下面的方法也都不能使用了；所以请使用支持canvas的浏览器来使用后面的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取canvas容器</span></div><div class=\"line\"><span class=\"keyword\">var</span> can = <span class=\"built_in\">document</span>.getElementById(‘canvas’);</div><div class=\"line\"><span class=\"comment\">//创建一个画布</span></div><div class=\"line\"><span class=\"keyword\">var</span> ctx = can.getContext(‘<span class=\"number\">2</span>d’);</div></pre></td></tr></table></figure>\n<p>另外我们可以还可以得到容器的宽和高度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canWid = can.width;   <span class=\"comment\">//canvas 的宽度</span></div><div class=\"line\"><span class=\"keyword\">var</span> canHei = can.height;   <span class=\"comment\">//canvas 的高度</span></div></pre></td></tr></table></figure>\n<p>canvas只是一个容器，本身没有绘制的能力，所以我们要得到一个画布<code>ctx</code>，使之具有绘制各种图形的能力。下文所有的方法都是ctx的方法。</p>\n<h1 id=\"绘制\"><a href=\"#绘制\" class=\"headerlink\" title=\"绘制\"></a>绘制</h1><p>绘制一个矩形：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//填充矩形（x, y是横纵坐标，原点在canvas的左上角）</span></div><div class=\"line\">ctx.fillRect(x, y, width, height);</div><div class=\"line\"><span class=\"comment\">//边框矩形，默认1px 黑色。   </span></div><div class=\"line\">ctx.strokeRect(x, y, width, height);</div><div class=\"line\"><span class=\"comment\">//清除指定的矩形区域，变为透明</span></div><div class=\"line\">ctx.clearRect(x, y, width, height);       <span class=\"comment\">//绘制动态效果时，常用来清除整个画布</span></div></pre></td></tr></table></figure>\n<p>绘制路径:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新建路径，beginPath是绘制新图形的开始</span></div><div class=\"line\">ctx.beginPath()</div><div class=\"line\"><span class=\"comment\">//路径（线）的起点，一般在上面这条命令后执行</span></div><div class=\"line\">ctx.moveTo(x, y)  </div><div class=\"line\"><span class=\"comment\">//线的终点</span></div><div class=\"line\">ctx.lineTo(x, y)   </div><div class=\"line\"><span class=\"comment\">//绘制圆形</span></div><div class=\"line\">ctx.arc(x, y, r, start, end, <span class=\"literal\">true</span>/<span class=\"literal\">false</span>)   <span class=\"comment\">//x, y圆心，r半径，start和end是开始和结束角度，false表示顺时针（默认），true表示逆时针。</span></div><div class=\"line\"><span class=\"comment\">//绘制弧线</span></div><div class=\"line\">ctx.arcTo(x1, y1, x2, y2, r);    <span class=\"comment\">//当前端点、(x1,y1)和(x2,y2)这三个点连成的弧线，r是半径。</span></div><div class=\"line\"><span class=\"comment\">//闭合路径，不是必须的，如果线的终点跟起点一样，会自动闭合。</span></div><div class=\"line\">ctx.closePath()</div><div class=\"line\"><span class=\"comment\">//通过线条绘制轮廓（边框）</span></div><div class=\"line\">ctx.stroke()   </div><div class=\"line\"><span class=\"comment\">//通过路径填充区域（实心）</span></div><div class=\"line\">ctx.fill()</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>1.fill()和stroke()函数表示绘图结束。如果要继续绘制，需要重新新建路径（beginPath()）。</p>\n<p>2.如果lineTo()最后的路径没有封闭，fill()函数会自动封闭路径，而stroke()函数不会。</p>\n<p>例：绘制一个三角形</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.moveTo(<span class=\"number\">75</span>, <span class=\"number\">50</span>);    <span class=\"comment\">//路径起点</span></div><div class=\"line\">ctx.lineTo(<span class=\"number\">100</span>, <span class=\"number\">75</span>);</div><div class=\"line\">ctx.lineTo(<span class=\"number\">100</span>, <span class=\"number\">25</span>);</div><div class=\"line\">ctx.fill();   <span class=\"comment\">//自动将路径闭合，并默认填充黑色。</span></div></pre></td></tr></table></figure>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><ul>\n<li><p>颜色</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'red'</span>   <span class=\"comment\">//针对fill()有效的颜色，还可以取值：'#fff'、'rgba(0, 0, 0, 0.5)'等。</span></div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>   <span class=\"comment\">//针对stroke()有效的颜色，取值同上。</span></div><div class=\"line\">ctx.globalAlpha = <span class=\"number\">0.5</span>;   <span class=\"comment\">//透明度</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>线段端点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.lineWidth = <span class=\"number\">2</span>;   <span class=\"comment\">//线条宽度</span></div><div class=\"line\">ctx.lineCap = <span class=\"string\">'butt(默认)'</span>、<span class=\"string\">'round(圆弧)'</span>、<span class=\"string\">'square(方形)'</span>  <span class=\"comment\">//线段端点显示的样式</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> lineCap = [<span class=\"string\">'butt'</span>,<span class=\"string\">'round'</span>,<span class=\"string\">'square'</span>];</div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'black'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;lineCap.length;i++)&#123;</div><div class=\"line\">    ctx.lineWidth = <span class=\"number\">15</span>;</div><div class=\"line\">    ctx.lineCap = lineCap[i];</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.moveTo(<span class=\"number\">25</span>+i*<span class=\"number\">50</span>,<span class=\"number\">10</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">25</span>+i*<span class=\"number\">50</span>,<span class=\"number\">140</span>);</div><div class=\"line\">    ctx.stroke();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1MubjMVXXXXXuXFXXXXXXXXXX-143-158.png\" alt=\"\"></p>\n</li>\n<li><p>线段连接处</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.lineJoin = <span class=\"string\">'miter(默认)'</span>、round(圆角)、<span class=\"string\">`bevel(横线)`</span>   <span class=\"comment\">//两线段连接处所显示的样子</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> lineJoin = [<span class=\"string\">'round'</span>,<span class=\"string\">'bevel'</span>,<span class=\"string\">'miter'</span>];</div><div class=\"line\">ctx.lineWidth = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;lineJoin.length;i++)&#123;</div><div class=\"line\">    ctx.lineJoin = lineJoin[i];</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.moveTo(<span class=\"number\">10</span>,<span class=\"number\">50</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">50</span>,<span class=\"number\">10</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">90</span>,<span class=\"number\">50</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">130</span>,<span class=\"number\">10</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">170</span>,<span class=\"number\">50</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.stroke();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1XRvfMVXXXXccXFXXXXXXXXXX-181-139.png\" alt=\"\"></p>\n</li>\n<li><p>虚线</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.setLineDash([<span class=\"number\">4</span>, <span class=\"number\">2</span>])   <span class=\"comment\">//设置虚线，参数为数组，第一个值为实现宽度，第二个值为空白的宽度</span></div><div class=\"line\">ctx.lineDashOffset = <span class=\"number\">0</span>;   <span class=\"comment\">//虚线起始偏移量</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> can = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ctx = can.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> offset = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    offset++;      </div><div class=\"line\">    <span class=\"keyword\">if</span> (offset &gt; <span class=\"number\">16</span>) &#123;            </div><div class=\"line\">        offset = <span class=\"number\">0</span>;      </div><div class=\"line\">    &#125;</div><div class=\"line\">    ctx.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>, can.width, can.height);  </div><div class=\"line\">    ctx.setLineDash([<span class=\"number\">6</span>, <span class=\"number\">2</span>]);  </div><div class=\"line\">    ctx.lineDashOffset = -offset;  </div><div class=\"line\">    ctx.strokeRect(<span class=\"number\">10</span>,<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">setInterval(draw, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1knDkMVXXXXXLXFXXXXXXXXXX-145-114.gif\" alt=\"\"></p>\n</li>\n<li><p>渐变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bg = ctx.createLinearGradient(x1, y1, x2, y2);  <span class=\"comment\">//定义线性渐变，渐变的起点 (x1,y1) 与终点 (x2,y2)。</span></div><div class=\"line\"><span class=\"keyword\">var</span> bg1 = ctx.createRadialGradient(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>);   <span class=\"comment\">//定义径向渐变</span></div><div class=\"line\">bg.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'red'</span>);  <span class=\"comment\">//定义好，之后开始上色</span></div><div class=\"line\">bg.addColorStop(<span class=\"number\">0.5</span>, <span class=\"string\">'blue'</span>);</div><div class=\"line\">bg.addColorStop(<span class=\"number\">1</span>, <span class=\"string\">'rgba(0, 0, 0, 0.6)'</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bg = ctx.createLinearGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>);     <span class=\"comment\">//线性渐变</span></div><div class=\"line\">bg.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'black'</span>);</div><div class=\"line\">bg.addColorStop(<span class=\"number\">0.6</span>, <span class=\"string\">'#fff'</span>);</div><div class=\"line\">ctx.fillStyle = bg;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1G3_XMVXXXXX4aXXXXXXXXXXX-125-119.png\" alt=\"\"></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bg1 = ctx.createRadialGradient(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>);    <span class=\"comment\">//径向渐变</span></div><div class=\"line\">bg1.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'#FF5F98'</span>);</div><div class=\"line\">bg1.addColorStop(<span class=\"number\">0.75</span>, <span class=\"string\">'#FF0188'</span>);</div><div class=\"line\">bg1.addColorStop(<span class=\"number\">1</span>, <span class=\"string\">'rgba(255,1,136,0)'</span>);</div><div class=\"line\">ctx.fillStyle = bg1;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>);</div></pre></td></tr></table></figure>\n<p>  效果如下图：</p>\n<p>  <img src=\"https://img.alicdn.com/tps/TB1.qW8MVXXXXbcaXXXXXXXXXXX-140-146.png\" alt=\"\"></p>\n<h1 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\">ctx.shadowOffsetX = <span class=\"number\">2</span>;     <span class=\"comment\">//X轴阴影距离，负值表示往上，正值表示往下</span></div><div class=\"line\">ctx.shadowOffsetY = <span class=\"number\">2</span>;     <span class=\"comment\">//Y轴阴影距离，负值表示往左，正值表示往右</span></div><div class=\"line\">ctx.shadowBlur = <span class=\"number\">2</span>;     <span class=\"comment\">//阴影的模糊程度</span></div><div class=\"line\">ctx.shadowColor = <span class=\"string\">\"rgba(0, 0, 0, 0.5)\"</span>;    <span class=\"comment\">//阴影颜色</span></div><div class=\"line\">ctx.font = <span class=\"string\">\"30px Times New Roman\"</span>;    <span class=\"comment\">//设置字体和字体大小</span></div><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"Black\"</span>;</div><div class=\"line\">ctx.fillText(<span class=\"string\">\"Sample String\"</span>, <span class=\"number\">15</span>, <span class=\"number\">30</span>);    <span class=\"comment\">//实体文字</span></div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.strokeText(<span class=\"string\">'Hello world'</span>, <span class=\"number\">15</span>, <span class=\"number\">100</span>);    <span class=\"comment\">//边框文字</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1HIvbMVXXXXcuaXXXXXXXXXXX-219-149.png\" alt=\"\"></p>\n<p>文字的属性出了上面的列出的以外，还有以下一些属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.font = <span class=\"string\">'20px Times New Roman'</span>;</div><div class=\"line\">ctx.textAlign = <span class=\"string\">'center'</span>;    <span class=\"comment\">//start, end, left, right or center</span></div><div class=\"line\">ctx.textBaseline = <span class=\"string\">'middle'</span>  <span class=\"comment\">//top, hanging, middle, alphabetic, ideographic, bottom</span></div><div class=\"line\">ctx.direction = <span class=\"string\">'inherit'</span>   <span class=\"comment\">//ltr, rtl, inherit</span></div></pre></td></tr></table></figure>\n<h1 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">img.src= <span class=\"string\">'./images/background.jpg'</span>;</div><div class=\"line\">ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);   <span class=\"comment\">//img为图像，(0, 0)为起始坐标</span></div></pre></td></tr></table></figure>\n<p>这里的img可以是一个img对象，也可以是一个img元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;img id=<span class=\"string\">\"img\"</span> src=<span class=\"string\">\"./images/background.jpg\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;</div><div class=\"line\">ctx.drawImage(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<p>另外，绘制图片的时候还可以对图片进行缩放，类似于css中的<code>background-size</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);   <span class=\"comment\">//w、h指定图片的宽高，则会同比例缩放。</span></div></pre></td></tr></table></figure>\n<h1 id=\"变形\"><a href=\"#变形\" class=\"headerlink\" title=\"变形\"></a>变形</h1><p>慢慢的从这里开始，就要开始涉及到复杂的绘制了。而开始复杂的绘制之前，我们得先了解一个概念：<code>canvas绘图的状态</code>。</p>\n<ul>\n<li><p>状态</p>\n<p>canvas 的状态就是当前画面应用的所有样式和变形的一个快照。另外，用来操作这个状态的有两个方法：<code>save()和restore()</code>。save()用来保存当前状态，restore()用来恢复刚才保存的状态。他们都可以多次调用。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'black'</span>;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">150</span>, <span class=\"number\">150</span>);</div><div class=\"line\">ctx.save();  <span class=\"comment\">//保存当前状态</span></div><div class=\"line\">ctx.fillStyle= <span class=\"string\">'#fff'</span>;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">45</span>, <span class=\"number\">45</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">ctx.restore();    <span class=\"comment\">//恢复到刚才保存的状态</span></div><div class=\"line\">ctx.fillRect(<span class=\"number\">70</span>, <span class=\"number\">70</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div></pre></td></tr></table></figure>\n<p>  效果如下图：</p>\n<p>  <img src=\"https://img.alicdn.com/tps/TB1CLzJMVXXXXa_aXXXXXXXXXXX-235-227.png\" alt=\"\"></p>\n<ul>\n<li><p>位移(translate)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.translate(x, y);   <span class=\"comment\">//更改canvas的原点</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i&lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">    ctx.save();   <span class=\"comment\">//使用save方法保存状态，让每次位移时都针对（0，0）移动。</span></div><div class=\"line\">  ctx.translate(<span class=\"number\">100</span>*i, <span class=\"number\">0</span>);</div><div class=\"line\">  ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">  ctx.restore();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1Oyf8MVXXXXX9XXXXXXXXXXXX-425-170.png\" alt=\"\"></p>\n</li>\n<li><p>旋转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.rotate(<span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>)     <span class=\"comment\">//参照原点顺时针旋转360度</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.translate(<span class=\"number\">75</span>,<span class=\"number\">75</span>);    <span class=\"comment\">//把原点移动到(75, 75);</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">6</span>; i++)&#123;       <span class=\"comment\">// 从里到外一共6圈</span></div><div class=\"line\">  ctx.save();</div><div class=\"line\">  ctx.fillStyle = <span class=\"string\">'rgb('</span>+(<span class=\"number\">50</span>*i)+<span class=\"string\">','</span>+(<span class=\"number\">255</span><span class=\"number\">-50</span>*i)+<span class=\"string\">',255)'</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j&lt;i*<span class=\"number\">6</span>; j++)&#123;     <span class=\"comment\">// 每一圈有i*6个圆点</span></div><div class=\"line\">    ctx.rotate(<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>/(i*<span class=\"number\">6</span>));</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.arc(<span class=\"number\">0</span>,i*<span class=\"number\">12.5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">true</span>);</div><div class=\"line\">    ctx.fill();</div><div class=\"line\">  &#125;</div><div class=\"line\">  ctx.restore();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  效果如下图：</p>\n<p>  <img src=\"https://img.alicdn.com/tps/TB1VMIaMVXXXXXjXXXXXXXXXXXX-183-181.png\" alt=\"\"></p>\n<ul>\n<li><p>缩放</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.scale(x, y);     <span class=\"comment\">//基于原点缩放，x、y是两个轴的缩放倍数</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.scale(<span class=\"number\">0.8</span>, <span class=\"number\">1.2</span>);</div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(<span class=\"number\">75</span>, <span class=\"number\">75</span>, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>);</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<p>本来绘制的是一个半径为60的圆形，但是经过缩放之后，实际效果如下：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1drnVMVXXXXbqXVXXXXXXXXXX-127-194.png\" alt=\"\"></p>\n</li>\n</ul>\n<h1 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h1><blockquote>\n<p>元素的位置移动，就形成了动画。</p>\n</blockquote>\n<p>一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。实现起来也很方便，js提供了两个方法：<code>setTimeout 和setInterval</code>都可以实现，但是一个有逼格的程序员实现动画是不会用这两个方法的，而是用<code>requestAnimationFrame</code>这个方法。有什么区别呢？下面简单做个比较。</p>\n<ul>\n<li><code>setInterval(myFun, 10);</code> 意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而10ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现<code>丢帧</code>的问题；反之，如果时间设置太长，就会出现<code>画面不流畅、视觉卡顿</code>的问题。</li>\n<li><code>requestAnimationFrame(myFun);</code> 如果我们这样写，又是什么意思呢？意思是根据一定的时间间隔，会自动执行myFun函数来进行绘制。这个”一定的时间间隔”就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。</li>\n</ul>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>这些API已经包含了大部分常用的了，结合requestAnimationFrame函数已经可以绘制很多酷炫的效果了。但是光看这些API很简单，但是想要在绘制游戏或者动画中用起来得心应手还需要看大量的实例，自己实践总结的。</p>\n<p>本文就到这里，感谢各位看官～</p>\n<hr>\n","excerpt":"<hr>\n<p>其实canvas本身很简单，就是去学习它的API，多看实例，多自己动手练习，多总结。但是canvas的API实在是有点多，对于初学者来说，可能学到一半就止步不前了。我也有这种感觉，在学习的过程中，编写实例，用到了其中很多的属性和方法，但是回头来看的时候总觉得什么也没用。所以决定系统性的记录一下它常用到的API，方便以后查阅，也顺便造福一下大家。</p>\n<p>另外：附一个之前学习的时候自己跟着教程写的一个小游戏：<a href=\"http://luckykun.com/work/2016-05-30/tiny-heart-demo.html\">tinyHeart小游戏</a><br>","more":"</p>\n<h1 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h1><p>假设html代码中有一个canvas标签：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;canvas id=<span class=\"string\">\"canvas\"</span>&gt;你的浏览器不支持canvas！&lt;<span class=\"regexp\">/canvas&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你的浏览器是IE8及以下，那么很遗憾，上面那段文字会被渲染出来！而且下面的方法也都不能使用了；所以请使用支持canvas的浏览器来使用后面的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取canvas容器</span></div><div class=\"line\"><span class=\"keyword\">var</span> can = <span class=\"built_in\">document</span>.getElementById(‘canvas’);</div><div class=\"line\"><span class=\"comment\">//创建一个画布</span></div><div class=\"line\"><span class=\"keyword\">var</span> ctx = can.getContext(‘<span class=\"number\">2</span>d’);</div></pre></td></tr></table></figure>\n<p>另外我们可以还可以得到容器的宽和高度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canWid = can.width;   <span class=\"comment\">//canvas 的宽度</span></div><div class=\"line\"><span class=\"keyword\">var</span> canHei = can.height;   <span class=\"comment\">//canvas 的高度</span></div></pre></td></tr></table></figure>\n<p>canvas只是一个容器，本身没有绘制的能力，所以我们要得到一个画布<code>ctx</code>，使之具有绘制各种图形的能力。下文所有的方法都是ctx的方法。</p>\n<h1 id=\"绘制\"><a href=\"#绘制\" class=\"headerlink\" title=\"绘制\"></a>绘制</h1><p>绘制一个矩形：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//填充矩形（x, y是横纵坐标，原点在canvas的左上角）</span></div><div class=\"line\">ctx.fillRect(x, y, width, height);</div><div class=\"line\"><span class=\"comment\">//边框矩形，默认1px 黑色。   </span></div><div class=\"line\">ctx.strokeRect(x, y, width, height);</div><div class=\"line\"><span class=\"comment\">//清除指定的矩形区域，变为透明</span></div><div class=\"line\">ctx.clearRect(x, y, width, height);       <span class=\"comment\">//绘制动态效果时，常用来清除整个画布</span></div></pre></td></tr></table></figure>\n<p>绘制路径:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新建路径，beginPath是绘制新图形的开始</span></div><div class=\"line\">ctx.beginPath()</div><div class=\"line\"><span class=\"comment\">//路径（线）的起点，一般在上面这条命令后执行</span></div><div class=\"line\">ctx.moveTo(x, y)  </div><div class=\"line\"><span class=\"comment\">//线的终点</span></div><div class=\"line\">ctx.lineTo(x, y)   </div><div class=\"line\"><span class=\"comment\">//绘制圆形</span></div><div class=\"line\">ctx.arc(x, y, r, start, end, <span class=\"literal\">true</span>/<span class=\"literal\">false</span>)   <span class=\"comment\">//x, y圆心，r半径，start和end是开始和结束角度，false表示顺时针（默认），true表示逆时针。</span></div><div class=\"line\"><span class=\"comment\">//绘制弧线</span></div><div class=\"line\">ctx.arcTo(x1, y1, x2, y2, r);    <span class=\"comment\">//当前端点、(x1,y1)和(x2,y2)这三个点连成的弧线，r是半径。</span></div><div class=\"line\"><span class=\"comment\">//闭合路径，不是必须的，如果线的终点跟起点一样，会自动闭合。</span></div><div class=\"line\">ctx.closePath()</div><div class=\"line\"><span class=\"comment\">//通过线条绘制轮廓（边框）</span></div><div class=\"line\">ctx.stroke()   </div><div class=\"line\"><span class=\"comment\">//通过路径填充区域（实心）</span></div><div class=\"line\">ctx.fill()</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>1.fill()和stroke()函数表示绘图结束。如果要继续绘制，需要重新新建路径（beginPath()）。</p>\n<p>2.如果lineTo()最后的路径没有封闭，fill()函数会自动封闭路径，而stroke()函数不会。</p>\n<p>例：绘制一个三角形</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.moveTo(<span class=\"number\">75</span>, <span class=\"number\">50</span>);    <span class=\"comment\">//路径起点</span></div><div class=\"line\">ctx.lineTo(<span class=\"number\">100</span>, <span class=\"number\">75</span>);</div><div class=\"line\">ctx.lineTo(<span class=\"number\">100</span>, <span class=\"number\">25</span>);</div><div class=\"line\">ctx.fill();   <span class=\"comment\">//自动将路径闭合，并默认填充黑色。</span></div></pre></td></tr></table></figure>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><ul>\n<li><p>颜色</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'red'</span>   <span class=\"comment\">//针对fill()有效的颜色，还可以取值：'#fff'、'rgba(0, 0, 0, 0.5)'等。</span></div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>   <span class=\"comment\">//针对stroke()有效的颜色，取值同上。</span></div><div class=\"line\">ctx.globalAlpha = <span class=\"number\">0.5</span>;   <span class=\"comment\">//透明度</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>线段端点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.lineWidth = <span class=\"number\">2</span>;   <span class=\"comment\">//线条宽度</span></div><div class=\"line\">ctx.lineCap = <span class=\"string\">'butt(默认)'</span>、<span class=\"string\">'round(圆弧)'</span>、<span class=\"string\">'square(方形)'</span>  <span class=\"comment\">//线段端点显示的样式</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> lineCap = [<span class=\"string\">'butt'</span>,<span class=\"string\">'round'</span>,<span class=\"string\">'square'</span>];</div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'black'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;lineCap.length;i++)&#123;</div><div class=\"line\">    ctx.lineWidth = <span class=\"number\">15</span>;</div><div class=\"line\">    ctx.lineCap = lineCap[i];</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.moveTo(<span class=\"number\">25</span>+i*<span class=\"number\">50</span>,<span class=\"number\">10</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">25</span>+i*<span class=\"number\">50</span>,<span class=\"number\">140</span>);</div><div class=\"line\">    ctx.stroke();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1MubjMVXXXXXuXFXXXXXXXXXX-143-158.png\" alt=\"\"></p>\n</li>\n<li><p>线段连接处</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.lineJoin = <span class=\"string\">'miter(默认)'</span>、round(圆角)、<span class=\"string\">`bevel(横线)`</span>   <span class=\"comment\">//两线段连接处所显示的样子</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> lineJoin = [<span class=\"string\">'round'</span>,<span class=\"string\">'bevel'</span>,<span class=\"string\">'miter'</span>];</div><div class=\"line\">ctx.lineWidth = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;lineJoin.length;i++)&#123;</div><div class=\"line\">    ctx.lineJoin = lineJoin[i];</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.moveTo(<span class=\"number\">10</span>,<span class=\"number\">50</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">50</span>,<span class=\"number\">10</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">90</span>,<span class=\"number\">50</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">130</span>,<span class=\"number\">10</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.lineTo(<span class=\"number\">170</span>,<span class=\"number\">50</span>+i*<span class=\"number\">40</span>);</div><div class=\"line\">    ctx.stroke();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1XRvfMVXXXXccXFXXXXXXXXXX-181-139.png\" alt=\"\"></p>\n</li>\n<li><p>虚线</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.setLineDash([<span class=\"number\">4</span>, <span class=\"number\">2</span>])   <span class=\"comment\">//设置虚线，参数为数组，第一个值为实现宽度，第二个值为空白的宽度</span></div><div class=\"line\">ctx.lineDashOffset = <span class=\"number\">0</span>;   <span class=\"comment\">//虚线起始偏移量</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> can = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ctx = can.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> offset = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    offset++;      </div><div class=\"line\">    <span class=\"keyword\">if</span> (offset &gt; <span class=\"number\">16</span>) &#123;            </div><div class=\"line\">        offset = <span class=\"number\">0</span>;      </div><div class=\"line\">    &#125;</div><div class=\"line\">    ctx.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>, can.width, can.height);  </div><div class=\"line\">    ctx.setLineDash([<span class=\"number\">6</span>, <span class=\"number\">2</span>]);  </div><div class=\"line\">    ctx.lineDashOffset = -offset;  </div><div class=\"line\">    ctx.strokeRect(<span class=\"number\">10</span>,<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">setInterval(draw, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1knDkMVXXXXXLXFXXXXXXXXXX-145-114.gif\" alt=\"\"></p>\n</li>\n<li><p>渐变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bg = ctx.createLinearGradient(x1, y1, x2, y2);  <span class=\"comment\">//定义线性渐变，渐变的起点 (x1,y1) 与终点 (x2,y2)。</span></div><div class=\"line\"><span class=\"keyword\">var</span> bg1 = ctx.createRadialGradient(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>);   <span class=\"comment\">//定义径向渐变</span></div><div class=\"line\">bg.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'red'</span>);  <span class=\"comment\">//定义好，之后开始上色</span></div><div class=\"line\">bg.addColorStop(<span class=\"number\">0.5</span>, <span class=\"string\">'blue'</span>);</div><div class=\"line\">bg.addColorStop(<span class=\"number\">1</span>, <span class=\"string\">'rgba(0, 0, 0, 0.6)'</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bg = ctx.createLinearGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>);     <span class=\"comment\">//线性渐变</span></div><div class=\"line\">bg.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'black'</span>);</div><div class=\"line\">bg.addColorStop(<span class=\"number\">0.6</span>, <span class=\"string\">'#fff'</span>);</div><div class=\"line\">ctx.fillStyle = bg;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1G3_XMVXXXXX4aXXXXXXXXXXX-125-119.png\" alt=\"\"></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bg1 = ctx.createRadialGradient(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>);    <span class=\"comment\">//径向渐变</span></div><div class=\"line\">bg1.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'#FF5F98'</span>);</div><div class=\"line\">bg1.addColorStop(<span class=\"number\">0.75</span>, <span class=\"string\">'#FF0188'</span>);</div><div class=\"line\">bg1.addColorStop(<span class=\"number\">1</span>, <span class=\"string\">'rgba(255,1,136,0)'</span>);</div><div class=\"line\">ctx.fillStyle = bg1;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>);</div></pre></td></tr></table></figure>\n<p>  效果如下图：</p>\n<p>  <img src=\"https://img.alicdn.com/tps/TB1.qW8MVXXXXbcaXXXXXXXXXXX-140-146.png\" alt=\"\"></p>\n<h1 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\">ctx.shadowOffsetX = <span class=\"number\">2</span>;     <span class=\"comment\">//X轴阴影距离，负值表示往上，正值表示往下</span></div><div class=\"line\">ctx.shadowOffsetY = <span class=\"number\">2</span>;     <span class=\"comment\">//Y轴阴影距离，负值表示往左，正值表示往右</span></div><div class=\"line\">ctx.shadowBlur = <span class=\"number\">2</span>;     <span class=\"comment\">//阴影的模糊程度</span></div><div class=\"line\">ctx.shadowColor = <span class=\"string\">\"rgba(0, 0, 0, 0.5)\"</span>;    <span class=\"comment\">//阴影颜色</span></div><div class=\"line\">ctx.font = <span class=\"string\">\"30px Times New Roman\"</span>;    <span class=\"comment\">//设置字体和字体大小</span></div><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"Black\"</span>;</div><div class=\"line\">ctx.fillText(<span class=\"string\">\"Sample String\"</span>, <span class=\"number\">15</span>, <span class=\"number\">30</span>);    <span class=\"comment\">//实体文字</span></div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.strokeText(<span class=\"string\">'Hello world'</span>, <span class=\"number\">15</span>, <span class=\"number\">100</span>);    <span class=\"comment\">//边框文字</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1HIvbMVXXXXcuaXXXXXXXXXXX-219-149.png\" alt=\"\"></p>\n<p>文字的属性出了上面的列出的以外，还有以下一些属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.font = <span class=\"string\">'20px Times New Roman'</span>;</div><div class=\"line\">ctx.textAlign = <span class=\"string\">'center'</span>;    <span class=\"comment\">//start, end, left, right or center</span></div><div class=\"line\">ctx.textBaseline = <span class=\"string\">'middle'</span>  <span class=\"comment\">//top, hanging, middle, alphabetic, ideographic, bottom</span></div><div class=\"line\">ctx.direction = <span class=\"string\">'inherit'</span>   <span class=\"comment\">//ltr, rtl, inherit</span></div></pre></td></tr></table></figure>\n<h1 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">img.src= <span class=\"string\">'./images/background.jpg'</span>;</div><div class=\"line\">ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);   <span class=\"comment\">//img为图像，(0, 0)为起始坐标</span></div></pre></td></tr></table></figure>\n<p>这里的img可以是一个img对象，也可以是一个img元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;img id=<span class=\"string\">\"img\"</span> src=<span class=\"string\">\"./images/background.jpg\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;</div><div class=\"line\">ctx.drawImage(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<p>另外，绘制图片的时候还可以对图片进行缩放，类似于css中的<code>background-size</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);   <span class=\"comment\">//w、h指定图片的宽高，则会同比例缩放。</span></div></pre></td></tr></table></figure>\n<h1 id=\"变形\"><a href=\"#变形\" class=\"headerlink\" title=\"变形\"></a>变形</h1><p>慢慢的从这里开始，就要开始涉及到复杂的绘制了。而开始复杂的绘制之前，我们得先了解一个概念：<code>canvas绘图的状态</code>。</p>\n<ul>\n<li><p>状态</p>\n<p>canvas 的状态就是当前画面应用的所有样式和变形的一个快照。另外，用来操作这个状态的有两个方法：<code>save()和restore()</code>。save()用来保存当前状态，restore()用来恢复刚才保存的状态。他们都可以多次调用。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'black'</span>;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">150</span>, <span class=\"number\">150</span>);</div><div class=\"line\">ctx.save();  <span class=\"comment\">//保存当前状态</span></div><div class=\"line\">ctx.fillStyle= <span class=\"string\">'#fff'</span>;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">45</span>, <span class=\"number\">45</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">ctx.restore();    <span class=\"comment\">//恢复到刚才保存的状态</span></div><div class=\"line\">ctx.fillRect(<span class=\"number\">70</span>, <span class=\"number\">70</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div></pre></td></tr></table></figure>\n<p>  效果如下图：</p>\n<p>  <img src=\"https://img.alicdn.com/tps/TB1CLzJMVXXXXa_aXXXXXXXXXXX-235-227.png\" alt=\"\"></p>\n<ul>\n<li><p>位移(translate)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.translate(x, y);   <span class=\"comment\">//更改canvas的原点</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i&lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">    ctx.save();   <span class=\"comment\">//使用save方法保存状态，让每次位移时都针对（0，0）移动。</span></div><div class=\"line\">  ctx.translate(<span class=\"number\">100</span>*i, <span class=\"number\">0</span>);</div><div class=\"line\">  ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">  ctx.restore();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1Oyf8MVXXXXX9XXXXXXXXXXXX-425-170.png\" alt=\"\"></p>\n</li>\n<li><p>旋转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.rotate(<span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>)     <span class=\"comment\">//参照原点顺时针旋转360度</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.translate(<span class=\"number\">75</span>,<span class=\"number\">75</span>);    <span class=\"comment\">//把原点移动到(75, 75);</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">6</span>; i++)&#123;       <span class=\"comment\">// 从里到外一共6圈</span></div><div class=\"line\">  ctx.save();</div><div class=\"line\">  ctx.fillStyle = <span class=\"string\">'rgb('</span>+(<span class=\"number\">50</span>*i)+<span class=\"string\">','</span>+(<span class=\"number\">255</span><span class=\"number\">-50</span>*i)+<span class=\"string\">',255)'</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j&lt;i*<span class=\"number\">6</span>; j++)&#123;     <span class=\"comment\">// 每一圈有i*6个圆点</span></div><div class=\"line\">    ctx.rotate(<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>/(i*<span class=\"number\">6</span>));</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.arc(<span class=\"number\">0</span>,i*<span class=\"number\">12.5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">true</span>);</div><div class=\"line\">    ctx.fill();</div><div class=\"line\">  &#125;</div><div class=\"line\">  ctx.restore();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  效果如下图：</p>\n<p>  <img src=\"https://img.alicdn.com/tps/TB1VMIaMVXXXXXjXXXXXXXXXXXX-183-181.png\" alt=\"\"></p>\n<ul>\n<li><p>缩放</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.scale(x, y);     <span class=\"comment\">//基于原点缩放，x、y是两个轴的缩放倍数</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.scale(<span class=\"number\">0.8</span>, <span class=\"number\">1.2</span>);</div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(<span class=\"number\">75</span>, <span class=\"number\">75</span>, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>);</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<p>本来绘制的是一个半径为60的圆形，但是经过缩放之后，实际效果如下：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1drnVMVXXXXbqXVXXXXXXXXXX-127-194.png\" alt=\"\"></p>\n</li>\n</ul>\n<h1 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h1><blockquote>\n<p>元素的位置移动，就形成了动画。</p>\n</blockquote>\n<p>一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。实现起来也很方便，js提供了两个方法：<code>setTimeout 和setInterval</code>都可以实现，但是一个有逼格的程序员实现动画是不会用这两个方法的，而是用<code>requestAnimationFrame</code>这个方法。有什么区别呢？下面简单做个比较。</p>\n<ul>\n<li><code>setInterval(myFun, 10);</code> 意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而10ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现<code>丢帧</code>的问题；反之，如果时间设置太长，就会出现<code>画面不流畅、视觉卡顿</code>的问题。</li>\n<li><code>requestAnimationFrame(myFun);</code> 如果我们这样写，又是什么意思呢？意思是根据一定的时间间隔，会自动执行myFun函数来进行绘制。这个”一定的时间间隔”就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。</li>\n</ul>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>这些API已经包含了大部分常用的了，结合requestAnimationFrame函数已经可以绘制很多酷炫的效果了。但是光看这些API很简单，但是想要在绘制游戏或者动画中用起来得心应手还需要看大量的实例，自己实践总结的。</p>\n<p>本文就到这里，感谢各位看官～</p>\n<hr>"},{"title":"优美的编辑器－Github Atom","date":"2016-05-13T02:11:00.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n周末闲着没事，逛论坛发现了一个新的编辑器，由github发布的Atom编辑器。瞬间被吸引了，所以就去尝试着折腾了一下，后来发现这个编辑器确实很不错，他的特点就是两个字：`优美！！！`\n\n下载地址，官方网站下载速度太慢太慢了。。。这里有个github的下载地址。要快很多  [下载编辑器点这里](https://github.com/atom/atom/releases/tag/v1.0.19)\n\n<!--more-->\n\n# Atom介绍\nGithub的员工Nathan Sobo在Atom的博客中提到：\"Sublime和TextMate十分方便，但是扩展性不足；另一方面，Emacs和 Vim扩展性很强却需要学习日程工作中很少用到的脚本语言。\"因此，他们希望找到一个平衡点，于是就有了Atom这个项目。\n\nAtom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。它支持各种编程语言的代码高亮(`HTML` / `CSS` / `Javascript` / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / `Markdown` 等等)。\n\n下面是优酷上Atom的宣传片，逼格好高的样子，`老奶奶都写会css...`:\n<iframe height=300 width=510 src=\"http://player.youku.com/embed/XMTI4NTgzNzY0OA==\" frameborder=0 allowfullscreen></iframe>\n\n我捣腾了这么久，说说自己的看法吧。作为一个一直使用sublime 编辑器的人来说，转用Atom是非常的简单，Atom和Sublime功能非常相似，很多快捷键都是一样的。虽然他们现有功能差不多，并且sublime更加轻巧，但是我觉得相比于sublime，Atom的优势也很明显，界面更加优美，功能强大，插件使用方便，可扩展性强等等。。。\n\n## 优美\nAtom装了expose这个插件之后，mac用户使用`shift＋command＋e`组合键可以得到意想不到的酷炫！！下面是截图为证，可以方便的看到每一个文件大概的内容，快速选择已经打开的文件。方便！！！优美！！！\n\n![screenshot](http://img4.tbcdn.cn/L1/461/1/165c46ce00a0d55151c8f92f0f1b32f2408caaa0)\n\n## 和git完美结合\nAtom 编辑器可以和 GIT 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。\n\n> 比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。\n\n编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。\n\n## 基于WEB技术构建\n和微软发布的Visual Studio Code编辑器一样，Atom 也是基于WEB技术（Chromium+Node.js）开发的，简单理解的话编辑器本身其实是一个跑在本地的网页，这足以让无数 WEB 工程师为之兴奋！用户可以用Javascript来编写编辑器插件，并且github大家都知道，他是Atom的强大后台支撑，这里有着大量的编程爱好者，相信Atom的插件会持续的增多，Atom也会变的越来越优秀。\n\n# Atom推荐插件\n安装插件跟sublime一样，可以在setting界面中，搜索安装，也可以快捷键`shift＋command＋p`跳出搜索输入框输入关键字进行安装。\n\n`atom-beautify`:美化代码，格式化代码的插件。\n\n`autocomplete-paths`:输入.或者/的时候，会自动提示路径和路径下的文件。非常好用！\n\n`autoprefixer`:css样式的兼容性添加。当写好自己的css之后，会自动添加类似-webkit-等前缀的css样式代码。\n\n`color-picker`:css中需要赋值颜色的时候，使用这个插件可以看到一个完整的取色器，实时的取色，改变。。。非常方便！\n\n`file-icons`:左边工程目录的每一个文件，如果有一个小图标表示就漂亮了，没错，就需要这个插件了。\n\n`git plus`：当然是为了更好的使用git了。\n\n`markdown-format，markdown-writer`：如果你不是Mac用户，并且十分喜欢使用markdown来写东西的话，那么你一定会爱上在Atom上写markdown的感觉~~\n\n`linter`: 自动提示你代码中不规范的地方，让你拥有更加规范的代码习惯。如果你想得到完整的信息提示，则推荐这个插件`linter-jshint`\n\n`minimap`:用过sublime text的同学一定知道右边那方便的缩略图，难道这么好用的工具Atom上会没有吗？不会！这个插件就会让你见到熟悉的缩略图, 而且功能更加强大！\n\n插件                           | 说明\n---------------------------- | ---------------------------------------------------------------------\n`minimap-codeglance`         | 放大镜的功能，这个插件就会让你的鼠标移动到缩略图上的时候放大显示那边部分的代码\n`minimap-find-and-replace`   | 当你想替换单词的时候你会想起`ctrl+D`，可以你知道全篇有多少你要替换的字符串吗？通过这个插件你就可以在缩略图上看到所有你选中的字符串\n`minimap-git-diff`           | 通过这个插件，每当你修改你的代码的时候你就会在缩略图上看到和之前git中的区别\n`minimap-highlight-selected` | 当你选中部分代码的时候，它就会高亮的出现在缩略图中\n`minimap-linter`             | 这个插件让你的缩略图显示的更加漂亮和完整\n\n`expose`:当你一次性打开多个文件的时候也许你会使用分屏来查看，安装了这个插件之后使用`shift＋command＋e`就可以分屏查看。截图上面已经出现过，美不美！！！\n\n`atom-material-ui`:这是一个`主题插件`,他有自带的一些动态效果，特别酷炫。话不多说，自己试试就知道。\n\n终于废了老半天时间来搞这个编辑器，不过每装一个插件就能感受其强大的时候，就觉得很值得，下面是我使用这个主题的截图，很漂亮吧？\n\n![screenshot](http://img1.tbcdn.cn/L1/461/1/f15c17095abedad0dc396aaf30e0a0c84d39bda3)\n\n# Atom快捷键\n其实Atom和sublime的跨界件非常相似，比如我常用的cmd+d,这里只列出一些常用的快捷键。\n\n`ctrl+shift+s` 保存所有打开的文件\n\n`cmd+\\` 显示或隐藏目录树\n\n`cmd+b` 在打开的文件之间切换\n\n`cmd+d` 快速查找选中的内容\n\n`cmd+right, ctrl+E` 移动到一行结束\n\n`cmd+left, ctrl+A` 移动到一行开始\n\n`cmd+K, cmd+U` 使当前字符大写\n\n`cmd+K, cmd+L` 使当前字符小写\n\n`ctrl+shift+K` 删除当前行\n\n`ctrl+shift+U` 调出切换编码选项\n\n`cmd+F` 在当前打开的页面中查找\n\n`cmd+shift+f` 在整个工程中查找\n\n`ctrl+space` 提示补全信息\n\n`ctrl-shift-M` Markdown预览（前提是装了markdown插件）\n\n如果有需要，大家去看这个链接吧，里面的快捷键总结非常的全面，[想看点这里](http://www.iplaysoft.com/item/atom-shortcuts)\n\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/atom-edit.md","raw":"---\ntitle: 优美的编辑器－Github Atom\ndate: 2016-05-13T10:11:00.000Z\ncategories: 工作\ntags:\n  - 编辑器\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n周末闲着没事，逛论坛发现了一个新的编辑器，由github发布的Atom编辑器。瞬间被吸引了，所以就去尝试着折腾了一下，后来发现这个编辑器确实很不错，他的特点就是两个字：`优美！！！`\n\n下载地址，官方网站下载速度太慢太慢了。。。这里有个github的下载地址。要快很多  [下载编辑器点这里](https://github.com/atom/atom/releases/tag/v1.0.19)\n\n<!--more-->\n\n# Atom介绍\nGithub的员工Nathan Sobo在Atom的博客中提到：\"Sublime和TextMate十分方便，但是扩展性不足；另一方面，Emacs和 Vim扩展性很强却需要学习日程工作中很少用到的脚本语言。\"因此，他们希望找到一个平衡点，于是就有了Atom这个项目。\n\nAtom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。它支持各种编程语言的代码高亮(`HTML` / `CSS` / `Javascript` / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / `Markdown` 等等)。\n\n下面是优酷上Atom的宣传片，逼格好高的样子，`老奶奶都写会css...`:\n<iframe height=300 width=510 src=\"http://player.youku.com/embed/XMTI4NTgzNzY0OA==\" frameborder=0 allowfullscreen></iframe>\n\n我捣腾了这么久，说说自己的看法吧。作为一个一直使用sublime 编辑器的人来说，转用Atom是非常的简单，Atom和Sublime功能非常相似，很多快捷键都是一样的。虽然他们现有功能差不多，并且sublime更加轻巧，但是我觉得相比于sublime，Atom的优势也很明显，界面更加优美，功能强大，插件使用方便，可扩展性强等等。。。\n\n## 优美\nAtom装了expose这个插件之后，mac用户使用`shift＋command＋e`组合键可以得到意想不到的酷炫！！下面是截图为证，可以方便的看到每一个文件大概的内容，快速选择已经打开的文件。方便！！！优美！！！\n\n![screenshot](http://img4.tbcdn.cn/L1/461/1/165c46ce00a0d55151c8f92f0f1b32f2408caaa0)\n\n## 和git完美结合\nAtom 编辑器可以和 GIT 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。\n\n> 比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。\n\n编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。\n\n## 基于WEB技术构建\n和微软发布的Visual Studio Code编辑器一样，Atom 也是基于WEB技术（Chromium+Node.js）开发的，简单理解的话编辑器本身其实是一个跑在本地的网页，这足以让无数 WEB 工程师为之兴奋！用户可以用Javascript来编写编辑器插件，并且github大家都知道，他是Atom的强大后台支撑，这里有着大量的编程爱好者，相信Atom的插件会持续的增多，Atom也会变的越来越优秀。\n\n# Atom推荐插件\n安装插件跟sublime一样，可以在setting界面中，搜索安装，也可以快捷键`shift＋command＋p`跳出搜索输入框输入关键字进行安装。\n\n`atom-beautify`:美化代码，格式化代码的插件。\n\n`autocomplete-paths`:输入.或者/的时候，会自动提示路径和路径下的文件。非常好用！\n\n`autoprefixer`:css样式的兼容性添加。当写好自己的css之后，会自动添加类似-webkit-等前缀的css样式代码。\n\n`color-picker`:css中需要赋值颜色的时候，使用这个插件可以看到一个完整的取色器，实时的取色，改变。。。非常方便！\n\n`file-icons`:左边工程目录的每一个文件，如果有一个小图标表示就漂亮了，没错，就需要这个插件了。\n\n`git plus`：当然是为了更好的使用git了。\n\n`markdown-format，markdown-writer`：如果你不是Mac用户，并且十分喜欢使用markdown来写东西的话，那么你一定会爱上在Atom上写markdown的感觉~~\n\n`linter`: 自动提示你代码中不规范的地方，让你拥有更加规范的代码习惯。如果你想得到完整的信息提示，则推荐这个插件`linter-jshint`\n\n`minimap`:用过sublime text的同学一定知道右边那方便的缩略图，难道这么好用的工具Atom上会没有吗？不会！这个插件就会让你见到熟悉的缩略图, 而且功能更加强大！\n\n插件                           | 说明\n---------------------------- | ---------------------------------------------------------------------\n`minimap-codeglance`         | 放大镜的功能，这个插件就会让你的鼠标移动到缩略图上的时候放大显示那边部分的代码\n`minimap-find-and-replace`   | 当你想替换单词的时候你会想起`ctrl+D`，可以你知道全篇有多少你要替换的字符串吗？通过这个插件你就可以在缩略图上看到所有你选中的字符串\n`minimap-git-diff`           | 通过这个插件，每当你修改你的代码的时候你就会在缩略图上看到和之前git中的区别\n`minimap-highlight-selected` | 当你选中部分代码的时候，它就会高亮的出现在缩略图中\n`minimap-linter`             | 这个插件让你的缩略图显示的更加漂亮和完整\n\n`expose`:当你一次性打开多个文件的时候也许你会使用分屏来查看，安装了这个插件之后使用`shift＋command＋e`就可以分屏查看。截图上面已经出现过，美不美！！！\n\n`atom-material-ui`:这是一个`主题插件`,他有自带的一些动态效果，特别酷炫。话不多说，自己试试就知道。\n\n终于废了老半天时间来搞这个编辑器，不过每装一个插件就能感受其强大的时候，就觉得很值得，下面是我使用这个主题的截图，很漂亮吧？\n\n![screenshot](http://img1.tbcdn.cn/L1/461/1/f15c17095abedad0dc396aaf30e0a0c84d39bda3)\n\n# Atom快捷键\n其实Atom和sublime的跨界件非常相似，比如我常用的cmd+d,这里只列出一些常用的快捷键。\n\n`ctrl+shift+s` 保存所有打开的文件\n\n`cmd+\\` 显示或隐藏目录树\n\n`cmd+b` 在打开的文件之间切换\n\n`cmd+d` 快速查找选中的内容\n\n`cmd+right, ctrl+E` 移动到一行结束\n\n`cmd+left, ctrl+A` 移动到一行开始\n\n`cmd+K, cmd+U` 使当前字符大写\n\n`cmd+K, cmd+L` 使当前字符小写\n\n`ctrl+shift+K` 删除当前行\n\n`ctrl+shift+U` 调出切换编码选项\n\n`cmd+F` 在当前打开的页面中查找\n\n`cmd+shift+f` 在整个工程中查找\n\n`ctrl+space` 提示补全信息\n\n`ctrl-shift-M` Markdown预览（前提是装了markdown插件）\n\n如果有需要，大家去看这个链接吧，里面的快捷键总结非常的全面，[想看点这里](http://www.iplaysoft.com/item/atom-shortcuts)\n\n\n\n--------------------------------------------------------------------------------\n","slug":"atom-edit","published":1,"updated":"2016-10-11T16:28:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdae0005u13gnnhy0gmt","content":"<hr>\n<p>周末闲着没事，逛论坛发现了一个新的编辑器，由github发布的Atom编辑器。瞬间被吸引了，所以就去尝试着折腾了一下，后来发现这个编辑器确实很不错，他的特点就是两个字：<code>优美！！！</code></p>\n<p>下载地址，官方网站下载速度太慢太慢了。。。这里有个github的下载地址。要快很多  <a href=\"https://github.com/atom/atom/releases/tag/v1.0.19\" target=\"_blank\" rel=\"external\">下载编辑器点这里</a></p>\n<a id=\"more\"></a>\n<h1 id=\"Atom介绍\"><a href=\"#Atom介绍\" class=\"headerlink\" title=\"Atom介绍\"></a>Atom介绍</h1><p>Github的员工Nathan Sobo在Atom的博客中提到：”Sublime和TextMate十分方便，但是扩展性不足；另一方面，Emacs和 Vim扩展性很强却需要学习日程工作中很少用到的脚本语言。”因此，他们希望找到一个平衡点，于是就有了Atom这个项目。</p>\n<p>Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。它支持各种编程语言的代码高亮(<code>HTML</code> / <code>CSS</code> / <code>Javascript</code> / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / <code>Markdown</code> 等等)。</p>\n<p>下面是优酷上Atom的宣传片，逼格好高的样子，<code>老奶奶都写会css...</code>:</p>\n<iframe height=\"300\" width=\"510\" src=\"http://player.youku.com/embed/XMTI4NTgzNzY0OA==\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>我捣腾了这么久，说说自己的看法吧。作为一个一直使用sublime 编辑器的人来说，转用Atom是非常的简单，Atom和Sublime功能非常相似，很多快捷键都是一样的。虽然他们现有功能差不多，并且sublime更加轻巧，但是我觉得相比于sublime，Atom的优势也很明显，界面更加优美，功能强大，插件使用方便，可扩展性强等等。。。</p>\n<h2 id=\"优美\"><a href=\"#优美\" class=\"headerlink\" title=\"优美\"></a>优美</h2><p>Atom装了expose这个插件之后，mac用户使用<code>shift＋command＋e</code>组合键可以得到意想不到的酷炫！！下面是截图为证，可以方便的看到每一个文件大概的内容，快速选择已经打开的文件。方便！！！优美！！！</p>\n<p><img src=\"http://img4.tbcdn.cn/L1/461/1/165c46ce00a0d55151c8f92f0f1b32f2408caaa0\" alt=\"screenshot\"></p>\n<h2 id=\"和git完美结合\"><a href=\"#和git完美结合\" class=\"headerlink\" title=\"和git完美结合\"></a>和git完美结合</h2><p>Atom 编辑器可以和 GIT 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。</p>\n<blockquote>\n<p>比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。</p>\n</blockquote>\n<p>编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。</p>\n<h2 id=\"基于WEB技术构建\"><a href=\"#基于WEB技术构建\" class=\"headerlink\" title=\"基于WEB技术构建\"></a>基于WEB技术构建</h2><p>和微软发布的Visual Studio Code编辑器一样，Atom 也是基于WEB技术（Chromium+Node.js）开发的，简单理解的话编辑器本身其实是一个跑在本地的网页，这足以让无数 WEB 工程师为之兴奋！用户可以用Javascript来编写编辑器插件，并且github大家都知道，他是Atom的强大后台支撑，这里有着大量的编程爱好者，相信Atom的插件会持续的增多，Atom也会变的越来越优秀。</p>\n<h1 id=\"Atom推荐插件\"><a href=\"#Atom推荐插件\" class=\"headerlink\" title=\"Atom推荐插件\"></a>Atom推荐插件</h1><p>安装插件跟sublime一样，可以在setting界面中，搜索安装，也可以快捷键<code>shift＋command＋p</code>跳出搜索输入框输入关键字进行安装。</p>\n<p><code>atom-beautify</code>:美化代码，格式化代码的插件。</p>\n<p><code>autocomplete-paths</code>:输入.或者/的时候，会自动提示路径和路径下的文件。非常好用！</p>\n<p><code>autoprefixer</code>:css样式的兼容性添加。当写好自己的css之后，会自动添加类似-webkit-等前缀的css样式代码。</p>\n<p><code>color-picker</code>:css中需要赋值颜色的时候，使用这个插件可以看到一个完整的取色器，实时的取色，改变。。。非常方便！</p>\n<p><code>file-icons</code>:左边工程目录的每一个文件，如果有一个小图标表示就漂亮了，没错，就需要这个插件了。</p>\n<p><code>git plus</code>：当然是为了更好的使用git了。</p>\n<p><code>markdown-format，markdown-writer</code>：如果你不是Mac用户，并且十分喜欢使用markdown来写东西的话，那么你一定会爱上在Atom上写markdown的感觉~~</p>\n<p><code>linter</code>: 自动提示你代码中不规范的地方，让你拥有更加规范的代码习惯。如果你想得到完整的信息提示，则推荐这个插件<code>linter-jshint</code></p>\n<p><code>minimap</code>:用过sublime text的同学一定知道右边那方便的缩略图，难道这么好用的工具Atom上会没有吗？不会！这个插件就会让你见到熟悉的缩略图, 而且功能更加强大！</p>\n<table>\n<thead>\n<tr>\n<th>插件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>minimap-codeglance</code></td>\n<td>放大镜的功能，这个插件就会让你的鼠标移动到缩略图上的时候放大显示那边部分的代码</td>\n</tr>\n<tr>\n<td><code>minimap-find-and-replace</code></td>\n<td>当你想替换单词的时候你会想起<code>ctrl+D</code>，可以你知道全篇有多少你要替换的字符串吗？通过这个插件你就可以在缩略图上看到所有你选中的字符串</td>\n</tr>\n<tr>\n<td><code>minimap-git-diff</code></td>\n<td>通过这个插件，每当你修改你的代码的时候你就会在缩略图上看到和之前git中的区别</td>\n</tr>\n<tr>\n<td><code>minimap-highlight-selected</code></td>\n<td>当你选中部分代码的时候，它就会高亮的出现在缩略图中</td>\n</tr>\n<tr>\n<td><code>minimap-linter</code></td>\n<td>这个插件让你的缩略图显示的更加漂亮和完整</td>\n</tr>\n</tbody>\n</table>\n<p><code>expose</code>:当你一次性打开多个文件的时候也许你会使用分屏来查看，安装了这个插件之后使用<code>shift＋command＋e</code>就可以分屏查看。截图上面已经出现过，美不美！！！</p>\n<p><code>atom-material-ui</code>:这是一个<code>主题插件</code>,他有自带的一些动态效果，特别酷炫。话不多说，自己试试就知道。</p>\n<p>终于废了老半天时间来搞这个编辑器，不过每装一个插件就能感受其强大的时候，就觉得很值得，下面是我使用这个主题的截图，很漂亮吧？</p>\n<p><img src=\"http://img1.tbcdn.cn/L1/461/1/f15c17095abedad0dc396aaf30e0a0c84d39bda3\" alt=\"screenshot\"></p>\n<h1 id=\"Atom快捷键\"><a href=\"#Atom快捷键\" class=\"headerlink\" title=\"Atom快捷键\"></a>Atom快捷键</h1><p>其实Atom和sublime的跨界件非常相似，比如我常用的cmd+d,这里只列出一些常用的快捷键。</p>\n<p><code>ctrl+shift+s</code> 保存所有打开的文件</p>\n<p><code>cmd+\\</code> 显示或隐藏目录树</p>\n<p><code>cmd+b</code> 在打开的文件之间切换</p>\n<p><code>cmd+d</code> 快速查找选中的内容</p>\n<p><code>cmd+right, ctrl+E</code> 移动到一行结束</p>\n<p><code>cmd+left, ctrl+A</code> 移动到一行开始</p>\n<p><code>cmd+K, cmd+U</code> 使当前字符大写</p>\n<p><code>cmd+K, cmd+L</code> 使当前字符小写</p>\n<p><code>ctrl+shift+K</code> 删除当前行</p>\n<p><code>ctrl+shift+U</code> 调出切换编码选项</p>\n<p><code>cmd+F</code> 在当前打开的页面中查找</p>\n<p><code>cmd+shift+f</code> 在整个工程中查找</p>\n<p><code>ctrl+space</code> 提示补全信息</p>\n<p><code>ctrl-shift-M</code> Markdown预览（前提是装了markdown插件）</p>\n<p>如果有需要，大家去看这个链接吧，里面的快捷键总结非常的全面，<a href=\"http://www.iplaysoft.com/item/atom-shortcuts\" target=\"_blank\" rel=\"external\">想看点这里</a></p>\n<hr>\n","excerpt":"<hr>\n<p>周末闲着没事，逛论坛发现了一个新的编辑器，由github发布的Atom编辑器。瞬间被吸引了，所以就去尝试着折腾了一下，后来发现这个编辑器确实很不错，他的特点就是两个字：<code>优美！！！</code></p>\n<p>下载地址，官方网站下载速度太慢太慢了。。。这里有个github的下载地址。要快很多  <a href=\"https://github.com/atom/atom/releases/tag/v1.0.19\">下载编辑器点这里</a></p>","more":"<h1 id=\"Atom介绍\"><a href=\"#Atom介绍\" class=\"headerlink\" title=\"Atom介绍\"></a>Atom介绍</h1><p>Github的员工Nathan Sobo在Atom的博客中提到：”Sublime和TextMate十分方便，但是扩展性不足；另一方面，Emacs和 Vim扩展性很强却需要学习日程工作中很少用到的脚本语言。”因此，他们希望找到一个平衡点，于是就有了Atom这个项目。</p>\n<p>Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。它支持各种编程语言的代码高亮(<code>HTML</code> / <code>CSS</code> / <code>Javascript</code> / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / <code>Markdown</code> 等等)。</p>\n<p>下面是优酷上Atom的宣传片，逼格好高的样子，<code>老奶奶都写会css...</code>:</p>\n<iframe height=300 width=510 src=\"http://player.youku.com/embed/XMTI4NTgzNzY0OA==\" frameborder=0 allowfullscreen></iframe>\n\n<p>我捣腾了这么久，说说自己的看法吧。作为一个一直使用sublime 编辑器的人来说，转用Atom是非常的简单，Atom和Sublime功能非常相似，很多快捷键都是一样的。虽然他们现有功能差不多，并且sublime更加轻巧，但是我觉得相比于sublime，Atom的优势也很明显，界面更加优美，功能强大，插件使用方便，可扩展性强等等。。。</p>\n<h2 id=\"优美\"><a href=\"#优美\" class=\"headerlink\" title=\"优美\"></a>优美</h2><p>Atom装了expose这个插件之后，mac用户使用<code>shift＋command＋e</code>组合键可以得到意想不到的酷炫！！下面是截图为证，可以方便的看到每一个文件大概的内容，快速选择已经打开的文件。方便！！！优美！！！</p>\n<p><img src=\"http://img4.tbcdn.cn/L1/461/1/165c46ce00a0d55151c8f92f0f1b32f2408caaa0\" alt=\"screenshot\"></p>\n<h2 id=\"和git完美结合\"><a href=\"#和git完美结合\" class=\"headerlink\" title=\"和git完美结合\"></a>和git完美结合</h2><p>Atom 编辑器可以和 GIT 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。</p>\n<blockquote>\n<p>比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。</p>\n</blockquote>\n<p>编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。</p>\n<h2 id=\"基于WEB技术构建\"><a href=\"#基于WEB技术构建\" class=\"headerlink\" title=\"基于WEB技术构建\"></a>基于WEB技术构建</h2><p>和微软发布的Visual Studio Code编辑器一样，Atom 也是基于WEB技术（Chromium+Node.js）开发的，简单理解的话编辑器本身其实是一个跑在本地的网页，这足以让无数 WEB 工程师为之兴奋！用户可以用Javascript来编写编辑器插件，并且github大家都知道，他是Atom的强大后台支撑，这里有着大量的编程爱好者，相信Atom的插件会持续的增多，Atom也会变的越来越优秀。</p>\n<h1 id=\"Atom推荐插件\"><a href=\"#Atom推荐插件\" class=\"headerlink\" title=\"Atom推荐插件\"></a>Atom推荐插件</h1><p>安装插件跟sublime一样，可以在setting界面中，搜索安装，也可以快捷键<code>shift＋command＋p</code>跳出搜索输入框输入关键字进行安装。</p>\n<p><code>atom-beautify</code>:美化代码，格式化代码的插件。</p>\n<p><code>autocomplete-paths</code>:输入.或者/的时候，会自动提示路径和路径下的文件。非常好用！</p>\n<p><code>autoprefixer</code>:css样式的兼容性添加。当写好自己的css之后，会自动添加类似-webkit-等前缀的css样式代码。</p>\n<p><code>color-picker</code>:css中需要赋值颜色的时候，使用这个插件可以看到一个完整的取色器，实时的取色，改变。。。非常方便！</p>\n<p><code>file-icons</code>:左边工程目录的每一个文件，如果有一个小图标表示就漂亮了，没错，就需要这个插件了。</p>\n<p><code>git plus</code>：当然是为了更好的使用git了。</p>\n<p><code>markdown-format，markdown-writer</code>：如果你不是Mac用户，并且十分喜欢使用markdown来写东西的话，那么你一定会爱上在Atom上写markdown的感觉~~</p>\n<p><code>linter</code>: 自动提示你代码中不规范的地方，让你拥有更加规范的代码习惯。如果你想得到完整的信息提示，则推荐这个插件<code>linter-jshint</code></p>\n<p><code>minimap</code>:用过sublime text的同学一定知道右边那方便的缩略图，难道这么好用的工具Atom上会没有吗？不会！这个插件就会让你见到熟悉的缩略图, 而且功能更加强大！</p>\n<table>\n<thead>\n<tr>\n<th>插件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>minimap-codeglance</code></td>\n<td>放大镜的功能，这个插件就会让你的鼠标移动到缩略图上的时候放大显示那边部分的代码</td>\n</tr>\n<tr>\n<td><code>minimap-find-and-replace</code></td>\n<td>当你想替换单词的时候你会想起<code>ctrl+D</code>，可以你知道全篇有多少你要替换的字符串吗？通过这个插件你就可以在缩略图上看到所有你选中的字符串</td>\n</tr>\n<tr>\n<td><code>minimap-git-diff</code></td>\n<td>通过这个插件，每当你修改你的代码的时候你就会在缩略图上看到和之前git中的区别</td>\n</tr>\n<tr>\n<td><code>minimap-highlight-selected</code></td>\n<td>当你选中部分代码的时候，它就会高亮的出现在缩略图中</td>\n</tr>\n<tr>\n<td><code>minimap-linter</code></td>\n<td>这个插件让你的缩略图显示的更加漂亮和完整</td>\n</tr>\n</tbody>\n</table>\n<p><code>expose</code>:当你一次性打开多个文件的时候也许你会使用分屏来查看，安装了这个插件之后使用<code>shift＋command＋e</code>就可以分屏查看。截图上面已经出现过，美不美！！！</p>\n<p><code>atom-material-ui</code>:这是一个<code>主题插件</code>,他有自带的一些动态效果，特别酷炫。话不多说，自己试试就知道。</p>\n<p>终于废了老半天时间来搞这个编辑器，不过每装一个插件就能感受其强大的时候，就觉得很值得，下面是我使用这个主题的截图，很漂亮吧？</p>\n<p><img src=\"http://img1.tbcdn.cn/L1/461/1/f15c17095abedad0dc396aaf30e0a0c84d39bda3\" alt=\"screenshot\"></p>\n<h1 id=\"Atom快捷键\"><a href=\"#Atom快捷键\" class=\"headerlink\" title=\"Atom快捷键\"></a>Atom快捷键</h1><p>其实Atom和sublime的跨界件非常相似，比如我常用的cmd+d,这里只列出一些常用的快捷键。</p>\n<p><code>ctrl+shift+s</code> 保存所有打开的文件</p>\n<p><code>cmd+\\</code> 显示或隐藏目录树</p>\n<p><code>cmd+b</code> 在打开的文件之间切换</p>\n<p><code>cmd+d</code> 快速查找选中的内容</p>\n<p><code>cmd+right, ctrl+E</code> 移动到一行结束</p>\n<p><code>cmd+left, ctrl+A</code> 移动到一行开始</p>\n<p><code>cmd+K, cmd+U</code> 使当前字符大写</p>\n<p><code>cmd+K, cmd+L</code> 使当前字符小写</p>\n<p><code>ctrl+shift+K</code> 删除当前行</p>\n<p><code>ctrl+shift+U</code> 调出切换编码选项</p>\n<p><code>cmd+F</code> 在当前打开的页面中查找</p>\n<p><code>cmd+shift+f</code> 在整个工程中查找</p>\n<p><code>ctrl+space</code> 提示补全信息</p>\n<p><code>ctrl-shift-M</code> Markdown预览（前提是装了markdown插件）</p>\n<p>如果有需要，大家去看这个链接吧，里面的快捷键总结非常的全面，<a href=\"http://www.iplaysoft.com/item/atom-shortcuts\">想看点这里</a></p>\n<hr>"},{"title":"总结js常用函数和常用技巧（持续更新）","date":"2016-10-11T15:16:27.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n学习和工作的过程中总结的干货，包括常用函数、常用js技巧、常用正则表达式、git笔记等。为刚接触前端的童鞋们提供一个简单的查询的途径，也以此来缅怀我的前端学习之路。\nPS：此文档，我会持续更新。\n<!--more-->\n\n# Ajax请求\n## jquery ajax函数\n我自己封装了一个ajax的函数，代码如下：\n\n```js\nvar Ajax = function(url, type success, error) {\n    $.ajax({\n        url: url,\n        type: type,\n        dataType: 'json',\n        timeout: 10000,\n        success: function(d) {\n            var data = d.data;\n            success && success(data);\n        },\n        error: function(e) {\n            error && error(e);\n        }\n    });\n};\n// 使用方法：\nAjax('/data.json', 'get', function(data) {\n    console.log(data);\n});\n```\n\n## jsonp方式\n有时候我们为了跨域，要使用jsonp的方法，我也封装了一个函数：\n\n```js\nfunction jsonp(config) {\n    var options = config || {};   // 需要配置url, success, time, fail四个属性\n    var callbackName = ('jsonp_' + Math.random()).replace(\".\", \"\");\n    var oHead = document.getElementsByTagName('head')[0];\n    var oScript = document.createElement('script');\n    oHead.appendChild(oScript);\n    window[callbackName] = function(json) {  //创建jsonp回调函数\n        oHead.removeChild(oScript);\n        clearTimeout(oScript.timer);\n        window[callbackName] = null;\n        options.success && options.success(json);   //先删除script标签，实际上执行的是success函数\n    };\n    oScript.src = options.url + '?' + callbackName;    //发送请求\n    if (options.time) {  //设置超时处理\n        oScript.timer = setTimeout(function () {\n            window[callbackName] = null;\n            oHead.removeChild(oScript);\n            options.fail && options.fail({ message: \"超时\" });\n        }, options.time);\n    }\n};\n// 使用方法：\njsonp({\n    url: '/b.com/b.json',\n    success: function(d){\n        //数据处理\n    },\n    time: 5000,\n    fail: function(){\n        //错误处理\n    }       \n});\n```\n\n# 常用正则验证表达式\n## 手机号验证\n\n```js\nvar validate = function(num) {\n    var exp = /^1[3-9]\\d{9}$/;\n    return exp.test(num);\n};\n```\n\n## 身份证号验证\n\n```js\nvar exp = /^[1-9]{1}[0-9]{14}$|^[1-9]{1}[0-9]{16}([0-9]|[xX])$/;\n```\n\n## ip验证\n\n```js\nvar exp = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/;\n```\n\n# 常用js函数\n## 返回顶部\n\n```js\n$(window).scroll(function() {\n    var a = $(window).scrollTop();\n    if(a > 100) {\n        $('.go-top').fadeIn();\n    }else {\n        $('.go-top').fadeOut();\n    }\n});\n$(\".go-top\").click(function(){\n    $(\"html,body\").animate({scrollTop:\"0px\"},'600');\n});\n```\n\n## 阻止冒泡\n\n```js\nfunction stopBubble(e){\n    e = e || window.event;  \n    if(e.stopPropagation){\n        e.stopPropagation();  //W3C阻止冒泡方法  \n    }else {  \n        e.cancelBubble = true; //IE阻止冒泡方法  \n    }  \n}\n```\n\n## 全部替换replaceAll\n\n```js\nvar replaceAll = function(bigStr, str1, str2) {  //把bigStr中的所有str1替换为str2\n    var reg = new RegExp(str1, 'gm');\n    return bigStr.replace(reg, str2);\n}\n```\n\n## 获取浏览器url中的参数值\n\n```js\nvar getURLParam = function(name) {\n    return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)', \"ig\").exec(location.search) || [, \"\"])[1].replace(/\\+/g, '%20')) || null;\n};\n```\n\n## 深度拷贝对象\n\n```js\nfunction cloneObj(obj) {\n    var o = obj.constructor == Object ? new obj.constructor() : new obj.constructor(obj.valueOf());\n    for(var key in obj){\n        if(o[key] != obj[key] ){\n            if(typeof(obj[key]) == 'object' ){\n                o[key] = mods.cloneObj(obj[key]);\n            }else{\n                o[key] = obj[key];\n            }\n        }\n    }\n    return o;\n}\n```\n\n## 数组去重\n\n```js\nvar unique = function(arr) {\n    var result = [], json = {};\n    for (var i = 0, len = arr.length; i < len; i++){\n        if (!json[arr[i]]) {\n            json[arr[i]] = 1;\n            result.push(arr[i]);  //返回没被删除的元素\n        }\n    }\n    return result;\n};\n```\n\n## 判断数组元素是否重复\n\n```js\nvar isRepeat = function(arr) {  //arr是否有重复元素\n    var hash = {};\n    for (var i in arr) {\n        if (hash[arr[i]]) return true;\n        hash[arr[i]] = true;\n    }\n    return false;\n};\n```\n\n## 生成随机数\n\n```js\nfunction randombetween(min, max){\n    return min + (Math.random() * (max-min +1));\n}\n```\n\n## 操作cookie\n\n```js\nown.setCookie = function(cname, cvalue, exdays){\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = 'expires='+d.toUTCString();\n    document.cookie = cname + '=' + cvalue + '; ' + expires;\n};\nown.getCookie = function(cname) {\n    var name = cname + '=';\n    var ca = document.cookie.split(';');\n    for(var i=0; i< ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') c = c.substring(1);\n        if (c.indexOf(name) != -1) return c.substring(name.length, c.length);\n    }\n    return '';\n};\n```\n\n# 知识技巧总结\n## 数据类型\nunderfined、null、0、false、NaN、空字符串。他们的逻辑非结果均为true。\n\n## 闭包格式\n好处：避免命名冲突（全局变量污染）。\n\n```js\n(function(a, b) {\n    console.log(a+b);  //30\n})(10, 20);\n```\n\n## 截取和清空数组\n\n```js\nvar arr = [12, 222, 44, 88];\narr.length = 2;   //截取，arr = [12, 222];  \narr.length = 0;   //清空，arr will be equal to [].\n```\n\n## 获取数组的最大最小值\n\n```js\nvar numbers = [5, 45822, 120, -215];\nvar maxInNumbers = Math.max.apply(Math, numbers);   //45822\nvar minInNumbers = Math.min.apply(Math, numbers);   //-215\n```\n\n## 浮点数计算问题\n\n```js\n0.1 + 0.2 == 0.3   //false\n```\n\n为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示。可以通过使用`toFixed()`来解决这个问题。\n\n## 数组排序sort函数\n\n```js\nvar arr = [1, 5, 6, 3];    //数字数组\narr.sort(function(a, b) {\n    return a - b;   //从小到大排\n    return b - a;   //从大到小排\n    return Math.random() - 0.5;   //数组洗牌\n});\n```\n\n```js\nvar arr = [{   //对象数组\n    num: 1,\n    text: 'num1'\n}, {\n    num: 5,\n    text: 'num2'\n}, {\n    num: 6,\n    text: 'num3'\n}, {\n    num: 3,\n    text: 'num4'\n}];   \narr.sort(function(a, b) {\n    return a.num - b.num;   //从小到大排\n    return b.num - a.num;   //从大到小排\n});\n```\n\n## 对象和字符串的转换\n\n```js\nvar obj = {a: 'aaa', b: 'bbb'};\nvar objStr = JSON.stringify(obj);    // \"{\"a\":\"aaa\",\"b\":\"bbb\"}\"\nvar newObj = JSON.parse(objStr);     // {a: \"aaa\", b: \"bbb\"}\n```\n\n# git笔记\n## git使用之前的配置\n\n```js\n1.git config --global user.email xxx@163.com\n2.git config --global user.name xxx\n3.ssh-keygen -t rsa -C xxx@163.com(邮箱地址)      // 生成ssh\n4.找到.ssh文件夹打开，使用cat id_rsa.pub    //打开公钥ssh串\n5.登陆github，settings － SSH keys  － add ssh keys （把上面的内容全部添加进去即可）\n```\n\n`说明：然后这个邮箱（xxxxx@gmail.com）对应的账号在github上就有权限对仓库进行操作了。可以尽情的进行下面的git命令了。`\n\n## git常用命令\n\n```js\n1、git config user.name  /  user.email     //查看当前git的用户名称、邮箱\n2、git clone https://github.com/jarson7426/javascript.git  project  //clone仓库到本地。\n3、修改本地代码，提交到分支:  git add file   /   git commit -m “新增文件”\n4、把本地库推送到远程库:  git push origin master\n5、查看提交日志：git log -5\n6、返回某一个版本：git reset --hard 123\n7、分支：git branch / git checkout name  / git checkout -b dev\n8、合并name分支到当前分支：git merge name   /   git pull origin\n9、删除本地分支：git branch -D name\n10、删除远程分支： git push origin  :daily/x.x.x\n11、git checkout -b mydev origin/daily/1.0.0    //把远程daily分支映射到本地mydev分支进行开发\n12、合并远程分支到当前分支 git pull origin daily/1.1.1\n13、发布到线上：\n    git tag publish/0.1.5\n    git push origin publish/0.1.5:publish/0.1.5\n14、线上代码覆盖到本地：\n    git checkout --theirs build/scripts/ddos\n    git checkout --theirs src/app/ddos\n```\n\n# 结语\n\n希望本文总结的内容能给各位看官带来焕然一新的感觉。另外，如果你们有什么值得推荐的js技巧，欢迎在评论中补充，我可以收纳在本文中。\n\nPS：此文档会持续新增内容。\n\n--------------------------------------------------------------------------------\n","source":"_posts/com-func-skill.md","raw":"---\ntitle: 总结js常用函数和常用技巧（持续更新）\ndate: 2016-10-11T23:16:27.000Z\ncategories: 工作\ntags:\n  - javascript\n  - 干货总结\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n学习和工作的过程中总结的干货，包括常用函数、常用js技巧、常用正则表达式、git笔记等。为刚接触前端的童鞋们提供一个简单的查询的途径，也以此来缅怀我的前端学习之路。\nPS：此文档，我会持续更新。\n<!--more-->\n\n# Ajax请求\n## jquery ajax函数\n我自己封装了一个ajax的函数，代码如下：\n\n```js\nvar Ajax = function(url, type success, error) {\n    $.ajax({\n        url: url,\n        type: type,\n        dataType: 'json',\n        timeout: 10000,\n        success: function(d) {\n            var data = d.data;\n            success && success(data);\n        },\n        error: function(e) {\n            error && error(e);\n        }\n    });\n};\n// 使用方法：\nAjax('/data.json', 'get', function(data) {\n    console.log(data);\n});\n```\n\n## jsonp方式\n有时候我们为了跨域，要使用jsonp的方法，我也封装了一个函数：\n\n```js\nfunction jsonp(config) {\n    var options = config || {};   // 需要配置url, success, time, fail四个属性\n    var callbackName = ('jsonp_' + Math.random()).replace(\".\", \"\");\n    var oHead = document.getElementsByTagName('head')[0];\n    var oScript = document.createElement('script');\n    oHead.appendChild(oScript);\n    window[callbackName] = function(json) {  //创建jsonp回调函数\n        oHead.removeChild(oScript);\n        clearTimeout(oScript.timer);\n        window[callbackName] = null;\n        options.success && options.success(json);   //先删除script标签，实际上执行的是success函数\n    };\n    oScript.src = options.url + '?' + callbackName;    //发送请求\n    if (options.time) {  //设置超时处理\n        oScript.timer = setTimeout(function () {\n            window[callbackName] = null;\n            oHead.removeChild(oScript);\n            options.fail && options.fail({ message: \"超时\" });\n        }, options.time);\n    }\n};\n// 使用方法：\njsonp({\n    url: '/b.com/b.json',\n    success: function(d){\n        //数据处理\n    },\n    time: 5000,\n    fail: function(){\n        //错误处理\n    }       \n});\n```\n\n# 常用正则验证表达式\n## 手机号验证\n\n```js\nvar validate = function(num) {\n    var exp = /^1[3-9]\\d{9}$/;\n    return exp.test(num);\n};\n```\n\n## 身份证号验证\n\n```js\nvar exp = /^[1-9]{1}[0-9]{14}$|^[1-9]{1}[0-9]{16}([0-9]|[xX])$/;\n```\n\n## ip验证\n\n```js\nvar exp = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/;\n```\n\n# 常用js函数\n## 返回顶部\n\n```js\n$(window).scroll(function() {\n    var a = $(window).scrollTop();\n    if(a > 100) {\n        $('.go-top').fadeIn();\n    }else {\n        $('.go-top').fadeOut();\n    }\n});\n$(\".go-top\").click(function(){\n    $(\"html,body\").animate({scrollTop:\"0px\"},'600');\n});\n```\n\n## 阻止冒泡\n\n```js\nfunction stopBubble(e){\n    e = e || window.event;  \n    if(e.stopPropagation){\n        e.stopPropagation();  //W3C阻止冒泡方法  \n    }else {  \n        e.cancelBubble = true; //IE阻止冒泡方法  \n    }  \n}\n```\n\n## 全部替换replaceAll\n\n```js\nvar replaceAll = function(bigStr, str1, str2) {  //把bigStr中的所有str1替换为str2\n    var reg = new RegExp(str1, 'gm');\n    return bigStr.replace(reg, str2);\n}\n```\n\n## 获取浏览器url中的参数值\n\n```js\nvar getURLParam = function(name) {\n    return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)', \"ig\").exec(location.search) || [, \"\"])[1].replace(/\\+/g, '%20')) || null;\n};\n```\n\n## 深度拷贝对象\n\n```js\nfunction cloneObj(obj) {\n    var o = obj.constructor == Object ? new obj.constructor() : new obj.constructor(obj.valueOf());\n    for(var key in obj){\n        if(o[key] != obj[key] ){\n            if(typeof(obj[key]) == 'object' ){\n                o[key] = mods.cloneObj(obj[key]);\n            }else{\n                o[key] = obj[key];\n            }\n        }\n    }\n    return o;\n}\n```\n\n## 数组去重\n\n```js\nvar unique = function(arr) {\n    var result = [], json = {};\n    for (var i = 0, len = arr.length; i < len; i++){\n        if (!json[arr[i]]) {\n            json[arr[i]] = 1;\n            result.push(arr[i]);  //返回没被删除的元素\n        }\n    }\n    return result;\n};\n```\n\n## 判断数组元素是否重复\n\n```js\nvar isRepeat = function(arr) {  //arr是否有重复元素\n    var hash = {};\n    for (var i in arr) {\n        if (hash[arr[i]]) return true;\n        hash[arr[i]] = true;\n    }\n    return false;\n};\n```\n\n## 生成随机数\n\n```js\nfunction randombetween(min, max){\n    return min + (Math.random() * (max-min +1));\n}\n```\n\n## 操作cookie\n\n```js\nown.setCookie = function(cname, cvalue, exdays){\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = 'expires='+d.toUTCString();\n    document.cookie = cname + '=' + cvalue + '; ' + expires;\n};\nown.getCookie = function(cname) {\n    var name = cname + '=';\n    var ca = document.cookie.split(';');\n    for(var i=0; i< ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') c = c.substring(1);\n        if (c.indexOf(name) != -1) return c.substring(name.length, c.length);\n    }\n    return '';\n};\n```\n\n# 知识技巧总结\n## 数据类型\nunderfined、null、0、false、NaN、空字符串。他们的逻辑非结果均为true。\n\n## 闭包格式\n好处：避免命名冲突（全局变量污染）。\n\n```js\n(function(a, b) {\n    console.log(a+b);  //30\n})(10, 20);\n```\n\n## 截取和清空数组\n\n```js\nvar arr = [12, 222, 44, 88];\narr.length = 2;   //截取，arr = [12, 222];  \narr.length = 0;   //清空，arr will be equal to [].\n```\n\n## 获取数组的最大最小值\n\n```js\nvar numbers = [5, 45822, 120, -215];\nvar maxInNumbers = Math.max.apply(Math, numbers);   //45822\nvar minInNumbers = Math.min.apply(Math, numbers);   //-215\n```\n\n## 浮点数计算问题\n\n```js\n0.1 + 0.2 == 0.3   //false\n```\n\n为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示。可以通过使用`toFixed()`来解决这个问题。\n\n## 数组排序sort函数\n\n```js\nvar arr = [1, 5, 6, 3];    //数字数组\narr.sort(function(a, b) {\n    return a - b;   //从小到大排\n    return b - a;   //从大到小排\n    return Math.random() - 0.5;   //数组洗牌\n});\n```\n\n```js\nvar arr = [{   //对象数组\n    num: 1,\n    text: 'num1'\n}, {\n    num: 5,\n    text: 'num2'\n}, {\n    num: 6,\n    text: 'num3'\n}, {\n    num: 3,\n    text: 'num4'\n}];   \narr.sort(function(a, b) {\n    return a.num - b.num;   //从小到大排\n    return b.num - a.num;   //从大到小排\n});\n```\n\n## 对象和字符串的转换\n\n```js\nvar obj = {a: 'aaa', b: 'bbb'};\nvar objStr = JSON.stringify(obj);    // \"{\"a\":\"aaa\",\"b\":\"bbb\"}\"\nvar newObj = JSON.parse(objStr);     // {a: \"aaa\", b: \"bbb\"}\n```\n\n# git笔记\n## git使用之前的配置\n\n```js\n1.git config --global user.email xxx@163.com\n2.git config --global user.name xxx\n3.ssh-keygen -t rsa -C xxx@163.com(邮箱地址)      // 生成ssh\n4.找到.ssh文件夹打开，使用cat id_rsa.pub    //打开公钥ssh串\n5.登陆github，settings － SSH keys  － add ssh keys （把上面的内容全部添加进去即可）\n```\n\n`说明：然后这个邮箱（xxxxx@gmail.com）对应的账号在github上就有权限对仓库进行操作了。可以尽情的进行下面的git命令了。`\n\n## git常用命令\n\n```js\n1、git config user.name  /  user.email     //查看当前git的用户名称、邮箱\n2、git clone https://github.com/jarson7426/javascript.git  project  //clone仓库到本地。\n3、修改本地代码，提交到分支:  git add file   /   git commit -m “新增文件”\n4、把本地库推送到远程库:  git push origin master\n5、查看提交日志：git log -5\n6、返回某一个版本：git reset --hard 123\n7、分支：git branch / git checkout name  / git checkout -b dev\n8、合并name分支到当前分支：git merge name   /   git pull origin\n9、删除本地分支：git branch -D name\n10、删除远程分支： git push origin  :daily/x.x.x\n11、git checkout -b mydev origin/daily/1.0.0    //把远程daily分支映射到本地mydev分支进行开发\n12、合并远程分支到当前分支 git pull origin daily/1.1.1\n13、发布到线上：\n    git tag publish/0.1.5\n    git push origin publish/0.1.5:publish/0.1.5\n14、线上代码覆盖到本地：\n    git checkout --theirs build/scripts/ddos\n    git checkout --theirs src/app/ddos\n```\n\n# 结语\n\n希望本文总结的内容能给各位看官带来焕然一新的感觉。另外，如果你们有什么值得推荐的js技巧，欢迎在评论中补充，我可以收纳在本文中。\n\nPS：此文档会持续新增内容。\n\n--------------------------------------------------------------------------------\n","slug":"com-func-skill","published":1,"updated":"2016-10-14T16:40:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdaj0007u13g27xjxsci","content":"<hr>\n<p>学习和工作的过程中总结的干货，包括常用函数、常用js技巧、常用正则表达式、git笔记等。为刚接触前端的童鞋们提供一个简单的查询的途径，也以此来缅怀我的前端学习之路。<br>PS：此文档，我会持续更新。<br><a id=\"more\"></a></p>\n<h1 id=\"Ajax请求\"><a href=\"#Ajax请求\" class=\"headerlink\" title=\"Ajax请求\"></a>Ajax请求</h1><h2 id=\"jquery-ajax函数\"><a href=\"#jquery-ajax函数\" class=\"headerlink\" title=\"jquery ajax函数\"></a>jquery ajax函数</h2><p>我自己封装了一个ajax的函数，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, type success, error</span>) </span>&#123;</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: url,</div><div class=\"line\">        type: type,</div><div class=\"line\">        dataType: <span class=\"string\">'json'</span>,</div><div class=\"line\">        timeout: <span class=\"number\">10000</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = d.data;</div><div class=\"line\">            success &amp;&amp; success(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            error &amp;&amp; error(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用方法：</span></div><div class=\"line\">Ajax(<span class=\"string\">'/data.json'</span>, <span class=\"string\">'get'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"jsonp方式\"><a href=\"#jsonp方式\" class=\"headerlink\" title=\"jsonp方式\"></a>jsonp方式</h2><p>有时候我们为了跨域，要使用jsonp的方法，我也封装了一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> options = config || &#123;&#125;;   <span class=\"comment\">// 需要配置url, success, time, fail四个属性</span></div><div class=\"line\">    <span class=\"keyword\">var</span> callbackName = (<span class=\"string\">'jsonp_'</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> oHead = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> oScript = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    oHead.appendChild(oScript);</div><div class=\"line\">    <span class=\"built_in\">window</span>[callbackName] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;  <span class=\"comment\">//创建jsonp回调函数</span></div><div class=\"line\">        oHead.removeChild(oScript);</div><div class=\"line\">        clearTimeout(oScript.timer);</div><div class=\"line\">        <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</div><div class=\"line\">        options.success &amp;&amp; options.success(json);   <span class=\"comment\">//先删除script标签，实际上执行的是success函数</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    oScript.src = options.url + <span class=\"string\">'?'</span> + callbackName;    <span class=\"comment\">//发送请求</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (options.time) &#123;  <span class=\"comment\">//设置超时处理</span></div><div class=\"line\">        oScript.timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</div><div class=\"line\">            oHead.removeChild(oScript);</div><div class=\"line\">            options.fail &amp;&amp; options.fail(&#123; message: <span class=\"string\">\"超时\"</span> &#125;);</div><div class=\"line\">        &#125;, options.time);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用方法：</span></div><div class=\"line\">jsonp(&#123;</div><div class=\"line\">    url: <span class=\"string\">'/b.com/b.json'</span>,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//数据处理</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    time: <span class=\"number\">5000</span>,</div><div class=\"line\">    fail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//错误处理</span></div><div class=\"line\">    &#125;       </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"常用正则验证表达式\"><a href=\"#常用正则验证表达式\" class=\"headerlink\" title=\"常用正则验证表达式\"></a>常用正则验证表达式</h1><h2 id=\"手机号验证\"><a href=\"#手机号验证\" class=\"headerlink\" title=\"手机号验证\"></a>手机号验证</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> exp = <span class=\"regexp\">/^1[3-9]\\d&#123;9&#125;$/</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> exp.test(num);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"身份证号验证\"><a href=\"#身份证号验证\" class=\"headerlink\" title=\"身份证号验证\"></a>身份证号验证</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exp = <span class=\"regexp\">/^[1-9]&#123;1&#125;[0-9]&#123;14&#125;$|^[1-9]&#123;1&#125;[0-9]&#123;16&#125;([0-9]|[xX])$/</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"ip验证\"><a href=\"#ip验证\" class=\"headerlink\" title=\"ip验证\"></a>ip验证</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exp = <span class=\"regexp\">/^(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])$/</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"常用js函数\"><a href=\"#常用js函数\" class=\"headerlink\" title=\"常用js函数\"></a>常用js函数</h1><h2 id=\"返回顶部\"><a href=\"#返回顶部\" class=\"headerlink\" title=\"返回顶部\"></a>返回顶部</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = $(<span class=\"built_in\">window</span>).scrollTop();</div><div class=\"line\">    <span class=\"keyword\">if</span>(a &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        $(<span class=\"string\">'.go-top'</span>).fadeIn();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        $(<span class=\"string\">'.go-top'</span>).fadeOut();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">$(<span class=\"string\">\".go-top\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"html,body\"</span>).animate(&#123;scrollTop:<span class=\"string\">\"0px\"</span>&#125;,<span class=\"string\">'600'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"阻止冒泡\"><a href=\"#阻止冒泡\" class=\"headerlink\" title=\"阻止冒泡\"></a>阻止冒泡</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopBubble</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(e.stopPropagation)&#123;</div><div class=\"line\">        e.stopPropagation();  <span class=\"comment\">//W3C阻止冒泡方法  </span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">        e.cancelBubble = <span class=\"literal\">true</span>; <span class=\"comment\">//IE阻止冒泡方法  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"全部替换replaceAll\"><a href=\"#全部替换replaceAll\" class=\"headerlink\" title=\"全部替换replaceAll\"></a>全部替换replaceAll</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> replaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bigStr, str1, str2</span>) </span>&#123;  <span class=\"comment\">//把bigStr中的所有str1替换为str2</span></div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">'gm'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> bigStr.replace(reg, str2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"获取浏览器url中的参数值\"><a href=\"#获取浏览器url中的参数值\" class=\"headerlink\" title=\"获取浏览器url中的参数值\"></a>获取浏览器url中的参数值</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getURLParam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>((<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'[?|&amp;]'</span> + name + <span class=\"string\">'='</span> + <span class=\"string\">'([^&amp;;]+?)(&amp;|#|;|$)'</span>, <span class=\"string\">\"ig\"</span>).exec(location.search) || [, <span class=\"string\">\"\"</span>])[<span class=\"number\">1</span>].replace(<span class=\"regexp\">/\\+/g</span>, <span class=\"string\">'%20'</span>)) || <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"深度拷贝对象\"><a href=\"#深度拷贝对象\" class=\"headerlink\" title=\"深度拷贝对象\"></a>深度拷贝对象</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneObj</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = obj.constructor == <span class=\"built_in\">Object</span> ? <span class=\"keyword\">new</span> obj.constructor() : <span class=\"keyword\">new</span> obj.constructor(obj.valueOf());</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(o[key] != obj[key] )&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(obj[key]) == <span class=\"string\">'object'</span> )&#123;</div><div class=\"line\">                o[key] = mods.cloneObj(obj[key]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                o[key] = obj[key];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [], json = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!json[arr[i]]) &#123;</div><div class=\"line\">            json[arr[i]] = <span class=\"number\">1</span>;</div><div class=\"line\">            result.push(arr[i]);  <span class=\"comment\">//返回没被删除的元素</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"判断数组元素是否重复\"><a href=\"#判断数组元素是否重复\" class=\"headerlink\" title=\"判断数组元素是否重复\"></a>判断数组元素是否重复</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isRepeat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;  <span class=\"comment\">//arr是否有重复元素</span></div><div class=\"line\">    <span class=\"keyword\">var</span> hash = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (hash[arr[i]]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        hash[arr[i]] = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"生成随机数\"><a href=\"#生成随机数\" class=\"headerlink\" title=\"生成随机数\"></a>生成随机数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randombetween</span>(<span class=\"params\">min, max</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> min + (<span class=\"built_in\">Math</span>.random() * (max-min +<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"操作cookie\"><a href=\"#操作cookie\" class=\"headerlink\" title=\"操作cookie\"></a>操作cookie</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">own.setCookie = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cname, cvalue, exdays</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    d.setTime(d.getTime() + (exdays*<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>));</div><div class=\"line\">    <span class=\"keyword\">var</span> expires = <span class=\"string\">'expires='</span>+d.toUTCString();</div><div class=\"line\">    <span class=\"built_in\">document</span>.cookie = cname + <span class=\"string\">'='</span> + cvalue + <span class=\"string\">'; '</span> + expires;</div><div class=\"line\">&#125;;</div><div class=\"line\">own.getCookie = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = cname + <span class=\"string\">'='</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> ca = <span class=\"built_in\">document</span>.cookie.split(<span class=\"string\">';'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt; ca.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> c = ca[i];</div><div class=\"line\">        <span class=\"keyword\">while</span> (c.charAt(<span class=\"number\">0</span>) == <span class=\"string\">' '</span>) c = c.substring(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c.indexOf(name) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> c.substring(name.length, c.length);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"知识技巧总结\"><a href=\"#知识技巧总结\" class=\"headerlink\" title=\"知识技巧总结\"></a>知识技巧总结</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>underfined、null、0、false、NaN、空字符串。他们的逻辑非结果均为true。</p>\n<h2 id=\"闭包格式\"><a href=\"#闭包格式\" class=\"headerlink\" title=\"闭包格式\"></a>闭包格式</h2><p>好处：避免命名冲突（全局变量污染）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a+b);  <span class=\"comment\">//30</span></div><div class=\"line\">&#125;)(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"截取和清空数组\"><a href=\"#截取和清空数组\" class=\"headerlink\" title=\"截取和清空数组\"></a>截取和清空数组</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">12</span>, <span class=\"number\">222</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span>];</div><div class=\"line\">arr.length = <span class=\"number\">2</span>;   <span class=\"comment\">//截取，arr = [12, 222];  </span></div><div class=\"line\">arr.length = <span class=\"number\">0</span>;   <span class=\"comment\">//清空，arr will be equal to [].</span></div></pre></td></tr></table></figure>\n<h2 id=\"获取数组的最大最小值\"><a href=\"#获取数组的最大最小值\" class=\"headerlink\" title=\"获取数组的最大最小值\"></a>获取数组的最大最小值</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">5</span>, <span class=\"number\">45822</span>, <span class=\"number\">120</span>, <span class=\"number\">-215</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> maxInNumbers = <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, numbers);   <span class=\"comment\">//45822</span></div><div class=\"line\"><span class=\"keyword\">var</span> minInNumbers = <span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, numbers);   <span class=\"comment\">//-215</span></div></pre></td></tr></table></figure>\n<h2 id=\"浮点数计算问题\"><a href=\"#浮点数计算问题\" class=\"headerlink\" title=\"浮点数计算问题\"></a>浮点数计算问题</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>   <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<p>为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示。可以通过使用<code>toFixed()</code>来解决这个问题。</p>\n<h2 id=\"数组排序sort函数\"><a href=\"#数组排序sort函数\" class=\"headerlink\" title=\"数组排序sort函数\"></a>数组排序sort函数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>];    <span class=\"comment\">//数字数组</span></div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a - b;   <span class=\"comment\">//从小到大排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> b - a;   <span class=\"comment\">//从大到小排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>;   <span class=\"comment\">//数组洗牌</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;   <span class=\"comment\">//对象数组</span></div><div class=\"line\">    num: <span class=\"number\">1</span>,</div><div class=\"line\">    text: <span class=\"string\">'num1'</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    num: <span class=\"number\">5</span>,</div><div class=\"line\">    text: <span class=\"string\">'num2'</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    num: <span class=\"number\">6</span>,</div><div class=\"line\">    text: <span class=\"string\">'num3'</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    num: <span class=\"number\">3</span>,</div><div class=\"line\">    text: <span class=\"string\">'num4'</span></div><div class=\"line\">&#125;];   </div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.num - b.num;   <span class=\"comment\">//从小到大排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> b.num - a.num;   <span class=\"comment\">//从大到小排</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"对象和字符串的转换\"><a href=\"#对象和字符串的转换\" class=\"headerlink\" title=\"对象和字符串的转换\"></a>对象和字符串的转换</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;a: <span class=\"string\">'aaa'</span>, b: <span class=\"string\">'bbb'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> objStr = <span class=\"built_in\">JSON</span>.stringify(obj);    <span class=\"comment\">// \"&#123;\"a\":\"aaa\",\"b\":\"bbb\"&#125;\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> newObj = <span class=\"built_in\">JSON</span>.parse(objStr);     <span class=\"comment\">// &#123;a: \"aaa\", b: \"bbb\"&#125;</span></div></pre></td></tr></table></figure>\n<h1 id=\"git笔记\"><a href=\"#git笔记\" class=\"headerlink\" title=\"git笔记\"></a>git笔记</h1><h2 id=\"git使用之前的配置\"><a href=\"#git使用之前的配置\" class=\"headerlink\" title=\"git使用之前的配置\"></a>git使用之前的配置</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>git config --global user.email xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"number\">2.</span>git config --global user.name xxx</div><div class=\"line\"><span class=\"number\">3.</span>ssh-keygen -t rsa -C xxx@<span class=\"number\">163.</span>com(邮箱地址)      <span class=\"comment\">// 生成ssh</span></div><div class=\"line\"><span class=\"number\">4.</span>找到.ssh文件夹打开，使用cat id_rsa.pub    <span class=\"comment\">//打开公钥ssh串</span></div><div class=\"line\"><span class=\"number\">5.</span>登陆github，settings － SSH keys  － add ssh keys （把上面的内容全部添加进去即可）</div></pre></td></tr></table></figure>\n<p><code>说明：然后这个邮箱（xxxxx@gmail.com）对应的账号在github上就有权限对仓库进行操作了。可以尽情的进行下面的git命令了。</code></p>\n<h2 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>、git config user.name  /  user.email     <span class=\"comment\">//查看当前git的用户名称、邮箱</span></div><div class=\"line\"><span class=\"number\">2</span>、git clone https:<span class=\"comment\">//github.com/jarson7426/javascript.git  project  //clone仓库到本地。</span></div><div class=\"line\"><span class=\"number\">3</span>、修改本地代码，提交到分支:  git add file   /   git commit -m “新增文件”</div><div class=\"line\"><span class=\"number\">4</span>、把本地库推送到远程库:  git push origin master</div><div class=\"line\"><span class=\"number\">5</span>、查看提交日志：git log <span class=\"number\">-5</span></div><div class=\"line\"><span class=\"number\">6</span>、返回某一个版本：git reset --hard <span class=\"number\">123</span></div><div class=\"line\"><span class=\"number\">7</span>、分支：git branch / git checkout name  / git checkout -b dev</div><div class=\"line\"><span class=\"number\">8</span>、合并name分支到当前分支：git merge name   /   git pull origin</div><div class=\"line\"><span class=\"number\">9</span>、删除本地分支：git branch -D name</div><div class=\"line\"><span class=\"number\">10</span>、删除远程分支： git push origin  :daily/x.x.x</div><div class=\"line\"><span class=\"number\">11</span>、git checkout -b mydev origin/daily/<span class=\"number\">1.0</span><span class=\"number\">.0</span>    <span class=\"comment\">//把远程daily分支映射到本地mydev分支进行开发</span></div><div class=\"line\"><span class=\"number\">12</span>、合并远程分支到当前分支 git pull origin daily/<span class=\"number\">1.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"number\">13</span>、发布到线上：</div><div class=\"line\">    git tag publish/<span class=\"number\">0.1</span><span class=\"number\">.5</span></div><div class=\"line\">    git push origin publish/<span class=\"number\">0.1</span><span class=\"number\">.5</span>:publish/<span class=\"number\">0.1</span><span class=\"number\">.5</span></div><div class=\"line\"><span class=\"number\">14</span>、线上代码覆盖到本地：</div><div class=\"line\">    git checkout --theirs build/scripts/ddos</div><div class=\"line\">    git checkout --theirs src/app/ddos</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>希望本文总结的内容能给各位看官带来焕然一新的感觉。另外，如果你们有什么值得推荐的js技巧，欢迎在评论中补充，我可以收纳在本文中。</p>\n<p>PS：此文档会持续新增内容。</p>\n<hr>\n","excerpt":"<hr>\n<p>学习和工作的过程中总结的干货，包括常用函数、常用js技巧、常用正则表达式、git笔记等。为刚接触前端的童鞋们提供一个简单的查询的途径，也以此来缅怀我的前端学习之路。<br>PS：此文档，我会持续更新。<br>","more":"</p>\n<h1 id=\"Ajax请求\"><a href=\"#Ajax请求\" class=\"headerlink\" title=\"Ajax请求\"></a>Ajax请求</h1><h2 id=\"jquery-ajax函数\"><a href=\"#jquery-ajax函数\" class=\"headerlink\" title=\"jquery ajax函数\"></a>jquery ajax函数</h2><p>我自己封装了一个ajax的函数，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, type success, error</span>) </span>&#123;</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: url,</div><div class=\"line\">        type: type,</div><div class=\"line\">        dataType: <span class=\"string\">'json'</span>,</div><div class=\"line\">        timeout: <span class=\"number\">10000</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = d.data;</div><div class=\"line\">            success &amp;&amp; success(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            error &amp;&amp; error(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用方法：</span></div><div class=\"line\">Ajax(<span class=\"string\">'/data.json'</span>, <span class=\"string\">'get'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"jsonp方式\"><a href=\"#jsonp方式\" class=\"headerlink\" title=\"jsonp方式\"></a>jsonp方式</h2><p>有时候我们为了跨域，要使用jsonp的方法，我也封装了一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> options = config || &#123;&#125;;   <span class=\"comment\">// 需要配置url, success, time, fail四个属性</span></div><div class=\"line\">    <span class=\"keyword\">var</span> callbackName = (<span class=\"string\">'jsonp_'</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> oHead = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> oScript = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    oHead.appendChild(oScript);</div><div class=\"line\">    <span class=\"built_in\">window</span>[callbackName] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;  <span class=\"comment\">//创建jsonp回调函数</span></div><div class=\"line\">        oHead.removeChild(oScript);</div><div class=\"line\">        clearTimeout(oScript.timer);</div><div class=\"line\">        <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</div><div class=\"line\">        options.success &amp;&amp; options.success(json);   <span class=\"comment\">//先删除script标签，实际上执行的是success函数</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    oScript.src = options.url + <span class=\"string\">'?'</span> + callbackName;    <span class=\"comment\">//发送请求</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (options.time) &#123;  <span class=\"comment\">//设置超时处理</span></div><div class=\"line\">        oScript.timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>[callbackName] = <span class=\"literal\">null</span>;</div><div class=\"line\">            oHead.removeChild(oScript);</div><div class=\"line\">            options.fail &amp;&amp; options.fail(&#123; message: <span class=\"string\">\"超时\"</span> &#125;);</div><div class=\"line\">        &#125;, options.time);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用方法：</span></div><div class=\"line\">jsonp(&#123;</div><div class=\"line\">    url: <span class=\"string\">'/b.com/b.json'</span>,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//数据处理</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    time: <span class=\"number\">5000</span>,</div><div class=\"line\">    fail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//错误处理</span></div><div class=\"line\">    &#125;       </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"常用正则验证表达式\"><a href=\"#常用正则验证表达式\" class=\"headerlink\" title=\"常用正则验证表达式\"></a>常用正则验证表达式</h1><h2 id=\"手机号验证\"><a href=\"#手机号验证\" class=\"headerlink\" title=\"手机号验证\"></a>手机号验证</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> exp = <span class=\"regexp\">/^1[3-9]\\d&#123;9&#125;$/</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> exp.test(num);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"身份证号验证\"><a href=\"#身份证号验证\" class=\"headerlink\" title=\"身份证号验证\"></a>身份证号验证</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exp = <span class=\"regexp\">/^[1-9]&#123;1&#125;[0-9]&#123;14&#125;$|^[1-9]&#123;1&#125;[0-9]&#123;16&#125;([0-9]|[xX])$/</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"ip验证\"><a href=\"#ip验证\" class=\"headerlink\" title=\"ip验证\"></a>ip验证</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exp = <span class=\"regexp\">/^(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])$/</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"常用js函数\"><a href=\"#常用js函数\" class=\"headerlink\" title=\"常用js函数\"></a>常用js函数</h1><h2 id=\"返回顶部\"><a href=\"#返回顶部\" class=\"headerlink\" title=\"返回顶部\"></a>返回顶部</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = $(<span class=\"built_in\">window</span>).scrollTop();</div><div class=\"line\">    <span class=\"keyword\">if</span>(a &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        $(<span class=\"string\">'.go-top'</span>).fadeIn();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        $(<span class=\"string\">'.go-top'</span>).fadeOut();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">$(<span class=\"string\">\".go-top\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"html,body\"</span>).animate(&#123;scrollTop:<span class=\"string\">\"0px\"</span>&#125;,<span class=\"string\">'600'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"阻止冒泡\"><a href=\"#阻止冒泡\" class=\"headerlink\" title=\"阻止冒泡\"></a>阻止冒泡</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopBubble</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(e.stopPropagation)&#123;</div><div class=\"line\">        e.stopPropagation();  <span class=\"comment\">//W3C阻止冒泡方法  </span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">        e.cancelBubble = <span class=\"literal\">true</span>; <span class=\"comment\">//IE阻止冒泡方法  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"全部替换replaceAll\"><a href=\"#全部替换replaceAll\" class=\"headerlink\" title=\"全部替换replaceAll\"></a>全部替换replaceAll</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> replaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bigStr, str1, str2</span>) </span>&#123;  <span class=\"comment\">//把bigStr中的所有str1替换为str2</span></div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">'gm'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> bigStr.replace(reg, str2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"获取浏览器url中的参数值\"><a href=\"#获取浏览器url中的参数值\" class=\"headerlink\" title=\"获取浏览器url中的参数值\"></a>获取浏览器url中的参数值</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getURLParam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>((<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'[?|&amp;]'</span> + name + <span class=\"string\">'='</span> + <span class=\"string\">'([^&amp;;]+?)(&amp;|#|;|$)'</span>, <span class=\"string\">\"ig\"</span>).exec(location.search) || [, <span class=\"string\">\"\"</span>])[<span class=\"number\">1</span>].replace(<span class=\"regexp\">/\\+/g</span>, <span class=\"string\">'%20'</span>)) || <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"深度拷贝对象\"><a href=\"#深度拷贝对象\" class=\"headerlink\" title=\"深度拷贝对象\"></a>深度拷贝对象</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneObj</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = obj.constructor == <span class=\"built_in\">Object</span> ? <span class=\"keyword\">new</span> obj.constructor() : <span class=\"keyword\">new</span> obj.constructor(obj.valueOf());</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(o[key] != obj[key] )&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(obj[key]) == <span class=\"string\">'object'</span> )&#123;</div><div class=\"line\">                o[key] = mods.cloneObj(obj[key]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                o[key] = obj[key];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [], json = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!json[arr[i]]) &#123;</div><div class=\"line\">            json[arr[i]] = <span class=\"number\">1</span>;</div><div class=\"line\">            result.push(arr[i]);  <span class=\"comment\">//返回没被删除的元素</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"判断数组元素是否重复\"><a href=\"#判断数组元素是否重复\" class=\"headerlink\" title=\"判断数组元素是否重复\"></a>判断数组元素是否重复</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isRepeat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;  <span class=\"comment\">//arr是否有重复元素</span></div><div class=\"line\">    <span class=\"keyword\">var</span> hash = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (hash[arr[i]]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        hash[arr[i]] = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"生成随机数\"><a href=\"#生成随机数\" class=\"headerlink\" title=\"生成随机数\"></a>生成随机数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randombetween</span>(<span class=\"params\">min, max</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> min + (<span class=\"built_in\">Math</span>.random() * (max-min +<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"操作cookie\"><a href=\"#操作cookie\" class=\"headerlink\" title=\"操作cookie\"></a>操作cookie</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">own.setCookie = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cname, cvalue, exdays</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    d.setTime(d.getTime() + (exdays*<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>));</div><div class=\"line\">    <span class=\"keyword\">var</span> expires = <span class=\"string\">'expires='</span>+d.toUTCString();</div><div class=\"line\">    <span class=\"built_in\">document</span>.cookie = cname + <span class=\"string\">'='</span> + cvalue + <span class=\"string\">'; '</span> + expires;</div><div class=\"line\">&#125;;</div><div class=\"line\">own.getCookie = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = cname + <span class=\"string\">'='</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> ca = <span class=\"built_in\">document</span>.cookie.split(<span class=\"string\">';'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt; ca.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> c = ca[i];</div><div class=\"line\">        <span class=\"keyword\">while</span> (c.charAt(<span class=\"number\">0</span>) == <span class=\"string\">' '</span>) c = c.substring(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c.indexOf(name) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> c.substring(name.length, c.length);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"知识技巧总结\"><a href=\"#知识技巧总结\" class=\"headerlink\" title=\"知识技巧总结\"></a>知识技巧总结</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>underfined、null、0、false、NaN、空字符串。他们的逻辑非结果均为true。</p>\n<h2 id=\"闭包格式\"><a href=\"#闭包格式\" class=\"headerlink\" title=\"闭包格式\"></a>闭包格式</h2><p>好处：避免命名冲突（全局变量污染）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a+b);  <span class=\"comment\">//30</span></div><div class=\"line\">&#125;)(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"截取和清空数组\"><a href=\"#截取和清空数组\" class=\"headerlink\" title=\"截取和清空数组\"></a>截取和清空数组</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">12</span>, <span class=\"number\">222</span>, <span class=\"number\">44</span>, <span class=\"number\">88</span>];</div><div class=\"line\">arr.length = <span class=\"number\">2</span>;   <span class=\"comment\">//截取，arr = [12, 222];  </span></div><div class=\"line\">arr.length = <span class=\"number\">0</span>;   <span class=\"comment\">//清空，arr will be equal to [].</span></div></pre></td></tr></table></figure>\n<h2 id=\"获取数组的最大最小值\"><a href=\"#获取数组的最大最小值\" class=\"headerlink\" title=\"获取数组的最大最小值\"></a>获取数组的最大最小值</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">5</span>, <span class=\"number\">45822</span>, <span class=\"number\">120</span>, <span class=\"number\">-215</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> maxInNumbers = <span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, numbers);   <span class=\"comment\">//45822</span></div><div class=\"line\"><span class=\"keyword\">var</span> minInNumbers = <span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, numbers);   <span class=\"comment\">//-215</span></div></pre></td></tr></table></figure>\n<h2 id=\"浮点数计算问题\"><a href=\"#浮点数计算问题\" class=\"headerlink\" title=\"浮点数计算问题\"></a>浮点数计算问题</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>   <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<p>为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示。可以通过使用<code>toFixed()</code>来解决这个问题。</p>\n<h2 id=\"数组排序sort函数\"><a href=\"#数组排序sort函数\" class=\"headerlink\" title=\"数组排序sort函数\"></a>数组排序sort函数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>];    <span class=\"comment\">//数字数组</span></div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a - b;   <span class=\"comment\">//从小到大排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> b - a;   <span class=\"comment\">//从大到小排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>;   <span class=\"comment\">//数组洗牌</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;   <span class=\"comment\">//对象数组</span></div><div class=\"line\">    num: <span class=\"number\">1</span>,</div><div class=\"line\">    text: <span class=\"string\">'num1'</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    num: <span class=\"number\">5</span>,</div><div class=\"line\">    text: <span class=\"string\">'num2'</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    num: <span class=\"number\">6</span>,</div><div class=\"line\">    text: <span class=\"string\">'num3'</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    num: <span class=\"number\">3</span>,</div><div class=\"line\">    text: <span class=\"string\">'num4'</span></div><div class=\"line\">&#125;];   </div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.num - b.num;   <span class=\"comment\">//从小到大排</span></div><div class=\"line\">    <span class=\"keyword\">return</span> b.num - a.num;   <span class=\"comment\">//从大到小排</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"对象和字符串的转换\"><a href=\"#对象和字符串的转换\" class=\"headerlink\" title=\"对象和字符串的转换\"></a>对象和字符串的转换</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;a: <span class=\"string\">'aaa'</span>, b: <span class=\"string\">'bbb'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> objStr = <span class=\"built_in\">JSON</span>.stringify(obj);    <span class=\"comment\">// \"&#123;\"a\":\"aaa\",\"b\":\"bbb\"&#125;\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> newObj = <span class=\"built_in\">JSON</span>.parse(objStr);     <span class=\"comment\">// &#123;a: \"aaa\", b: \"bbb\"&#125;</span></div></pre></td></tr></table></figure>\n<h1 id=\"git笔记\"><a href=\"#git笔记\" class=\"headerlink\" title=\"git笔记\"></a>git笔记</h1><h2 id=\"git使用之前的配置\"><a href=\"#git使用之前的配置\" class=\"headerlink\" title=\"git使用之前的配置\"></a>git使用之前的配置</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>git config --global user.email xxx@<span class=\"number\">163.</span>com</div><div class=\"line\"><span class=\"number\">2.</span>git config --global user.name xxx</div><div class=\"line\"><span class=\"number\">3.</span>ssh-keygen -t rsa -C xxx@<span class=\"number\">163.</span>com(邮箱地址)      <span class=\"comment\">// 生成ssh</span></div><div class=\"line\"><span class=\"number\">4.</span>找到.ssh文件夹打开，使用cat id_rsa.pub    <span class=\"comment\">//打开公钥ssh串</span></div><div class=\"line\"><span class=\"number\">5.</span>登陆github，settings － SSH keys  － add ssh keys （把上面的内容全部添加进去即可）</div></pre></td></tr></table></figure>\n<p><code>说明：然后这个邮箱（xxxxx@gmail.com）对应的账号在github上就有权限对仓库进行操作了。可以尽情的进行下面的git命令了。</code></p>\n<h2 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>、git config user.name  /  user.email     <span class=\"comment\">//查看当前git的用户名称、邮箱</span></div><div class=\"line\"><span class=\"number\">2</span>、git clone https:<span class=\"comment\">//github.com/jarson7426/javascript.git  project  //clone仓库到本地。</span></div><div class=\"line\"><span class=\"number\">3</span>、修改本地代码，提交到分支:  git add file   /   git commit -m “新增文件”</div><div class=\"line\"><span class=\"number\">4</span>、把本地库推送到远程库:  git push origin master</div><div class=\"line\"><span class=\"number\">5</span>、查看提交日志：git log <span class=\"number\">-5</span></div><div class=\"line\"><span class=\"number\">6</span>、返回某一个版本：git reset --hard <span class=\"number\">123</span></div><div class=\"line\"><span class=\"number\">7</span>、分支：git branch / git checkout name  / git checkout -b dev</div><div class=\"line\"><span class=\"number\">8</span>、合并name分支到当前分支：git merge name   /   git pull origin</div><div class=\"line\"><span class=\"number\">9</span>、删除本地分支：git branch -D name</div><div class=\"line\"><span class=\"number\">10</span>、删除远程分支： git push origin  :daily/x.x.x</div><div class=\"line\"><span class=\"number\">11</span>、git checkout -b mydev origin/daily/<span class=\"number\">1.0</span><span class=\"number\">.0</span>    <span class=\"comment\">//把远程daily分支映射到本地mydev分支进行开发</span></div><div class=\"line\"><span class=\"number\">12</span>、合并远程分支到当前分支 git pull origin daily/<span class=\"number\">1.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"number\">13</span>、发布到线上：</div><div class=\"line\">    git tag publish/<span class=\"number\">0.1</span><span class=\"number\">.5</span></div><div class=\"line\">    git push origin publish/<span class=\"number\">0.1</span><span class=\"number\">.5</span>:publish/<span class=\"number\">0.1</span><span class=\"number\">.5</span></div><div class=\"line\"><span class=\"number\">14</span>、线上代码覆盖到本地：</div><div class=\"line\">    git checkout --theirs build/scripts/ddos</div><div class=\"line\">    git checkout --theirs src/app/ddos</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>希望本文总结的内容能给各位看官带来焕然一新的感觉。另外，如果你们有什么值得推荐的js技巧，欢迎在评论中补充，我可以收纳在本文中。</p>\n<p>PS：此文档会持续新增内容。</p>\n<hr>"},{"title":"hexo搭建属于自己的博客","date":"2016-04-23T14:11:51.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n一直都在博客园写博客，不过最近在逛园子的时候不小心看到了`hexo`,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^\n\n博客仓库地址(喜欢的朋友给个star呀，多谢～)：[博客仓库点这里](https://github.com/luckykun/luckykun.github.io)\n\n为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：\n\n```js\n$ hexo new(n) xxx    //写文章\n$ hexo clean     //清除缓存\n$ hexo generate(g)    //把文章生成页面\n$ hexo server(s)    //启动本地服务调试\n$ hexo deploy(d)    //部署到github 可与hexo g合并为 hexo d -g\n```\n\n<!--more-->\n\n折腾了大半天，终于搭建好了自己的博客。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。\n- `备注1：如果喜欢以官方教程为主的，点这里`[hexo官方文档](https://hexo.io/zh-cn/docs/)。\n- `备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。`\n\n# 准备工作\n- 安装node\n- 到[Node.js](http://nodejs.org/)官网下载相应平台的最新版本，一路安装即可。\n- 安装git\n- 根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:\n- ![](http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png)\n- 安装hexo\n\n    使用以下命令安装hexo到全局\n\n  ```js\n    $ npm install -g hexo\n  ```\n\n    然后输入命令`hexo -v`输入hexo的版本号即为安装成功。\n\n- github准备\n  - 博客是在[github](https://github.com/)上托管维护的，所以当然需要一个github的账号了。然后创建一个名为`luckykun.github.io`的仓库。\n  - 其中'luckykun'是我的账户名，下文同理。\n  - 除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。\n\n    ```js\n      git config --global user.email xxx@163.com\n      git config --global user.name xxx\n      ssh-keygen -t rsa -C xxx@163.com(邮箱地址)      // 生成ssh\n      找到.ssh文件夹打开，使用cat id_rsa.pub    //打开公钥ssh串\n      登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）\n    ```\n\n# 初始化\nok，环境都准备好了，开始激动人心的步骤了，搭建博客。\n\n在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。\n\n```js\n$ hexo init\n```\n\n# 生成静态页面\n初始化完成之后，就已经生成一篇\"hello word\"的文章了，现在执行以下命令把文章编译为静态页面：\n\n```js\n$ hexo generate\n```\n\n# 本地启动\n把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入[http://localhost:4000/](http://localhost:4000/)查看生成的页面效果。\n\n```js\n$ hexo server\n```\n\n如果你看到了下面这个画面，恭喜你，你成功了！ ![](https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png)\n\n# 更换主题\n上面的博客效果是hexo自己默认的主题`landscape`，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题[yilia](https://github.com/litten/hexo-theme-yilia)，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~\n\n下面贴出github上star数量最多的前10个主题：\n- [iissnan/hexo-theme-next](https://github.com/iissnan/hexo-theme-next)， 3510个star。\n- [litten/hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)， 1703个star。\n- [TryGhost/Casper](https://github.com/TryGhost/Casper)， 679个star。\n- [wuchong/jacman](https://github.com/wuchong/jacman)， 503个star。\n- [A-limon/pacman](https://github.com/A-limon/pacman)， 431个star。\n- [daleanthony/uno](https://github.com/daleanthony/uno)， 416个star。\n- [orderedlist/modernist](https://github.com/orderedlist/modernist)， 367个star。\n- [AlxMedia/hueman](https://github.com/presscustomizr/hueman)， 336个star。\n- [kathyqian/crisp-ghost-theme](https://github.com/kathyqian/crisp-ghost-theme)， 303个star。\n- [xiangming/landscape-plus](https://github.com/xiangming/landscape-plus)， 287个star。\n\nclone主题代码\n\n在目录下执行下面的命令clone主题代码：\n\n```js\n    $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n修改配置文件\n\n`温馨提示：修改的时候，每个冒号后面都需要留一个英文空格，不然会出现很蛋疼的报错！`\n\n修改`Blog/_config.yml`文件：\n\n```java\n    theme: yilia    //默认为landscape\n```\n\n修改`themes/yilia/_config.yml`文件：\n\n```js\n    # Header\n    menu:\n        主页: /\n        所有文章: /archives\n        丝茉茉: /categories/simomo/\n        相册: /photos\n    # SubNav\n    subnav:\n        github: \"https://github.com/luckykun\"\n         weibo: \"http://weibo.com/u/2732624311\"\n        zhihu: \"#\"\n        rss: /atom.xml\n    # Content\n    excerpt_link: 阅读全文\n    fancybox: true\n    mathjax: true\n    top: true\n    # 是否开启动画效果\n    animate: true\n    # 是否在新窗口打开链接\n    open_in_new: false\n    # Miscellaneous\n    google_analytics: ''\n    favicon: /favicon.ico\n    #你的头像url\n    avatar: /img.png\n    #是否开启分享\n    share_jia: true\n    share_addthis: false\n    #是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n    #若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\n    duoshuo: jarson7426\n    #是否开启云标签\n    tagcloud: true\n    #是否开启友情链接\n    #不开启——\n    friends: false\n    #开启——\n    #friends:\n    #  百度一下: http://www.baidu.com\n    #  淘宝商城: http://www.taobao.com\n    #是否开启“关于我”。\n    #不开启——\n    #aboutme: false\n    #开启——\n    aboutme: true\n```\n\n查看效果\n\n更改主题之后可以使用命令`hexo server`打开本地服务，查看效果。\n\n# 部署到github\n上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。\n- 部署之前先修改`Blog/_config.yml`文件。\n\n  ```js\n    deploy:\n        type: git\n        repository: https://github.com/luckykun/luckykun.github.io.git  //luckykun替换为你自己的用户名\n        branch: master\n  ```\n\n    `备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。`\n\n- 然后使用以下命令进行部署。\n\n  ```js\n    $ hexo deploy\n  ```\n\n    `备注：如果执行上述命令报错，你可以试试下面这个命令再试。`\n\n  ```js\n    $ npm install hexo-deployer-git --save\n  ```\n\n  另外，部署的时候会提示输入github的账号和密码。由于每次部署都会提示，很烦人，也很影响效率，所以你可以试着这样做：\n  - 在系统环境变量中设置一个环境变量\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/home.png)\n\n  - 然后在你的用户目录（C:\\Users\\username）下新建一个叫 _netrc的文件，内容如下：\n\n    ```js\n    machine github.com\n    login your name\n    password xxxxxx\n    ```\n\n    然后你可以再部署试试，就不需要输入用户和密码，方便友好多了^_^\n\n部署成功后，你在浏览器中输入[luckykun.github.io](http://luckykun.github.io/)，就能看到和本地一样的效果了。\n\n# 结语\n可能会有同学发现，我除了使用了新的主题外，还加了`很多新的东西`。\n- 鼠标移动头像上会有旋转效果。\n- 给文章添加打赏功能。\n- 添加回到顶部的功能。\n- 添加总站访问量和文章阅读量\n- 添加文章目录显示\n- 添加相册功能\n- 给网站配置独立的域名\n\n\n\n其实修改这些非常简单，只要你有html、css、js的基础就可以。 思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。\n\n如果大家还有问题，欢迎留言，我会很乐意为大家解答的。\n\n好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！\n\n--------------------------------------------------------------------------------\n","source":"_posts/heoll-hexo.md","raw":"---\ntitle: hexo搭建属于自己的博客\ndate: 2016-04-23T22:11:51.000Z\ncategories: 工作\ntags:\n  - hexo系列\n  - 教程\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n一直都在博客园写博客，不过最近在逛园子的时候不小心看到了`hexo`,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^\n\n博客仓库地址(喜欢的朋友给个star呀，多谢～)：[博客仓库点这里](https://github.com/luckykun/luckykun.github.io)\n\n为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：\n\n```js\n$ hexo new(n) xxx    //写文章\n$ hexo clean     //清除缓存\n$ hexo generate(g)    //把文章生成页面\n$ hexo server(s)    //启动本地服务调试\n$ hexo deploy(d)    //部署到github 可与hexo g合并为 hexo d -g\n```\n\n<!--more-->\n\n折腾了大半天，终于搭建好了自己的博客。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。\n- `备注1：如果喜欢以官方教程为主的，点这里`[hexo官方文档](https://hexo.io/zh-cn/docs/)。\n- `备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。`\n\n# 准备工作\n- 安装node\n- 到[Node.js](http://nodejs.org/)官网下载相应平台的最新版本，一路安装即可。\n- 安装git\n- 根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:\n- ![](http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png)\n- 安装hexo\n\n    使用以下命令安装hexo到全局\n\n  ```js\n    $ npm install -g hexo\n  ```\n\n    然后输入命令`hexo -v`输入hexo的版本号即为安装成功。\n\n- github准备\n  - 博客是在[github](https://github.com/)上托管维护的，所以当然需要一个github的账号了。然后创建一个名为`luckykun.github.io`的仓库。\n  - 其中'luckykun'是我的账户名，下文同理。\n  - 除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。\n\n    ```js\n      git config --global user.email xxx@163.com\n      git config --global user.name xxx\n      ssh-keygen -t rsa -C xxx@163.com(邮箱地址)      // 生成ssh\n      找到.ssh文件夹打开，使用cat id_rsa.pub    //打开公钥ssh串\n      登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）\n    ```\n\n# 初始化\nok，环境都准备好了，开始激动人心的步骤了，搭建博客。\n\n在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。\n\n```js\n$ hexo init\n```\n\n# 生成静态页面\n初始化完成之后，就已经生成一篇\"hello word\"的文章了，现在执行以下命令把文章编译为静态页面：\n\n```js\n$ hexo generate\n```\n\n# 本地启动\n把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入[http://localhost:4000/](http://localhost:4000/)查看生成的页面效果。\n\n```js\n$ hexo server\n```\n\n如果你看到了下面这个画面，恭喜你，你成功了！ ![](https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png)\n\n# 更换主题\n上面的博客效果是hexo自己默认的主题`landscape`，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题[yilia](https://github.com/litten/hexo-theme-yilia)，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~\n\n下面贴出github上star数量最多的前10个主题：\n- [iissnan/hexo-theme-next](https://github.com/iissnan/hexo-theme-next)， 3510个star。\n- [litten/hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)， 1703个star。\n- [TryGhost/Casper](https://github.com/TryGhost/Casper)， 679个star。\n- [wuchong/jacman](https://github.com/wuchong/jacman)， 503个star。\n- [A-limon/pacman](https://github.com/A-limon/pacman)， 431个star。\n- [daleanthony/uno](https://github.com/daleanthony/uno)， 416个star。\n- [orderedlist/modernist](https://github.com/orderedlist/modernist)， 367个star。\n- [AlxMedia/hueman](https://github.com/presscustomizr/hueman)， 336个star。\n- [kathyqian/crisp-ghost-theme](https://github.com/kathyqian/crisp-ghost-theme)， 303个star。\n- [xiangming/landscape-plus](https://github.com/xiangming/landscape-plus)， 287个star。\n\nclone主题代码\n\n在目录下执行下面的命令clone主题代码：\n\n```js\n    $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n修改配置文件\n\n`温馨提示：修改的时候，每个冒号后面都需要留一个英文空格，不然会出现很蛋疼的报错！`\n\n修改`Blog/_config.yml`文件：\n\n```java\n    theme: yilia    //默认为landscape\n```\n\n修改`themes/yilia/_config.yml`文件：\n\n```js\n    # Header\n    menu:\n        主页: /\n        所有文章: /archives\n        丝茉茉: /categories/simomo/\n        相册: /photos\n    # SubNav\n    subnav:\n        github: \"https://github.com/luckykun\"\n         weibo: \"http://weibo.com/u/2732624311\"\n        zhihu: \"#\"\n        rss: /atom.xml\n    # Content\n    excerpt_link: 阅读全文\n    fancybox: true\n    mathjax: true\n    top: true\n    # 是否开启动画效果\n    animate: true\n    # 是否在新窗口打开链接\n    open_in_new: false\n    # Miscellaneous\n    google_analytics: ''\n    favicon: /favicon.ico\n    #你的头像url\n    avatar: /img.png\n    #是否开启分享\n    share_jia: true\n    share_addthis: false\n    #是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n    #若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\n    duoshuo: jarson7426\n    #是否开启云标签\n    tagcloud: true\n    #是否开启友情链接\n    #不开启——\n    friends: false\n    #开启——\n    #friends:\n    #  百度一下: http://www.baidu.com\n    #  淘宝商城: http://www.taobao.com\n    #是否开启“关于我”。\n    #不开启——\n    #aboutme: false\n    #开启——\n    aboutme: true\n```\n\n查看效果\n\n更改主题之后可以使用命令`hexo server`打开本地服务，查看效果。\n\n# 部署到github\n上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。\n- 部署之前先修改`Blog/_config.yml`文件。\n\n  ```js\n    deploy:\n        type: git\n        repository: https://github.com/luckykun/luckykun.github.io.git  //luckykun替换为你自己的用户名\n        branch: master\n  ```\n\n    `备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。`\n\n- 然后使用以下命令进行部署。\n\n  ```js\n    $ hexo deploy\n  ```\n\n    `备注：如果执行上述命令报错，你可以试试下面这个命令再试。`\n\n  ```js\n    $ npm install hexo-deployer-git --save\n  ```\n\n  另外，部署的时候会提示输入github的账号和密码。由于每次部署都会提示，很烦人，也很影响效率，所以你可以试着这样做：\n  - 在系统环境变量中设置一个环境变量\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/home.png)\n\n  - 然后在你的用户目录（C:\\Users\\username）下新建一个叫 _netrc的文件，内容如下：\n\n    ```js\n    machine github.com\n    login your name\n    password xxxxxx\n    ```\n\n    然后你可以再部署试试，就不需要输入用户和密码，方便友好多了^_^\n\n部署成功后，你在浏览器中输入[luckykun.github.io](http://luckykun.github.io/)，就能看到和本地一样的效果了。\n\n# 结语\n可能会有同学发现，我除了使用了新的主题外，还加了`很多新的东西`。\n- 鼠标移动头像上会有旋转效果。\n- 给文章添加打赏功能。\n- 添加回到顶部的功能。\n- 添加总站访问量和文章阅读量\n- 添加文章目录显示\n- 添加相册功能\n- 给网站配置独立的域名\n\n\n\n其实修改这些非常简单，只要你有html、css、js的基础就可以。 思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。\n\n如果大家还有问题，欢迎留言，我会很乐意为大家解答的。\n\n好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！\n\n--------------------------------------------------------------------------------\n","slug":"heoll-hexo","published":1,"updated":"2016-10-11T15:46:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdal0008u13gulefub7c","content":"<hr>\n<p>一直都在博客园写博客，不过最近在逛园子的时候不小心看到了<code>hexo</code>,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^</p>\n<p>博客仓库地址(喜欢的朋友给个star呀，多谢～)：<a href=\"https://github.com/luckykun/luckykun.github.io\" target=\"_blank\" rel=\"external\">博客仓库点这里</a></p>\n<p>为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">new</span>(n) xxx    <span class=\"comment\">//写文章</span></div><div class=\"line\">$ hexo clean     <span class=\"comment\">//清除缓存</span></div><div class=\"line\">$ hexo generate(g)    <span class=\"comment\">//把文章生成页面</span></div><div class=\"line\">$ hexo server(s)    <span class=\"comment\">//启动本地服务调试</span></div><div class=\"line\">$ hexo deploy(d)    <span class=\"comment\">//部署到github 可与hexo g合并为 hexo d -g</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>折腾了大半天，终于搭建好了自己的博客。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。</p>\n<ul>\n<li><code>备注1：如果喜欢以官方教程为主的，点这里</code><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">hexo官方文档</a>。</li>\n<li><code>备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。</code></li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>安装node</li>\n<li>到<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a>官网下载相应平台的最新版本，一路安装即可。</li>\n<li>安装git</li>\n<li>根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:</li>\n<li><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png\" alt=\"\"></li>\n<li><p>安装hexo</p>\n<p>  使用以下命令安装hexo到全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo</div></pre></td></tr></table></figure>\n<p>  然后输入命令<code>hexo -v</code>输入hexo的版本号即为安装成功。</p>\n</li>\n<li><p>github准备</p>\n<ul>\n<li>博客是在<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>上托管维护的，所以当然需要一个github的账号了。然后创建一个名为<code>luckykun.github.io</code>的仓库。</li>\n<li>其中’luckykun’是我的账户名，下文同理。</li>\n<li><p>除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">git config --global user.email xxx@<span class=\"number\">163.</span>com</div><div class=\"line\">git config --global user.name xxx</div><div class=\"line\">ssh-keygen -t rsa -C xxx@<span class=\"number\">163.</span>com(邮箱地址)      <span class=\"comment\">// 生成ssh</span></div><div class=\"line\">找到.ssh文件夹打开，使用cat id_rsa.pub    <span class=\"comment\">//打开公钥ssh串</span></div><div class=\"line\">登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>ok，环境都准备好了，开始激动人心的步骤了，搭建博客。</p>\n<p>在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<h1 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h1><p>初始化完成之后，就已经生成一篇”hello word”的文章了，现在执行以下命令把文章编译为静态页面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<h1 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h1><p>把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>查看生成的页面效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>如果你看到了下面这个画面，恭喜你，你成功了！ <img src=\"https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png\" alt=\"\"></p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>上面的博客效果是hexo自己默认的主题<code>landscape</code>，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">yilia</a>，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~</p>\n<p>下面贴出github上star数量最多的前10个主题：</p>\n<ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">iissnan/hexo-theme-next</a>， 3510个star。</li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">litten/hexo-theme-yilia</a>， 1703个star。</li>\n<li><a href=\"https://github.com/TryGhost/Casper\" target=\"_blank\" rel=\"external\">TryGhost/Casper</a>， 679个star。</li>\n<li><a href=\"https://github.com/wuchong/jacman\" target=\"_blank\" rel=\"external\">wuchong/jacman</a>， 503个star。</li>\n<li><a href=\"https://github.com/A-limon/pacman\" target=\"_blank\" rel=\"external\">A-limon/pacman</a>， 431个star。</li>\n<li><a href=\"https://github.com/daleanthony/uno\" target=\"_blank\" rel=\"external\">daleanthony/uno</a>， 416个star。</li>\n<li><a href=\"https://github.com/orderedlist/modernist\" target=\"_blank\" rel=\"external\">orderedlist/modernist</a>， 367个star。</li>\n<li><a href=\"https://github.com/presscustomizr/hueman\" target=\"_blank\" rel=\"external\">AlxMedia/hueman</a>， 336个star。</li>\n<li><a href=\"https://github.com/kathyqian/crisp-ghost-theme\" target=\"_blank\" rel=\"external\">kathyqian/crisp-ghost-theme</a>， 303个star。</li>\n<li><a href=\"https://github.com/xiangming/landscape-plus\" target=\"_blank\" rel=\"external\">xiangming/landscape-plus</a>， 287个star。</li>\n</ul>\n<p>clone主题代码</p>\n<p>在目录下执行下面的命令clone主题代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git clone https:<span class=\"comment\">//github.com/litten/hexo-theme-yilia.git themes/yilia</span></div></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<p><code>温馨提示：修改的时候，每个冒号后面都需要留一个英文空格，不然会出现很蛋疼的报错！</code></p>\n<p>修改<code>Blog/_config.yml</code>文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">theme: yilia    <span class=\"comment\">//默认为landscape</span></div></pre></td></tr></table></figure>\n<p>修改<code>themes/yilia/_config.yml</code>文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\"># Header</div><div class=\"line\">menu:</div><div class=\"line\">    主页: /</div><div class=\"line\">    所有文章: /archives</div><div class=\"line\">    丝茉茉: /categories/simomo/</div><div class=\"line\">    相册: /photos</div><div class=\"line\"># SubNav</div><div class=\"line\">subnav:</div><div class=\"line\">    github: \"https://github.com/luckykun\"</div><div class=\"line\">     weibo: \"http://weibo.com/u/2732624311\"</div><div class=\"line\">    zhihu: \"#\"</div><div class=\"line\">    rss: /atom.xml</div><div class=\"line\"># Content</div><div class=\"line\">excerpt_link: 阅读全文</div><div class=\"line\">fancybox: true</div><div class=\"line\">mathjax: true</div><div class=\"line\">top: true</div><div class=\"line\"># 是否开启动画效果</div><div class=\"line\">animate: true</div><div class=\"line\"># 是否在新窗口打开链接</div><div class=\"line\">open_in_new: false</div><div class=\"line\"># Miscellaneous</div><div class=\"line\">google_analytics: ''</div><div class=\"line\">favicon: /favicon.ico</div><div class=\"line\">#你的头像url</div><div class=\"line\">avatar: /img.png</div><div class=\"line\">#是否开启分享</div><div class=\"line\">share_jia: true</div><div class=\"line\">share_addthis: false</div><div class=\"line\">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</div><div class=\"line\">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</div><div class=\"line\">duoshuo: jarson7426</div><div class=\"line\">#是否开启云标签</div><div class=\"line\">tagcloud: true</div><div class=\"line\">#是否开启友情链接</div><div class=\"line\">#不开启——</div><div class=\"line\">friends: false</div><div class=\"line\">#开启——</div><div class=\"line\">#friends:</div><div class=\"line\">#  百度一下: http://www.baidu.com</div><div class=\"line\">#  淘宝商城: http://www.taobao.com</div><div class=\"line\">#是否开启“关于我”。</div><div class=\"line\">#不开启——</div><div class=\"line\">#aboutme: false</div><div class=\"line\">#开启——</div><div class=\"line\">aboutme: true</div></pre></td></tr></table></figure>\n<p>查看效果</p>\n<p>更改主题之后可以使用命令<code>hexo server</code>打开本地服务，查看效果。</p>\n<h1 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h1><p>上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。</p>\n<ul>\n<li><p>部署之前先修改<code>Blog/_config.yml</code>文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    type: git</div><div class=\"line\">    repository: https:<span class=\"comment\">//github.com/luckykun/luckykun.github.io.git  //luckykun替换为你自己的用户名</span></div><div class=\"line\">    branch: master</div></pre></td></tr></table></figure>\n<p>  <code>备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。</code></p>\n</li>\n<li><p>然后使用以下命令进行部署。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>  <code>备注：如果执行上述命令报错，你可以试试下面这个命令再试。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>另外，部署的时候会提示输入github的账号和密码。由于每次部署都会提示，很烦人，也很影响效率，所以你可以试着这样做：</p>\n<ul>\n<li><p>在系统环境变量中设置一个环境变量</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/home.png\" alt=\"\"></p>\n</li>\n<li><p>然后在你的用户目录（C:\\Users\\username）下新建一个叫 _netrc的文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">machine github.com</div><div class=\"line\">login your name</div><div class=\"line\">password xxxxxx</div></pre></td></tr></table></figure>\n<p>然后你可以再部署试试，就不需要输入用户和密码，方便友好多了^_^</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>部署成功后，你在浏览器中输入<a href=\"http://luckykun.github.io/\" target=\"_blank\" rel=\"external\">luckykun.github.io</a>，就能看到和本地一样的效果了。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可能会有同学发现，我除了使用了新的主题外，还加了<code>很多新的东西</code>。</p>\n<ul>\n<li>鼠标移动头像上会有旋转效果。</li>\n<li>给文章添加打赏功能。</li>\n<li>添加回到顶部的功能。</li>\n<li>添加总站访问量和文章阅读量</li>\n<li>添加文章目录显示</li>\n<li>添加相册功能</li>\n<li>给网站配置独立的域名</li>\n</ul>\n<p>其实修改这些非常简单，只要你有html、css、js的基础就可以。 思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。</p>\n<p>如果大家还有问题，欢迎留言，我会很乐意为大家解答的。</p>\n<p>好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！</p>\n<hr>\n","excerpt":"<hr>\n<p>一直都在博客园写博客，不过最近在逛园子的时候不小心看到了<code>hexo</code>,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^</p>\n<p>博客仓库地址(喜欢的朋友给个star呀，多谢～)：<a href=\"https://github.com/luckykun/luckykun.github.io\">博客仓库点这里</a></p>\n<p>为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">new</span>(n) xxx    <span class=\"comment\">//写文章</span></div><div class=\"line\">$ hexo clean     <span class=\"comment\">//清除缓存</span></div><div class=\"line\">$ hexo generate(g)    <span class=\"comment\">//把文章生成页面</span></div><div class=\"line\">$ hexo server(s)    <span class=\"comment\">//启动本地服务调试</span></div><div class=\"line\">$ hexo deploy(d)    <span class=\"comment\">//部署到github 可与hexo g合并为 hexo d -g</span></div></pre></td></tr></table></figure>","more":"<p>折腾了大半天，终于搭建好了自己的博客。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。</p>\n<ul>\n<li><code>备注1：如果喜欢以官方教程为主的，点这里</code><a href=\"https://hexo.io/zh-cn/docs/\">hexo官方文档</a>。</li>\n<li><code>备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。</code></li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>安装node</li>\n<li>到<a href=\"http://nodejs.org/\">Node.js</a>官网下载相应平台的最新版本，一路安装即可。</li>\n<li>安装git</li>\n<li>根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:</li>\n<li><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png\" alt=\"\"></li>\n<li><p>安装hexo</p>\n<p>  使用以下命令安装hexo到全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo</div></pre></td></tr></table></figure>\n<p>  然后输入命令<code>hexo -v</code>输入hexo的版本号即为安装成功。</p>\n</li>\n<li><p>github准备</p>\n<ul>\n<li>博客是在<a href=\"https://github.com/\">github</a>上托管维护的，所以当然需要一个github的账号了。然后创建一个名为<code>luckykun.github.io</code>的仓库。</li>\n<li>其中’luckykun’是我的账户名，下文同理。</li>\n<li><p>除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">git config --global user.email xxx@<span class=\"number\">163.</span>com</div><div class=\"line\">git config --global user.name xxx</div><div class=\"line\">ssh-keygen -t rsa -C xxx@<span class=\"number\">163.</span>com(邮箱地址)      <span class=\"comment\">// 生成ssh</span></div><div class=\"line\">找到.ssh文件夹打开，使用cat id_rsa.pub    <span class=\"comment\">//打开公钥ssh串</span></div><div class=\"line\">登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>ok，环境都准备好了，开始激动人心的步骤了，搭建博客。</p>\n<p>在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<h1 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h1><p>初始化完成之后，就已经生成一篇”hello word”的文章了，现在执行以下命令把文章编译为静态页面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<h1 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h1><p>把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入<a href=\"http://localhost:4000/\">http://localhost:4000/</a>查看生成的页面效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>如果你看到了下面这个画面，恭喜你，你成功了！ <img src=\"https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png\" alt=\"\"></p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>上面的博客效果是hexo自己默认的主题<code>landscape</code>，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia</a>，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~</p>\n<p>下面贴出github上star数量最多的前10个主题：</p>\n<ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">iissnan/hexo-theme-next</a>， 3510个star。</li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\">litten/hexo-theme-yilia</a>， 1703个star。</li>\n<li><a href=\"https://github.com/TryGhost/Casper\">TryGhost/Casper</a>， 679个star。</li>\n<li><a href=\"https://github.com/wuchong/jacman\">wuchong/jacman</a>， 503个star。</li>\n<li><a href=\"https://github.com/A-limon/pacman\">A-limon/pacman</a>， 431个star。</li>\n<li><a href=\"https://github.com/daleanthony/uno\">daleanthony/uno</a>， 416个star。</li>\n<li><a href=\"https://github.com/orderedlist/modernist\">orderedlist/modernist</a>， 367个star。</li>\n<li><a href=\"https://github.com/presscustomizr/hueman\">AlxMedia/hueman</a>， 336个star。</li>\n<li><a href=\"https://github.com/kathyqian/crisp-ghost-theme\">kathyqian/crisp-ghost-theme</a>， 303个star。</li>\n<li><a href=\"https://github.com/xiangming/landscape-plus\">xiangming/landscape-plus</a>， 287个star。</li>\n</ul>\n<p>clone主题代码</p>\n<p>在目录下执行下面的命令clone主题代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git clone https:<span class=\"comment\">//github.com/litten/hexo-theme-yilia.git themes/yilia</span></div></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<p><code>温馨提示：修改的时候，每个冒号后面都需要留一个英文空格，不然会出现很蛋疼的报错！</code></p>\n<p>修改<code>Blog/_config.yml</code>文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">theme: yilia    <span class=\"comment\">//默认为landscape</span></div></pre></td></tr></table></figure>\n<p>修改<code>themes/yilia/_config.yml</code>文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\"># Header</div><div class=\"line\">menu:</div><div class=\"line\">    主页: /</div><div class=\"line\">    所有文章: /archives</div><div class=\"line\">    丝茉茉: /categories/simomo/</div><div class=\"line\">    相册: /photos</div><div class=\"line\"># SubNav</div><div class=\"line\">subnav:</div><div class=\"line\">    github: \"https://github.com/luckykun\"</div><div class=\"line\">     weibo: \"http://weibo.com/u/2732624311\"</div><div class=\"line\">    zhihu: \"#\"</div><div class=\"line\">    rss: /atom.xml</div><div class=\"line\"># Content</div><div class=\"line\">excerpt_link: 阅读全文</div><div class=\"line\">fancybox: true</div><div class=\"line\">mathjax: true</div><div class=\"line\">top: true</div><div class=\"line\"># 是否开启动画效果</div><div class=\"line\">animate: true</div><div class=\"line\"># 是否在新窗口打开链接</div><div class=\"line\">open_in_new: false</div><div class=\"line\"># Miscellaneous</div><div class=\"line\">google_analytics: ''</div><div class=\"line\">favicon: /favicon.ico</div><div class=\"line\">#你的头像url</div><div class=\"line\">avatar: /img.png</div><div class=\"line\">#是否开启分享</div><div class=\"line\">share_jia: true</div><div class=\"line\">share_addthis: false</div><div class=\"line\">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</div><div class=\"line\">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</div><div class=\"line\">duoshuo: jarson7426</div><div class=\"line\">#是否开启云标签</div><div class=\"line\">tagcloud: true</div><div class=\"line\">#是否开启友情链接</div><div class=\"line\">#不开启——</div><div class=\"line\">friends: false</div><div class=\"line\">#开启——</div><div class=\"line\">#friends:</div><div class=\"line\">#  百度一下: http://www.baidu.com</div><div class=\"line\">#  淘宝商城: http://www.taobao.com</div><div class=\"line\">#是否开启“关于我”。</div><div class=\"line\">#不开启——</div><div class=\"line\">#aboutme: false</div><div class=\"line\">#开启——</div><div class=\"line\">aboutme: true</div></pre></td></tr></table></figure>\n<p>查看效果</p>\n<p>更改主题之后可以使用命令<code>hexo server</code>打开本地服务，查看效果。</p>\n<h1 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h1><p>上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。</p>\n<ul>\n<li><p>部署之前先修改<code>Blog/_config.yml</code>文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    type: git</div><div class=\"line\">    repository: https:<span class=\"comment\">//github.com/luckykun/luckykun.github.io.git  //luckykun替换为你自己的用户名</span></div><div class=\"line\">    branch: master</div></pre></td></tr></table></figure>\n<p>  <code>备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。</code></p>\n</li>\n<li><p>然后使用以下命令进行部署。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>  <code>备注：如果执行上述命令报错，你可以试试下面这个命令再试。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>另外，部署的时候会提示输入github的账号和密码。由于每次部署都会提示，很烦人，也很影响效率，所以你可以试着这样做：</p>\n<ul>\n<li><p>在系统环境变量中设置一个环境变量</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/home.png\" alt=\"\"></p>\n</li>\n<li><p>然后在你的用户目录（C:\\Users\\username）下新建一个叫 _netrc的文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">machine github.com</div><div class=\"line\">login your name</div><div class=\"line\">password xxxxxx</div></pre></td></tr></table></figure>\n<p>然后你可以再部署试试，就不需要输入用户和密码，方便友好多了^_^</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>部署成功后，你在浏览器中输入<a href=\"http://luckykun.github.io/\">luckykun.github.io</a>，就能看到和本地一样的效果了。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可能会有同学发现，我除了使用了新的主题外，还加了<code>很多新的东西</code>。</p>\n<ul>\n<li>鼠标移动头像上会有旋转效果。</li>\n<li>给文章添加打赏功能。</li>\n<li>添加回到顶部的功能。</li>\n<li>添加总站访问量和文章阅读量</li>\n<li>添加文章目录显示</li>\n<li>添加相册功能</li>\n<li>给网站配置独立的域名</li>\n</ul>\n<p>其实修改这些非常简单，只要你有html、css、js的基础就可以。 思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。</p>\n<p>如果大家还有问题，欢迎留言，我会很乐意为大家解答的。</p>\n<p>好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！</p>\n<hr>"},{"title":"两种文件上传的实现－Ajax上传和form+iframe","date":"2016-08-16T11:41:57.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n# 前言\n话说现在很多很多项目需要用到文件上传，自从有了HTML5之后，上传就变的超级简单了。HTML5支持多图片上传，而且支持ajax上传！而且支持上传之前图片的预览！而且支持图片拖拽上传！而且还是纯粹利用file控件实现！而且代码还超级简单！！！原谅我这个没见过世面的人这么激动==，但是说真的，有这么多优点，想不让人称赞都难啊！\n\n<!--more-->\n\n# HTML5 Ajax上传\nhtml5的上传实现，是需要file控件以及XMLHttpRequest请求。下面是我使用原生js封装的一个上传插件：\n\n```js\n    function fileUpload(options) {\n        var opts = options || {};\n        var func = function() {};\n        this.fileInput = opts.fileInput || null;\n        this.url = opts.url || '';\n        this.fileList = [];\n        this.onFilter = opts.onFilter || function(f) {return f;};        //选择文件组的过滤方法\n        this.onSelect = opts.onSelect || func;            //文件选择后\n        this.onProgress = opts.onProgress || func;        //文件上传进度\n        this.onSuccess = opts.onSuccess || func;        //文件上传成功时\n        this.onFailure = opts.onFailure || func;        //文件上传失败时;\n        this.onComplete = opts.onComplete || func;        //文件全部上传完毕时\n        this.init();\n    }\n    fileUpload.prototype = {\n        dealFiles: function(e) {     //获取要上传的文件数组（用户选择文件后执行）\n            var files = e.target.files || e.dataTransfer.files;\n            this.fileList = this.onFilter(files);\n            for(var i = 0, file; file = this.fileList[i]; i++){   //增加唯一索引值\n                file.index = i;\n            }\n            this.onSelect(this.fileList);\n            return this;\n        },\n        removeFile: function(fileDelete) {     //删除某一个文件\n            var arrFile = [];\n            for(var i = 0, file; file = this.fileList[i]; i++){\n                if (file != fileDelete) {\n                    arrFile.push(file);\n                }\n            }\n            this.fileList = arrFile;\n            return this;\n        },\n        removeAll: function() {     //清空文件队列\n            this.fileList = [];\n            return this;\n        },\n        uploadFile: function() {     //上传文件\n            var me = this;\n            for(var i = 0, file; file = this.fileList[i]; i++){\n                (function(file) {\n                    var formData = new FormData();\n                    var xhr = new XMLHttpRequest();\n                    if (xhr.upload) {\n                        xhr.upload.addEventListener(\"progress\", function(e) {   // 上传中\n                            me.onProgress(file, e.loaded, e.total);\n                        }, false);\n                        xhr.onreadystatechange = function(e) {      // 文件上传成功或是失败\n                            if (xhr.readyState == 4) {\n                                if (xhr.status == 200) {\n                                    me.onSuccess(file, xhr.responseText);\n                                    me.removeFile(file);\n                                    if (!me.fileList.length) {\n                                        me.onComplete();   //上传全部完毕。执行回调\n                                    }\n                                } else {\n                                    me.onFailure(file, xhr.responseText);\n                                }\n                            }\n                        };\n                        // 开始上传\n                        formData.append('file', file);\n                        xhr.open(\"POST\", me.url, true);\n                        xhr.send(formData);\n                    }\n                })(file);\n            }\n        },\n        init: function() {\n            var me = this;\n            //文件选择控件选择\n            if (me.fileInput) {\n                me.fileInput.addEventListener(\"change\", function(e) { me.dealFiles(e); }, false);\n            }\n        }\n    };\n```\n\n相信大家也看到了，代码中出现了`FormData`,这就是html5的神奇之处了。借助FormData轻松实现异步无刷新支持预览图片的多文件上传功能。而且，令人欣慰的是，现在已经有很多浏览器都已经支持HTML5了。\n\n但是！！！IE9以下的版本不支持呀！！\n\n除此之外，上面的方法还有一个弊端，因为使用了ajax的上传方式，所以不能支持跨域上传，如果必须要满足这两个业务场景，那就试试下面的方法吧，借助form和iframe来实现上传。下面来详细看一下：\n\n# form表单提交到iframe\nhtml代码:\n\n```js\n    <iframe name=\"demoIframe\" style=\"display:none\"></iframe>\n    <form target=\"demoIframe\" action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\n        <input class=\"filename\" type=\"file\" name=\"fileLabel\">\n        <input type=\"submit\" value=\"提交\">\n    </form>\n```\n\n我们点击提交,可以看到下面的请求：\n\n![](https://img.alicdn.com/tps/TB1DHQaMpXXXXcaXVXXXXXXXXXX-794-199.png)\n\n已经把文件上传。那么，加入这个upload.php接口可用，而且假如上传成功后，会返回：\n\n```js\n{\n    \"code\": \"200\",\n    \"success\": true,\n    \"data\": {\n        ...\n    }\n}\n```\n\n我们要怎么去获取返回值，从而进行下一步的操作呢？因为我们是上传到了iframe中，所以我们只需要监听iframe的load事件，如果有返回值了，我们就能获取到，从而进行进一步处理。看js代码：\n\n```js\n$('iframe').on('load', function() {\n    var responseText = $('iframe')[0].contentDocument.body.textContent;\n    var responseData = JSON.parse(responseText) || {};\n    if (responseData.isSuccess == true || responseData.code == 200) {\n        //success\n    } else {\n        //error   \n    }\n});\n```\n\n这样我们就完成了一个支持所有浏览器的上传文件操作了。还是很简单的吧^_^\n\n# 结语\n\n以上两种方法就可以上实现所有场景下的文件上传需求了。第一种方法便于理解，代码简单，便于理解，但是IE9及以上才支持；第二种方法是很原始的方法，支持所有浏览器，但是代码稍显复杂，看官们可以根据自己的业务需求来选择不同的方案。本文结束，谢谢大家！\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/file-upload.md","raw":"---\ntitle: 两种文件上传的实现－Ajax上传和form+iframe\ndate: 2016-08-16T19:41:57.000Z\ncategories: 工作\ntags:\n  - 文件上传\n  - javascript\n  - ajax\n  - 干货总结\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n# 前言\n话说现在很多很多项目需要用到文件上传，自从有了HTML5之后，上传就变的超级简单了。HTML5支持多图片上传，而且支持ajax上传！而且支持上传之前图片的预览！而且支持图片拖拽上传！而且还是纯粹利用file控件实现！而且代码还超级简单！！！原谅我这个没见过世面的人这么激动==，但是说真的，有这么多优点，想不让人称赞都难啊！\n\n<!--more-->\n\n# HTML5 Ajax上传\nhtml5的上传实现，是需要file控件以及XMLHttpRequest请求。下面是我使用原生js封装的一个上传插件：\n\n```js\n    function fileUpload(options) {\n        var opts = options || {};\n        var func = function() {};\n        this.fileInput = opts.fileInput || null;\n        this.url = opts.url || '';\n        this.fileList = [];\n        this.onFilter = opts.onFilter || function(f) {return f;};        //选择文件组的过滤方法\n        this.onSelect = opts.onSelect || func;            //文件选择后\n        this.onProgress = opts.onProgress || func;        //文件上传进度\n        this.onSuccess = opts.onSuccess || func;        //文件上传成功时\n        this.onFailure = opts.onFailure || func;        //文件上传失败时;\n        this.onComplete = opts.onComplete || func;        //文件全部上传完毕时\n        this.init();\n    }\n    fileUpload.prototype = {\n        dealFiles: function(e) {     //获取要上传的文件数组（用户选择文件后执行）\n            var files = e.target.files || e.dataTransfer.files;\n            this.fileList = this.onFilter(files);\n            for(var i = 0, file; file = this.fileList[i]; i++){   //增加唯一索引值\n                file.index = i;\n            }\n            this.onSelect(this.fileList);\n            return this;\n        },\n        removeFile: function(fileDelete) {     //删除某一个文件\n            var arrFile = [];\n            for(var i = 0, file; file = this.fileList[i]; i++){\n                if (file != fileDelete) {\n                    arrFile.push(file);\n                }\n            }\n            this.fileList = arrFile;\n            return this;\n        },\n        removeAll: function() {     //清空文件队列\n            this.fileList = [];\n            return this;\n        },\n        uploadFile: function() {     //上传文件\n            var me = this;\n            for(var i = 0, file; file = this.fileList[i]; i++){\n                (function(file) {\n                    var formData = new FormData();\n                    var xhr = new XMLHttpRequest();\n                    if (xhr.upload) {\n                        xhr.upload.addEventListener(\"progress\", function(e) {   // 上传中\n                            me.onProgress(file, e.loaded, e.total);\n                        }, false);\n                        xhr.onreadystatechange = function(e) {      // 文件上传成功或是失败\n                            if (xhr.readyState == 4) {\n                                if (xhr.status == 200) {\n                                    me.onSuccess(file, xhr.responseText);\n                                    me.removeFile(file);\n                                    if (!me.fileList.length) {\n                                        me.onComplete();   //上传全部完毕。执行回调\n                                    }\n                                } else {\n                                    me.onFailure(file, xhr.responseText);\n                                }\n                            }\n                        };\n                        // 开始上传\n                        formData.append('file', file);\n                        xhr.open(\"POST\", me.url, true);\n                        xhr.send(formData);\n                    }\n                })(file);\n            }\n        },\n        init: function() {\n            var me = this;\n            //文件选择控件选择\n            if (me.fileInput) {\n                me.fileInput.addEventListener(\"change\", function(e) { me.dealFiles(e); }, false);\n            }\n        }\n    };\n```\n\n相信大家也看到了，代码中出现了`FormData`,这就是html5的神奇之处了。借助FormData轻松实现异步无刷新支持预览图片的多文件上传功能。而且，令人欣慰的是，现在已经有很多浏览器都已经支持HTML5了。\n\n但是！！！IE9以下的版本不支持呀！！\n\n除此之外，上面的方法还有一个弊端，因为使用了ajax的上传方式，所以不能支持跨域上传，如果必须要满足这两个业务场景，那就试试下面的方法吧，借助form和iframe来实现上传。下面来详细看一下：\n\n# form表单提交到iframe\nhtml代码:\n\n```js\n    <iframe name=\"demoIframe\" style=\"display:none\"></iframe>\n    <form target=\"demoIframe\" action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\n        <input class=\"filename\" type=\"file\" name=\"fileLabel\">\n        <input type=\"submit\" value=\"提交\">\n    </form>\n```\n\n我们点击提交,可以看到下面的请求：\n\n![](https://img.alicdn.com/tps/TB1DHQaMpXXXXcaXVXXXXXXXXXX-794-199.png)\n\n已经把文件上传。那么，加入这个upload.php接口可用，而且假如上传成功后，会返回：\n\n```js\n{\n    \"code\": \"200\",\n    \"success\": true,\n    \"data\": {\n        ...\n    }\n}\n```\n\n我们要怎么去获取返回值，从而进行下一步的操作呢？因为我们是上传到了iframe中，所以我们只需要监听iframe的load事件，如果有返回值了，我们就能获取到，从而进行进一步处理。看js代码：\n\n```js\n$('iframe').on('load', function() {\n    var responseText = $('iframe')[0].contentDocument.body.textContent;\n    var responseData = JSON.parse(responseText) || {};\n    if (responseData.isSuccess == true || responseData.code == 200) {\n        //success\n    } else {\n        //error   \n    }\n});\n```\n\n这样我们就完成了一个支持所有浏览器的上传文件操作了。还是很简单的吧^_^\n\n# 结语\n\n以上两种方法就可以上实现所有场景下的文件上传需求了。第一种方法便于理解，代码简单，便于理解，但是IE9及以上才支持；第二种方法是很原始的方法，支持所有浏览器，但是代码稍显复杂，看官们可以根据自己的业务需求来选择不同的方案。本文结束，谢谢大家！\n\n\n--------------------------------------------------------------------------------\n","slug":"file-upload","published":1,"updated":"2016-10-11T16:28:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdao0009u13guvme1t9d","content":"<hr>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>话说现在很多很多项目需要用到文件上传，自从有了HTML5之后，上传就变的超级简单了。HTML5支持多图片上传，而且支持ajax上传！而且支持上传之前图片的预览！而且支持图片拖拽上传！而且还是纯粹利用file控件实现！而且代码还超级简单！！！原谅我这个没见过世面的人这么激动==，但是说真的，有这么多优点，想不让人称赞都难啊！</p>\n<a id=\"more\"></a>\n<h1 id=\"HTML5-Ajax上传\"><a href=\"#HTML5-Ajax上传\" class=\"headerlink\" title=\"HTML5 Ajax上传\"></a>HTML5 Ajax上传</h1><p>html5的上传实现，是需要file控件以及XMLHttpRequest请求。下面是我使用原生js封装的一个上传插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileUpload</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> opts = options || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.fileInput = opts.fileInput || <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.url = opts.url || <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.fileList = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.onFilter = opts.onFilter || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;<span class=\"keyword\">return</span> f;&#125;;        <span class=\"comment\">//选择文件组的过滤方法</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onSelect = opts.onSelect || func;            <span class=\"comment\">//文件选择后</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onProgress = opts.onProgress || func;        <span class=\"comment\">//文件上传进度</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onSuccess = opts.onSuccess || func;        <span class=\"comment\">//文件上传成功时</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onFailure = opts.onFailure || func;        <span class=\"comment\">//文件上传失败时;</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onComplete = opts.onComplete || func;        <span class=\"comment\">//文件全部上传完毕时</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.init();</div><div class=\"line\">&#125;</div><div class=\"line\">fileUpload.prototype = &#123;</div><div class=\"line\">    dealFiles: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;     <span class=\"comment\">//获取要上传的文件数组（用户选择文件后执行）</span></div><div class=\"line\">        <span class=\"keyword\">var</span> files = e.target.files || e.dataTransfer.files;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fileList = <span class=\"keyword\">this</span>.onFilter(files);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, file; file = <span class=\"keyword\">this</span>.fileList[i]; i++)&#123;   <span class=\"comment\">//增加唯一索引值</span></div><div class=\"line\">            file.index = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onSelect(<span class=\"keyword\">this</span>.fileList);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeFile: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileDelete</span>) </span>&#123;     <span class=\"comment\">//删除某一个文件</span></div><div class=\"line\">        <span class=\"keyword\">var</span> arrFile = [];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, file; file = <span class=\"keyword\">this</span>.fileList[i]; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (file != fileDelete) &#123;</div><div class=\"line\">                arrFile.push(file);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fileList = arrFile;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeAll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">//清空文件队列</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.fileList = [];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    uploadFile: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">//上传文件</span></div><div class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, file; file = <span class=\"keyword\">this</span>.fileList[i]; i++)&#123;</div><div class=\"line\">            (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">                <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">                <span class=\"keyword\">if</span> (xhr.upload) &#123;</div><div class=\"line\">                    xhr.upload.addEventListener(<span class=\"string\">\"progress\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;   <span class=\"comment\">// 上传中</span></div><div class=\"line\">                        me.onProgress(file, e.loaded, e.total);</div><div class=\"line\">                    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">                    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;      <span class=\"comment\">// 文件上传成功或是失败</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                                me.onSuccess(file, xhr.responseText);</div><div class=\"line\">                                me.removeFile(file);</div><div class=\"line\">                                <span class=\"keyword\">if</span> (!me.fileList.length) &#123;</div><div class=\"line\">                                    me.onComplete();   <span class=\"comment\">//上传全部完毕。执行回调</span></div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                                me.onFailure(file, xhr.responseText);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;;</div><div class=\"line\">                    <span class=\"comment\">// 开始上传</span></div><div class=\"line\">                    formData.append(<span class=\"string\">'file'</span>, file);</div><div class=\"line\">                    xhr.open(<span class=\"string\">\"POST\"</span>, me.url, <span class=\"literal\">true</span>);</div><div class=\"line\">                    xhr.send(formData);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)(file);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"comment\">//文件选择控件选择</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (me.fileInput) &#123;</div><div class=\"line\">            me.fileInput.addEventListener(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; me.dealFiles(e); &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>相信大家也看到了，代码中出现了<code>FormData</code>,这就是html5的神奇之处了。借助FormData轻松实现异步无刷新支持预览图片的多文件上传功能。而且，令人欣慰的是，现在已经有很多浏览器都已经支持HTML5了。</p>\n<p>但是！！！IE9以下的版本不支持呀！！</p>\n<p>除此之外，上面的方法还有一个弊端，因为使用了ajax的上传方式，所以不能支持跨域上传，如果必须要满足这两个业务场景，那就试试下面的方法吧，借助form和iframe来实现上传。下面来详细看一下：</p>\n<h1 id=\"form表单提交到iframe\"><a href=\"#form表单提交到iframe\" class=\"headerlink\" title=\"form表单提交到iframe\"></a>form表单提交到iframe</h1><p>html代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;iframe name=<span class=\"string\">\"demoIframe\"</span> style=<span class=\"string\">\"display:none\"</span>&gt;&lt;/iframe&gt;</div><div class=\"line\">&lt;form target=<span class=\"string\">\"demoIframe\"</span> action=<span class=\"string\">\"upload.php\"</span> method=<span class=\"string\">\"post\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;</div><div class=\"line\">    &lt;input class=\"filename\" type=\"file\" name=\"fileLabel\"&gt;</div><div class=\"line\">    &lt;input type=\"submit\" value=\"提交\"&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>我们点击提交,可以看到下面的请求：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1DHQaMpXXXXcaXVXXXXXXXXXX-794-199.png\" alt=\"\"></p>\n<p>已经把文件上传。那么，加入这个upload.php接口可用，而且假如上传成功后，会返回：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"code\"</span>: <span class=\"string\">\"200\"</span>,</div><div class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要怎么去获取返回值，从而进行下一步的操作呢？因为我们是上传到了iframe中，所以我们只需要监听iframe的load事件，如果有返回值了，我们就能获取到，从而进行进一步处理。看js代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'iframe'</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> responseText = $(<span class=\"string\">'iframe'</span>)[<span class=\"number\">0</span>].contentDocument.body.textContent;</div><div class=\"line\">    <span class=\"keyword\">var</span> responseData = <span class=\"built_in\">JSON</span>.parse(responseText) || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (responseData.isSuccess == <span class=\"literal\">true</span> || responseData.code == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//success</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//error   </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这样我们就完成了一个支持所有浏览器的上传文件操作了。还是很简单的吧^_^</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>以上两种方法就可以上实现所有场景下的文件上传需求了。第一种方法便于理解，代码简单，便于理解，但是IE9及以上才支持；第二种方法是很原始的方法，支持所有浏览器，但是代码稍显复杂，看官们可以根据自己的业务需求来选择不同的方案。本文结束，谢谢大家！</p>\n<hr>\n","excerpt":"<hr>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>话说现在很多很多项目需要用到文件上传，自从有了HTML5之后，上传就变的超级简单了。HTML5支持多图片上传，而且支持ajax上传！而且支持上传之前图片的预览！而且支持图片拖拽上传！而且还是纯粹利用file控件实现！而且代码还超级简单！！！原谅我这个没见过世面的人这么激动==，但是说真的，有这么多优点，想不让人称赞都难啊！</p>","more":"<h1 id=\"HTML5-Ajax上传\"><a href=\"#HTML5-Ajax上传\" class=\"headerlink\" title=\"HTML5 Ajax上传\"></a>HTML5 Ajax上传</h1><p>html5的上传实现，是需要file控件以及XMLHttpRequest请求。下面是我使用原生js封装的一个上传插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileUpload</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> opts = options || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.fileInput = opts.fileInput || <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.url = opts.url || <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.fileList = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.onFilter = opts.onFilter || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;<span class=\"keyword\">return</span> f;&#125;;        <span class=\"comment\">//选择文件组的过滤方法</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onSelect = opts.onSelect || func;            <span class=\"comment\">//文件选择后</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onProgress = opts.onProgress || func;        <span class=\"comment\">//文件上传进度</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onSuccess = opts.onSuccess || func;        <span class=\"comment\">//文件上传成功时</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onFailure = opts.onFailure || func;        <span class=\"comment\">//文件上传失败时;</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.onComplete = opts.onComplete || func;        <span class=\"comment\">//文件全部上传完毕时</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.init();</div><div class=\"line\">&#125;</div><div class=\"line\">fileUpload.prototype = &#123;</div><div class=\"line\">    dealFiles: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;     <span class=\"comment\">//获取要上传的文件数组（用户选择文件后执行）</span></div><div class=\"line\">        <span class=\"keyword\">var</span> files = e.target.files || e.dataTransfer.files;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fileList = <span class=\"keyword\">this</span>.onFilter(files);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, file; file = <span class=\"keyword\">this</span>.fileList[i]; i++)&#123;   <span class=\"comment\">//增加唯一索引值</span></div><div class=\"line\">            file.index = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onSelect(<span class=\"keyword\">this</span>.fileList);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeFile: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fileDelete</span>) </span>&#123;     <span class=\"comment\">//删除某一个文件</span></div><div class=\"line\">        <span class=\"keyword\">var</span> arrFile = [];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, file; file = <span class=\"keyword\">this</span>.fileList[i]; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (file != fileDelete) &#123;</div><div class=\"line\">                arrFile.push(file);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fileList = arrFile;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeAll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">//清空文件队列</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.fileList = [];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    uploadFile: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">//上传文件</span></div><div class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, file; file = <span class=\"keyword\">this</span>.fileList[i]; i++)&#123;</div><div class=\"line\">            (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">                <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">                <span class=\"keyword\">if</span> (xhr.upload) &#123;</div><div class=\"line\">                    xhr.upload.addEventListener(<span class=\"string\">\"progress\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;   <span class=\"comment\">// 上传中</span></div><div class=\"line\">                        me.onProgress(file, e.loaded, e.total);</div><div class=\"line\">                    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">                    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;      <span class=\"comment\">// 文件上传成功或是失败</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                                me.onSuccess(file, xhr.responseText);</div><div class=\"line\">                                me.removeFile(file);</div><div class=\"line\">                                <span class=\"keyword\">if</span> (!me.fileList.length) &#123;</div><div class=\"line\">                                    me.onComplete();   <span class=\"comment\">//上传全部完毕。执行回调</span></div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                                me.onFailure(file, xhr.responseText);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;;</div><div class=\"line\">                    <span class=\"comment\">// 开始上传</span></div><div class=\"line\">                    formData.append(<span class=\"string\">'file'</span>, file);</div><div class=\"line\">                    xhr.open(<span class=\"string\">\"POST\"</span>, me.url, <span class=\"literal\">true</span>);</div><div class=\"line\">                    xhr.send(formData);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)(file);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"comment\">//文件选择控件选择</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (me.fileInput) &#123;</div><div class=\"line\">            me.fileInput.addEventListener(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; me.dealFiles(e); &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>相信大家也看到了，代码中出现了<code>FormData</code>,这就是html5的神奇之处了。借助FormData轻松实现异步无刷新支持预览图片的多文件上传功能。而且，令人欣慰的是，现在已经有很多浏览器都已经支持HTML5了。</p>\n<p>但是！！！IE9以下的版本不支持呀！！</p>\n<p>除此之外，上面的方法还有一个弊端，因为使用了ajax的上传方式，所以不能支持跨域上传，如果必须要满足这两个业务场景，那就试试下面的方法吧，借助form和iframe来实现上传。下面来详细看一下：</p>\n<h1 id=\"form表单提交到iframe\"><a href=\"#form表单提交到iframe\" class=\"headerlink\" title=\"form表单提交到iframe\"></a>form表单提交到iframe</h1><p>html代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;iframe name=<span class=\"string\">\"demoIframe\"</span> style=<span class=\"string\">\"display:none\"</span>&gt;&lt;/iframe&gt;</div><div class=\"line\">&lt;form target=<span class=\"string\">\"demoIframe\"</span> action=<span class=\"string\">\"upload.php\"</span> method=<span class=\"string\">\"post\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;</div><div class=\"line\">    &lt;input class=\"filename\" type=\"file\" name=\"fileLabel\"&gt;</div><div class=\"line\">    &lt;input type=\"submit\" value=\"提交\"&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>我们点击提交,可以看到下面的请求：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1DHQaMpXXXXcaXVXXXXXXXXXX-794-199.png\" alt=\"\"></p>\n<p>已经把文件上传。那么，加入这个upload.php接口可用，而且假如上传成功后，会返回：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"code\"</span>: <span class=\"string\">\"200\"</span>,</div><div class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要怎么去获取返回值，从而进行下一步的操作呢？因为我们是上传到了iframe中，所以我们只需要监听iframe的load事件，如果有返回值了，我们就能获取到，从而进行进一步处理。看js代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'iframe'</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> responseText = $(<span class=\"string\">'iframe'</span>)[<span class=\"number\">0</span>].contentDocument.body.textContent;</div><div class=\"line\">    <span class=\"keyword\">var</span> responseData = <span class=\"built_in\">JSON</span>.parse(responseText) || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (responseData.isSuccess == <span class=\"literal\">true</span> || responseData.code == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//success</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//error   </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这样我们就完成了一个支持所有浏览器的上传文件操作了。还是很简单的吧^_^</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>以上两种方法就可以上实现所有场景下的文件上传需求了。第一种方法便于理解，代码简单，便于理解，但是IE9及以上才支持；第二种方法是很原始的方法，支持所有浏览器，但是代码稍显复杂，看官们可以根据自己的业务需求来选择不同的方案。本文结束，谢谢大家！</p>\n<hr>"},{"title":"前后端分离之前端项目构建（grunt+require+angular）","date":"2016-05-02T14:33:32.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好==，那我们到底该怎么办呢？\n\n<!--more-->\n\n可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。\n\n此时你会深深的感受到了那句名言的魅力，`时间就是金钱！`后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞`前后端分离了`！\n\n本篇文章会讲述搭建一个基于`grunt+require+angular`完整的前端项目的过程，`本项目主要在于项目结构和思路，具体功能可以在此基础上进一步开发`。最后完整的代码，你可以在Github上看到[完整代码点这里](https://github.com/luckykun/grunt-require-angular/tree/master)，喜欢的同学不妨帮我`star一下`，谢谢^_^。\n\ndown下来运行以下命令就可以直接看到效果：\n\n```js\nnpm install grunt -g\nnpm install   //安装依赖\ngrunt  //启动服务\n```\n\n最后页面上的结果是：\n\n```js\nhello, world\n```\n\n# 前后端分离的目的和作用\n\n> 要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。\n\n现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。\n\n所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。\n\n# 前端项目构建\n现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。\n\n现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。\n- grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。\n- requireJs: js库加载管理，支持按需加载，模块化引入。\n- angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。\n\n这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。\n\n## 创建项目目录\n\n```js\nmkdir myProject\ncd myProject\n```\n\n创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。\n\n## 创建package.json\n`首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。`\n\n可以用命令生成，后续也能够手动修改。\n\n```js\nnpm init\n```\n\n他会问我们一些问题，一路使用默认值，创建完毕。\n\n## 安装grunt\n\n```js\nnpm install grunt --save-dev\n```\n\n使用npm安装grunt插件，它将被安装到根目录的`node_modules`文件夹下，所有npm插件都会放到这里。\n\n`--save-dev`： 意思是安装插件的同时，也把它添加到项目信息文件`package.json`中的`devDependencies`字段里，意思是这个项目依赖于这些插件。下次使用`npm install`的时候就会自动安装这些插件。\n\n## 为grunt创建配置文件Gruntfile.js\nGruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。\n- 安装grunt-init\n\n  ```js\n    npm install grunt-init -g      //全局安装grunt-init\n  ```\n\n- 下载grunt模板\n\n  ```js\n    git clone https://github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile\n  ```\n\n- 生成Gruntfile\n\n  ```js\n    grunt-init gruntfile\n  ```\n\n    在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。\n\n## 安装bower\nbower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。\n\n同样适用npm进行安装。\n\n```js\nnpm install bower -g\n```\n\n## 为bower生成配置文件bower.json\n整个项目的信息文件是`package.json`，执行任务插件grunt的信息文件是`Gruntfile.js`，那么bower当然也有自己的信息文件了，那就是`bower.json`。\n\n```js\nbower init\n```\n\n不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。\n\n比如使用bower下载angularjs：\n\n```js\nbower install angularjs\n```\n\n这行命令将会把angular下载下来，放在根目录下的`bower_components`文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？\n\n```js\nbower install angularjs#1.2.2\n```\n\n另外，bower只负责下载文件到`bower_components`目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件`grunt-bower-task`，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。\n\n## 关于Requirejs\n官网上是这样说的：\n\n> RequireJS的目标是鼓励代码的模块化。\n\n它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。\n\n## 使用Requirejs\n`<script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>`\n\n一般在首页加载requiejs文件，然后属性`data-main`指定的文件就是接下来要加载的文件，然后我们再看`main.js`文件:\n\n```js\nrequire.config({\n    baseUrl: 'script/lib',\n    paths: {\n        app: 'app',\n        jquery: '/jquery/jquery-min',\n        angular: '/angularjs/angular-min'\n    },\n    shim: {\n        'angular': {\n            exports: 'angular'\n        }\n    }\n});\nrequire([\n    'app'\n], function(app) (\n    app.hello();\n))\n```\n\n- 我们在`paths`中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。\n- `shim`中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫`angular`的模块。\n- 最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了`app.hello()`方法。\n\n# AngularJs实例\n上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。\n\n## 目录结构\n项目文件夹结构如下图（当然目录结构因人而异）：\n\n![](https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png)\n- `node_modules`: 用来存放项目依赖的grunt插件。\n- `bower_components`: 用来存放bower下载的库。\n- `build`: 用来存放经过build处理之后的js文件。\n- `app`: 是真正的开发需要的文件。\n  - `data`: 用来存放mock数据用的json文件。\n  - `images`: 用来存放静态图片。\n  - `scripts`: 用来存放所有js文件。\n    - `controller`: 用来存放控制器文件。\n    - `directive`: 定义的指令文件。\n    - `filter`: 定义的过滤器文件。\n    - `route`: 路由文件。\n    - `service`: 服务文件。\n    - `vendor`: 公共库文件，比如angular,jquery,bootstrap等等。\n\n  - `styles`目录用来存放样式文件。\n  - `views`目录用来存放`页面`html文件。\n  - `partials`目录用来存放`页面片段`的html文件。\n\n目录创建好了，现在来写一些代码，让项目能够运行起来。\n\n## views/index.html\n\n```html\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>grunt+requirejs+angular项目构建</title>\n    <script src=\"../scripts/vendor/requirejs/require.js\" data-main=\"../scripts/config\"></script>    <!-- 先引入requirejs, 然后引入config.js -->\n</head>\n<body>\n    <div ng-controller=\"testController\">\n        {{app}}\n    </div>\n</body>\n</html>\n```\n\n上述index中，先引入了require.js，然后加载data-main对应的config.js文件。\n\n## scripts/config.js\n\n```js\nvar vendorPath = 'vendor/';\nrequire.config({    //配置模块\n    baseUrl: '../scripts/',\n    paths: {\n        'app': 'app',\n        'angular': vendorPath + 'angular/angular',\n        'jquery': vendorPath + 'jquery/jquery'\n    },\n    shim: {   //处理没有遵守requirejs规范的js库\n        'angular': {\n            exports: 'angular'\n        }\n    }\n});\nrequire(['./bootstrap'], function(bootstrap) {\n    // ...\n});\n```\n\n然后通过require引入了bootstrap.js文件。\n\n## scripts/bootstrap.js\n\n```js\ndefine([\n    'angular',\n    'app',\n    'jquery',\n    './controller/_base'\n], function(angular) {\n    // 手动将angular模块绑定到document对象\n    angular.element(document).ready(function() {\n        angular.bootstrap(document, ['myProject']);\n    });\n});\n```\n\n`注意：function的内容是requirejs引入所有文件之后的回调函数。`\n\nbootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。\n\n## scripts/app.js\n\n```js\ndefine([\n    'angular',\n    './controller/controllers'\n], function(angular) {\n    //定义将要绑定到document上的模块名称\n    return angular.module('myProject', ['projectController']);\n});\n```\n\n定义模块名`myProject`的时候，同时指定它依赖于另一个模块`projectController`。\n\n同时在`./controller/controllers.js`中定义这个模块：\n\n```js\ndefine(['angular'], function(angular) {\n    return angular.module('projectController', []);\n});\n```\n\n这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。\n\n## controller/testController.js\n如果想要让视图文件`views/index.html`能够看到效果，我们就要开始编写控制器文件了，\n\n```js\ndefine([\n    './controllers'\n], function(mod) {\n    var controllerFn = function($scope, $location) {\n        $scope.app = 'hello, world';\n    };\n    controllerFn.$inject = ['$scope', '$location'];\n    mod.controller('testController', controllerFn);\n});\n```\n\n引入控制器的单独模块文件'./controllers',然后在模块上新建一个名为`testController`的控制器，并在$scope上绑定了一个值为'hello, world'的变量`app`。\n\n## 查看效果\n使用`grunt`命令启动一个简单的web服务器（前提是边编写好了Gruntfile.js文件，可以去github上看我已经写好的源码）。在浏览器就能看到效果了。\n\n```js\nhello, world\n```\n\n注：完整的代码我已上传至github[完整代码点这里](https://github.com/luckykun/grunt-require-angular/tree/master)，喜欢的同学帮忙点个star，谢谢咯。\n\n# 结语\n现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。\n\n--------------------------------------------------------------------------------\n","source":"_posts/grunt-angular.md","raw":"---\ntitle: 前后端分离之前端项目构建（grunt+require+angular）\ndate: 2016-05-02T22:33:32.000Z\ncategories: 工作\ntags:\n  - grunt\n  - angular\n  - 构建\n  - 教程\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好==，那我们到底该怎么办呢？\n\n<!--more-->\n\n可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。\n\n此时你会深深的感受到了那句名言的魅力，`时间就是金钱！`后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞`前后端分离了`！\n\n本篇文章会讲述搭建一个基于`grunt+require+angular`完整的前端项目的过程，`本项目主要在于项目结构和思路，具体功能可以在此基础上进一步开发`。最后完整的代码，你可以在Github上看到[完整代码点这里](https://github.com/luckykun/grunt-require-angular/tree/master)，喜欢的同学不妨帮我`star一下`，谢谢^_^。\n\ndown下来运行以下命令就可以直接看到效果：\n\n```js\nnpm install grunt -g\nnpm install   //安装依赖\ngrunt  //启动服务\n```\n\n最后页面上的结果是：\n\n```js\nhello, world\n```\n\n# 前后端分离的目的和作用\n\n> 要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。\n\n现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。\n\n所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。\n\n# 前端项目构建\n现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。\n\n现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。\n- grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。\n- requireJs: js库加载管理，支持按需加载，模块化引入。\n- angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。\n\n这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。\n\n## 创建项目目录\n\n```js\nmkdir myProject\ncd myProject\n```\n\n创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。\n\n## 创建package.json\n`首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。`\n\n可以用命令生成，后续也能够手动修改。\n\n```js\nnpm init\n```\n\n他会问我们一些问题，一路使用默认值，创建完毕。\n\n## 安装grunt\n\n```js\nnpm install grunt --save-dev\n```\n\n使用npm安装grunt插件，它将被安装到根目录的`node_modules`文件夹下，所有npm插件都会放到这里。\n\n`--save-dev`： 意思是安装插件的同时，也把它添加到项目信息文件`package.json`中的`devDependencies`字段里，意思是这个项目依赖于这些插件。下次使用`npm install`的时候就会自动安装这些插件。\n\n## 为grunt创建配置文件Gruntfile.js\nGruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。\n- 安装grunt-init\n\n  ```js\n    npm install grunt-init -g      //全局安装grunt-init\n  ```\n\n- 下载grunt模板\n\n  ```js\n    git clone https://github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile\n  ```\n\n- 生成Gruntfile\n\n  ```js\n    grunt-init gruntfile\n  ```\n\n    在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。\n\n## 安装bower\nbower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。\n\n同样适用npm进行安装。\n\n```js\nnpm install bower -g\n```\n\n## 为bower生成配置文件bower.json\n整个项目的信息文件是`package.json`，执行任务插件grunt的信息文件是`Gruntfile.js`，那么bower当然也有自己的信息文件了，那就是`bower.json`。\n\n```js\nbower init\n```\n\n不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。\n\n比如使用bower下载angularjs：\n\n```js\nbower install angularjs\n```\n\n这行命令将会把angular下载下来，放在根目录下的`bower_components`文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？\n\n```js\nbower install angularjs#1.2.2\n```\n\n另外，bower只负责下载文件到`bower_components`目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件`grunt-bower-task`，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。\n\n## 关于Requirejs\n官网上是这样说的：\n\n> RequireJS的目标是鼓励代码的模块化。\n\n它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。\n\n## 使用Requirejs\n`<script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>`\n\n一般在首页加载requiejs文件，然后属性`data-main`指定的文件就是接下来要加载的文件，然后我们再看`main.js`文件:\n\n```js\nrequire.config({\n    baseUrl: 'script/lib',\n    paths: {\n        app: 'app',\n        jquery: '/jquery/jquery-min',\n        angular: '/angularjs/angular-min'\n    },\n    shim: {\n        'angular': {\n            exports: 'angular'\n        }\n    }\n});\nrequire([\n    'app'\n], function(app) (\n    app.hello();\n))\n```\n\n- 我们在`paths`中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。\n- `shim`中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫`angular`的模块。\n- 最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了`app.hello()`方法。\n\n# AngularJs实例\n上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。\n\n## 目录结构\n项目文件夹结构如下图（当然目录结构因人而异）：\n\n![](https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png)\n- `node_modules`: 用来存放项目依赖的grunt插件。\n- `bower_components`: 用来存放bower下载的库。\n- `build`: 用来存放经过build处理之后的js文件。\n- `app`: 是真正的开发需要的文件。\n  - `data`: 用来存放mock数据用的json文件。\n  - `images`: 用来存放静态图片。\n  - `scripts`: 用来存放所有js文件。\n    - `controller`: 用来存放控制器文件。\n    - `directive`: 定义的指令文件。\n    - `filter`: 定义的过滤器文件。\n    - `route`: 路由文件。\n    - `service`: 服务文件。\n    - `vendor`: 公共库文件，比如angular,jquery,bootstrap等等。\n\n  - `styles`目录用来存放样式文件。\n  - `views`目录用来存放`页面`html文件。\n  - `partials`目录用来存放`页面片段`的html文件。\n\n目录创建好了，现在来写一些代码，让项目能够运行起来。\n\n## views/index.html\n\n```html\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>grunt+requirejs+angular项目构建</title>\n    <script src=\"../scripts/vendor/requirejs/require.js\" data-main=\"../scripts/config\"></script>    <!-- 先引入requirejs, 然后引入config.js -->\n</head>\n<body>\n    <div ng-controller=\"testController\">\n        {{app}}\n    </div>\n</body>\n</html>\n```\n\n上述index中，先引入了require.js，然后加载data-main对应的config.js文件。\n\n## scripts/config.js\n\n```js\nvar vendorPath = 'vendor/';\nrequire.config({    //配置模块\n    baseUrl: '../scripts/',\n    paths: {\n        'app': 'app',\n        'angular': vendorPath + 'angular/angular',\n        'jquery': vendorPath + 'jquery/jquery'\n    },\n    shim: {   //处理没有遵守requirejs规范的js库\n        'angular': {\n            exports: 'angular'\n        }\n    }\n});\nrequire(['./bootstrap'], function(bootstrap) {\n    // ...\n});\n```\n\n然后通过require引入了bootstrap.js文件。\n\n## scripts/bootstrap.js\n\n```js\ndefine([\n    'angular',\n    'app',\n    'jquery',\n    './controller/_base'\n], function(angular) {\n    // 手动将angular模块绑定到document对象\n    angular.element(document).ready(function() {\n        angular.bootstrap(document, ['myProject']);\n    });\n});\n```\n\n`注意：function的内容是requirejs引入所有文件之后的回调函数。`\n\nbootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。\n\n## scripts/app.js\n\n```js\ndefine([\n    'angular',\n    './controller/controllers'\n], function(angular) {\n    //定义将要绑定到document上的模块名称\n    return angular.module('myProject', ['projectController']);\n});\n```\n\n定义模块名`myProject`的时候，同时指定它依赖于另一个模块`projectController`。\n\n同时在`./controller/controllers.js`中定义这个模块：\n\n```js\ndefine(['angular'], function(angular) {\n    return angular.module('projectController', []);\n});\n```\n\n这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。\n\n## controller/testController.js\n如果想要让视图文件`views/index.html`能够看到效果，我们就要开始编写控制器文件了，\n\n```js\ndefine([\n    './controllers'\n], function(mod) {\n    var controllerFn = function($scope, $location) {\n        $scope.app = 'hello, world';\n    };\n    controllerFn.$inject = ['$scope', '$location'];\n    mod.controller('testController', controllerFn);\n});\n```\n\n引入控制器的单独模块文件'./controllers',然后在模块上新建一个名为`testController`的控制器，并在$scope上绑定了一个值为'hello, world'的变量`app`。\n\n## 查看效果\n使用`grunt`命令启动一个简单的web服务器（前提是边编写好了Gruntfile.js文件，可以去github上看我已经写好的源码）。在浏览器就能看到效果了。\n\n```js\nhello, world\n```\n\n注：完整的代码我已上传至github[完整代码点这里](https://github.com/luckykun/grunt-require-angular/tree/master)，喜欢的同学帮忙点个star，谢谢咯。\n\n# 结语\n现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。\n\n--------------------------------------------------------------------------------\n","slug":"grunt-angular","published":1,"updated":"2016-10-11T16:29:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdar000au13g49spl9lo","content":"<hr>\n<p>前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好==，那我们到底该怎么办呢？</p>\n<a id=\"more\"></a>\n<p>可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。</p>\n<p>此时你会深深的感受到了那句名言的魅力，<code>时间就是金钱！</code>后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞<code>前后端分离了</code>！</p>\n<p>本篇文章会讲述搭建一个基于<code>grunt+require+angular</code>完整的前端项目的过程，<code>本项目主要在于项目结构和思路，具体功能可以在此基础上进一步开发</code>。最后完整的代码，你可以在Github上看到<a href=\"https://github.com/luckykun/grunt-require-angular/tree/master\" target=\"_blank\" rel=\"external\">完整代码点这里</a>，喜欢的同学不妨帮我<code>star一下</code>，谢谢^_^。</p>\n<p>down下来运行以下命令就可以直接看到效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install grunt -g</div><div class=\"line\">npm install   <span class=\"comment\">//安装依赖</span></div><div class=\"line\">grunt  <span class=\"comment\">//启动服务</span></div></pre></td></tr></table></figure>\n<p>最后页面上的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hello, world</div></pre></td></tr></table></figure>\n<h1 id=\"前后端分离的目的和作用\"><a href=\"#前后端分离的目的和作用\" class=\"headerlink\" title=\"前后端分离的目的和作用\"></a>前后端分离的目的和作用</h1><blockquote>\n<p>要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。</p>\n</blockquote>\n<p>现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。</p>\n<p>所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。</p>\n<h1 id=\"前端项目构建\"><a href=\"#前端项目构建\" class=\"headerlink\" title=\"前端项目构建\"></a>前端项目构建</h1><p>现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。</p>\n<p>现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。</p>\n<ul>\n<li>grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。</li>\n<li>requireJs: js库加载管理，支持按需加载，模块化引入。</li>\n<li>angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。</li>\n</ul>\n<p>这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。</p>\n<h2 id=\"创建项目目录\"><a href=\"#创建项目目录\" class=\"headerlink\" title=\"创建项目目录\"></a>创建项目目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir myProject</div><div class=\"line\">cd myProject</div></pre></td></tr></table></figure>\n<p>创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。</p>\n<h2 id=\"创建package-json\"><a href=\"#创建package-json\" class=\"headerlink\" title=\"创建package.json\"></a>创建package.json</h2><p><code>首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。</code></p>\n<p>可以用命令生成，后续也能够手动修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>他会问我们一些问题，一路使用默认值，创建完毕。</p>\n<h2 id=\"安装grunt\"><a href=\"#安装grunt\" class=\"headerlink\" title=\"安装grunt\"></a>安装grunt</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install grunt --save-dev</div></pre></td></tr></table></figure>\n<p>使用npm安装grunt插件，它将被安装到根目录的<code>node_modules</code>文件夹下，所有npm插件都会放到这里。</p>\n<p><code>--save-dev</code>： 意思是安装插件的同时，也把它添加到项目信息文件<code>package.json</code>中的<code>devDependencies</code>字段里，意思是这个项目依赖于这些插件。下次使用<code>npm install</code>的时候就会自动安装这些插件。</p>\n<h2 id=\"为grunt创建配置文件Gruntfile-js\"><a href=\"#为grunt创建配置文件Gruntfile-js\" class=\"headerlink\" title=\"为grunt创建配置文件Gruntfile.js\"></a>为grunt创建配置文件Gruntfile.js</h2><p>Gruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。</p>\n<ul>\n<li><p>安装grunt-init</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install grunt-init -g      <span class=\"comment\">//全局安装grunt-init</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>下载grunt模板</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">git clone https:<span class=\"comment\">//github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成Gruntfile</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">grunt-init gruntfile</div></pre></td></tr></table></figure>\n<p>  在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。</p>\n</li>\n</ul>\n<h2 id=\"安装bower\"><a href=\"#安装bower\" class=\"headerlink\" title=\"安装bower\"></a>安装bower</h2><p>bower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。</p>\n<p>同样适用npm进行安装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install bower -g</div></pre></td></tr></table></figure>\n<h2 id=\"为bower生成配置文件bower-json\"><a href=\"#为bower生成配置文件bower-json\" class=\"headerlink\" title=\"为bower生成配置文件bower.json\"></a>为bower生成配置文件bower.json</h2><p>整个项目的信息文件是<code>package.json</code>，执行任务插件grunt的信息文件是<code>Gruntfile.js</code>，那么bower当然也有自己的信息文件了，那就是<code>bower.json</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">bower init</div></pre></td></tr></table></figure>\n<p>不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。</p>\n<p>比如使用bower下载angularjs：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">bower install angularjs</div></pre></td></tr></table></figure>\n<p>这行命令将会把angular下载下来，放在根目录下的<code>bower_components</code>文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">bower install angularjs#1.2.2</div></pre></td></tr></table></figure>\n<p>另外，bower只负责下载文件到<code>bower_components</code>目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件<code>grunt-bower-task</code>，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。</p>\n<h2 id=\"关于Requirejs\"><a href=\"#关于Requirejs\" class=\"headerlink\" title=\"关于Requirejs\"></a>关于Requirejs</h2><p>官网上是这样说的：</p>\n<blockquote>\n<p>RequireJS的目标是鼓励代码的模块化。</p>\n</blockquote>\n<p>它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。</p>\n<h2 id=\"使用Requirejs\"><a href=\"#使用Requirejs\" class=\"headerlink\" title=\"使用Requirejs\"></a>使用Requirejs</h2><p><code>&lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>一般在首页加载requiejs文件，然后属性<code>data-main</code>指定的文件就是接下来要加载的文件，然后我们再看<code>main.js</code>文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</div><div class=\"line\">    baseUrl: <span class=\"string\">'script/lib'</span>,</div><div class=\"line\">    paths: &#123;</div><div class=\"line\">        app: <span class=\"string\">'app'</span>,</div><div class=\"line\">        jquery: <span class=\"string\">'/jquery/jquery-min'</span>,</div><div class=\"line\">        angular: <span class=\"string\">'/angularjs/angular-min'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    shim: &#123;</div><div class=\"line\">        <span class=\"string\">'angular'</span>: &#123;</div><div class=\"line\">            exports: <span class=\"string\">'angular'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">require</span>([</div><div class=\"line\">    <span class=\"string\">'app'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) (<span class=\"params\"></span></span></div><div class=\"line\">    app.hello();</div><div class=\"line\">))</div></pre></td></tr></table></figure>\n<ul>\n<li>我们在<code>paths</code>中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。</li>\n<li><code>shim</code>中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫<code>angular</code>的模块。</li>\n<li>最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了<code>app.hello()</code>方法。</li>\n</ul>\n<h1 id=\"AngularJs实例\"><a href=\"#AngularJs实例\" class=\"headerlink\" title=\"AngularJs实例\"></a>AngularJs实例</h1><p>上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>项目文件夹结构如下图（当然目录结构因人而异）：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png\" alt=\"\"></p>\n<ul>\n<li><code>node_modules</code>: 用来存放项目依赖的grunt插件。</li>\n<li><code>bower_components</code>: 用来存放bower下载的库。</li>\n<li><code>build</code>: 用来存放经过build处理之后的js文件。</li>\n<li><p><code>app</code>: 是真正的开发需要的文件。</p>\n<ul>\n<li><code>data</code>: 用来存放mock数据用的json文件。</li>\n<li><code>images</code>: 用来存放静态图片。</li>\n<li><p><code>scripts</code>: 用来存放所有js文件。</p>\n<ul>\n<li><code>controller</code>: 用来存放控制器文件。</li>\n<li><code>directive</code>: 定义的指令文件。</li>\n<li><code>filter</code>: 定义的过滤器文件。</li>\n<li><code>route</code>: 路由文件。</li>\n<li><code>service</code>: 服务文件。</li>\n<li><code>vendor</code>: 公共库文件，比如angular,jquery,bootstrap等等。</li>\n</ul>\n</li>\n<li><p><code>styles</code>目录用来存放样式文件。</p>\n</li>\n<li><code>views</code>目录用来存放<code>页面</code>html文件。</li>\n<li><code>partials</code>目录用来存放<code>页面片段</code>的html文件。</li>\n</ul>\n</li>\n</ul>\n<p>目录创建好了，现在来写一些代码，让项目能够运行起来。</p>\n<h2 id=\"views-index-html\"><a href=\"#views-index-html\" class=\"headerlink\" title=\"views/index.html\"></a>views/index.html</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>grunt+requirejs+angular项目构建<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../scripts/vendor/requirejs/require.js\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"../scripts/config\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    <span class=\"comment\">&lt;!-- 先引入requirejs, 然后引入config.js --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"testController\"</span>&gt;</span></div><div class=\"line\">        &#123;&#123;app&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述index中，先引入了require.js，然后加载data-main对应的config.js文件。</p>\n<h2 id=\"scripts-config-js\"><a href=\"#scripts-config-js\" class=\"headerlink\" title=\"scripts/config.js\"></a>scripts/config.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vendorPath = <span class=\"string\">'vendor/'</span>;</div><div class=\"line\"><span class=\"built_in\">require</span>.config(&#123;    <span class=\"comment\">//配置模块</span></div><div class=\"line\">    baseUrl: <span class=\"string\">'../scripts/'</span>,</div><div class=\"line\">    paths: &#123;</div><div class=\"line\">        <span class=\"string\">'app'</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">        <span class=\"string\">'angular'</span>: vendorPath + <span class=\"string\">'angular/angular'</span>,</div><div class=\"line\">        <span class=\"string\">'jquery'</span>: vendorPath + <span class=\"string\">'jquery/jquery'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    shim: &#123;   <span class=\"comment\">//处理没有遵守requirejs规范的js库</span></div><div class=\"line\">        <span class=\"string\">'angular'</span>: &#123;</div><div class=\"line\">            exports: <span class=\"string\">'angular'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./bootstrap'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bootstrap</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后通过require引入了bootstrap.js文件。</p>\n<h2 id=\"scripts-bootstrap-js\"><a href=\"#scripts-bootstrap-js\" class=\"headerlink\" title=\"scripts/bootstrap.js\"></a>scripts/bootstrap.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([</div><div class=\"line\">    <span class=\"string\">'angular'</span>,</div><div class=\"line\">    <span class=\"string\">'app'</span>,</div><div class=\"line\">    <span class=\"string\">'jquery'</span>,</div><div class=\"line\">    <span class=\"string\">'./controller/_base'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 手动将angular模块绑定到document对象</span></div><div class=\"line\">    angular.element(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        angular.bootstrap(<span class=\"built_in\">document</span>, [<span class=\"string\">'myProject'</span>]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>注意：function的内容是requirejs引入所有文件之后的回调函数。</code></p>\n<p>bootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。</p>\n<h2 id=\"scripts-app-js\"><a href=\"#scripts-app-js\" class=\"headerlink\" title=\"scripts/app.js\"></a>scripts/app.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([</div><div class=\"line\">    <span class=\"string\">'angular'</span>,</div><div class=\"line\">    <span class=\"string\">'./controller/controllers'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//定义将要绑定到document上的模块名称</span></div><div class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'myProject'</span>, [<span class=\"string\">'projectController'</span>]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>定义模块名<code>myProject</code>的时候，同时指定它依赖于另一个模块<code>projectController</code>。</p>\n<p>同时在<code>./controller/controllers.js</code>中定义这个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'angular'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'projectController'</span>, []);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。</p>\n<h2 id=\"controller-testController-js\"><a href=\"#controller-testController-js\" class=\"headerlink\" title=\"controller/testController.js\"></a>controller/testController.js</h2><p>如果想要让视图文件<code>views/index.html</code>能够看到效果，我们就要开始编写控制器文件了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([</div><div class=\"line\">    <span class=\"string\">'./controllers'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> controllerFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $location</span>) </span>&#123;</div><div class=\"line\">        $scope.app = <span class=\"string\">'hello, world'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    controllerFn.$inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$location'</span>];</div><div class=\"line\">    mod.controller(<span class=\"string\">'testController'</span>, controllerFn);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>引入控制器的单独模块文件’./controllers’,然后在模块上新建一个名为<code>testController</code>的控制器，并在$scope上绑定了一个值为’hello, world’的变量<code>app</code>。</p>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>使用<code>grunt</code>命令启动一个简单的web服务器（前提是边编写好了Gruntfile.js文件，可以去github上看我已经写好的源码）。在浏览器就能看到效果了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hello, world</div></pre></td></tr></table></figure>\n<p>注：完整的代码我已上传至github<a href=\"https://github.com/luckykun/grunt-require-angular/tree/master\" target=\"_blank\" rel=\"external\">完整代码点这里</a>，喜欢的同学帮忙点个star，谢谢咯。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。</p>\n<hr>\n","excerpt":"<hr>\n<p>前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好==，那我们到底该怎么办呢？</p>","more":"<p>可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。</p>\n<p>此时你会深深的感受到了那句名言的魅力，<code>时间就是金钱！</code>后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞<code>前后端分离了</code>！</p>\n<p>本篇文章会讲述搭建一个基于<code>grunt+require+angular</code>完整的前端项目的过程，<code>本项目主要在于项目结构和思路，具体功能可以在此基础上进一步开发</code>。最后完整的代码，你可以在Github上看到<a href=\"https://github.com/luckykun/grunt-require-angular/tree/master\">完整代码点这里</a>，喜欢的同学不妨帮我<code>star一下</code>，谢谢^_^。</p>\n<p>down下来运行以下命令就可以直接看到效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install grunt -g</div><div class=\"line\">npm install   <span class=\"comment\">//安装依赖</span></div><div class=\"line\">grunt  <span class=\"comment\">//启动服务</span></div></pre></td></tr></table></figure>\n<p>最后页面上的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hello, world</div></pre></td></tr></table></figure>\n<h1 id=\"前后端分离的目的和作用\"><a href=\"#前后端分离的目的和作用\" class=\"headerlink\" title=\"前后端分离的目的和作用\"></a>前后端分离的目的和作用</h1><blockquote>\n<p>要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。</p>\n</blockquote>\n<p>现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。</p>\n<p>所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。</p>\n<h1 id=\"前端项目构建\"><a href=\"#前端项目构建\" class=\"headerlink\" title=\"前端项目构建\"></a>前端项目构建</h1><p>现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。</p>\n<p>现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。</p>\n<ul>\n<li>grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。</li>\n<li>requireJs: js库加载管理，支持按需加载，模块化引入。</li>\n<li>angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。</li>\n</ul>\n<p>这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。</p>\n<h2 id=\"创建项目目录\"><a href=\"#创建项目目录\" class=\"headerlink\" title=\"创建项目目录\"></a>创建项目目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir myProject</div><div class=\"line\">cd myProject</div></pre></td></tr></table></figure>\n<p>创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。</p>\n<h2 id=\"创建package-json\"><a href=\"#创建package-json\" class=\"headerlink\" title=\"创建package.json\"></a>创建package.json</h2><p><code>首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。</code></p>\n<p>可以用命令生成，后续也能够手动修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>他会问我们一些问题，一路使用默认值，创建完毕。</p>\n<h2 id=\"安装grunt\"><a href=\"#安装grunt\" class=\"headerlink\" title=\"安装grunt\"></a>安装grunt</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install grunt --save-dev</div></pre></td></tr></table></figure>\n<p>使用npm安装grunt插件，它将被安装到根目录的<code>node_modules</code>文件夹下，所有npm插件都会放到这里。</p>\n<p><code>--save-dev</code>： 意思是安装插件的同时，也把它添加到项目信息文件<code>package.json</code>中的<code>devDependencies</code>字段里，意思是这个项目依赖于这些插件。下次使用<code>npm install</code>的时候就会自动安装这些插件。</p>\n<h2 id=\"为grunt创建配置文件Gruntfile-js\"><a href=\"#为grunt创建配置文件Gruntfile-js\" class=\"headerlink\" title=\"为grunt创建配置文件Gruntfile.js\"></a>为grunt创建配置文件Gruntfile.js</h2><p>Gruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。</p>\n<ul>\n<li><p>安装grunt-init</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install grunt-init -g      <span class=\"comment\">//全局安装grunt-init</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>下载grunt模板</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">git clone https:<span class=\"comment\">//github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成Gruntfile</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">grunt-init gruntfile</div></pre></td></tr></table></figure>\n<p>  在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。</p>\n</li>\n</ul>\n<h2 id=\"安装bower\"><a href=\"#安装bower\" class=\"headerlink\" title=\"安装bower\"></a>安装bower</h2><p>bower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。</p>\n<p>同样适用npm进行安装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install bower -g</div></pre></td></tr></table></figure>\n<h2 id=\"为bower生成配置文件bower-json\"><a href=\"#为bower生成配置文件bower-json\" class=\"headerlink\" title=\"为bower生成配置文件bower.json\"></a>为bower生成配置文件bower.json</h2><p>整个项目的信息文件是<code>package.json</code>，执行任务插件grunt的信息文件是<code>Gruntfile.js</code>，那么bower当然也有自己的信息文件了，那就是<code>bower.json</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">bower init</div></pre></td></tr></table></figure>\n<p>不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。</p>\n<p>比如使用bower下载angularjs：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">bower install angularjs</div></pre></td></tr></table></figure>\n<p>这行命令将会把angular下载下来，放在根目录下的<code>bower_components</code>文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">bower install angularjs#1.2.2</div></pre></td></tr></table></figure>\n<p>另外，bower只负责下载文件到<code>bower_components</code>目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件<code>grunt-bower-task</code>，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。</p>\n<h2 id=\"关于Requirejs\"><a href=\"#关于Requirejs\" class=\"headerlink\" title=\"关于Requirejs\"></a>关于Requirejs</h2><p>官网上是这样说的：</p>\n<blockquote>\n<p>RequireJS的目标是鼓励代码的模块化。</p>\n</blockquote>\n<p>它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。</p>\n<h2 id=\"使用Requirejs\"><a href=\"#使用Requirejs\" class=\"headerlink\" title=\"使用Requirejs\"></a>使用Requirejs</h2><p><code>&lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>一般在首页加载requiejs文件，然后属性<code>data-main</code>指定的文件就是接下来要加载的文件，然后我们再看<code>main.js</code>文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</div><div class=\"line\">    baseUrl: <span class=\"string\">'script/lib'</span>,</div><div class=\"line\">    paths: &#123;</div><div class=\"line\">        app: <span class=\"string\">'app'</span>,</div><div class=\"line\">        jquery: <span class=\"string\">'/jquery/jquery-min'</span>,</div><div class=\"line\">        angular: <span class=\"string\">'/angularjs/angular-min'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    shim: &#123;</div><div class=\"line\">        <span class=\"string\">'angular'</span>: &#123;</div><div class=\"line\">            exports: <span class=\"string\">'angular'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">require</span>([</div><div class=\"line\">    <span class=\"string\">'app'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) (<span class=\"params\"></div><div class=\"line\">    app.hello(</span>);</div><div class=\"line\">))</span></div></pre></td></tr></table></figure>\n<ul>\n<li>我们在<code>paths</code>中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。</li>\n<li><code>shim</code>中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫<code>angular</code>的模块。</li>\n<li>最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了<code>app.hello()</code>方法。</li>\n</ul>\n<h1 id=\"AngularJs实例\"><a href=\"#AngularJs实例\" class=\"headerlink\" title=\"AngularJs实例\"></a>AngularJs实例</h1><p>上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>项目文件夹结构如下图（当然目录结构因人而异）：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png\" alt=\"\"></p>\n<ul>\n<li><code>node_modules</code>: 用来存放项目依赖的grunt插件。</li>\n<li><code>bower_components</code>: 用来存放bower下载的库。</li>\n<li><code>build</code>: 用来存放经过build处理之后的js文件。</li>\n<li><p><code>app</code>: 是真正的开发需要的文件。</p>\n<ul>\n<li><code>data</code>: 用来存放mock数据用的json文件。</li>\n<li><code>images</code>: 用来存放静态图片。</li>\n<li><p><code>scripts</code>: 用来存放所有js文件。</p>\n<ul>\n<li><code>controller</code>: 用来存放控制器文件。</li>\n<li><code>directive</code>: 定义的指令文件。</li>\n<li><code>filter</code>: 定义的过滤器文件。</li>\n<li><code>route</code>: 路由文件。</li>\n<li><code>service</code>: 服务文件。</li>\n<li><code>vendor</code>: 公共库文件，比如angular,jquery,bootstrap等等。</li>\n</ul>\n</li>\n<li><p><code>styles</code>目录用来存放样式文件。</p>\n</li>\n<li><code>views</code>目录用来存放<code>页面</code>html文件。</li>\n<li><code>partials</code>目录用来存放<code>页面片段</code>的html文件。</li>\n</ul>\n</li>\n</ul>\n<p>目录创建好了，现在来写一些代码，让项目能够运行起来。</p>\n<h2 id=\"views-index-html\"><a href=\"#views-index-html\" class=\"headerlink\" title=\"views/index.html\"></a>views/index.html</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>grunt+requirejs+angular项目构建<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../scripts/vendor/requirejs/require.js\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"../scripts/config\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    <span class=\"comment\">&lt;!-- 先引入requirejs, 然后引入config.js --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"testController\"</span>&gt;</span></div><div class=\"line\">        &#123;&#123;app&#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述index中，先引入了require.js，然后加载data-main对应的config.js文件。</p>\n<h2 id=\"scripts-config-js\"><a href=\"#scripts-config-js\" class=\"headerlink\" title=\"scripts/config.js\"></a>scripts/config.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vendorPath = <span class=\"string\">'vendor/'</span>;</div><div class=\"line\"><span class=\"built_in\">require</span>.config(&#123;    <span class=\"comment\">//配置模块</span></div><div class=\"line\">    baseUrl: <span class=\"string\">'../scripts/'</span>,</div><div class=\"line\">    paths: &#123;</div><div class=\"line\">        <span class=\"string\">'app'</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">        <span class=\"string\">'angular'</span>: vendorPath + <span class=\"string\">'angular/angular'</span>,</div><div class=\"line\">        <span class=\"string\">'jquery'</span>: vendorPath + <span class=\"string\">'jquery/jquery'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    shim: &#123;   <span class=\"comment\">//处理没有遵守requirejs规范的js库</span></div><div class=\"line\">        <span class=\"string\">'angular'</span>: &#123;</div><div class=\"line\">            exports: <span class=\"string\">'angular'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./bootstrap'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bootstrap</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后通过require引入了bootstrap.js文件。</p>\n<h2 id=\"scripts-bootstrap-js\"><a href=\"#scripts-bootstrap-js\" class=\"headerlink\" title=\"scripts/bootstrap.js\"></a>scripts/bootstrap.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([</div><div class=\"line\">    <span class=\"string\">'angular'</span>,</div><div class=\"line\">    <span class=\"string\">'app'</span>,</div><div class=\"line\">    <span class=\"string\">'jquery'</span>,</div><div class=\"line\">    <span class=\"string\">'./controller/_base'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 手动将angular模块绑定到document对象</span></div><div class=\"line\">    angular.element(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        angular.bootstrap(<span class=\"built_in\">document</span>, [<span class=\"string\">'myProject'</span>]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>注意：function的内容是requirejs引入所有文件之后的回调函数。</code></p>\n<p>bootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。</p>\n<h2 id=\"scripts-app-js\"><a href=\"#scripts-app-js\" class=\"headerlink\" title=\"scripts/app.js\"></a>scripts/app.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([</div><div class=\"line\">    <span class=\"string\">'angular'</span>,</div><div class=\"line\">    <span class=\"string\">'./controller/controllers'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//定义将要绑定到document上的模块名称</span></div><div class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'myProject'</span>, [<span class=\"string\">'projectController'</span>]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>定义模块名<code>myProject</code>的时候，同时指定它依赖于另一个模块<code>projectController</code>。</p>\n<p>同时在<code>./controller/controllers.js</code>中定义这个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'angular'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'projectController'</span>, []);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。</p>\n<h2 id=\"controller-testController-js\"><a href=\"#controller-testController-js\" class=\"headerlink\" title=\"controller/testController.js\"></a>controller/testController.js</h2><p>如果想要让视图文件<code>views/index.html</code>能够看到效果，我们就要开始编写控制器文件了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">define([</div><div class=\"line\">    <span class=\"string\">'./controllers'</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> controllerFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $location</span>) </span>&#123;</div><div class=\"line\">        $scope.app = <span class=\"string\">'hello, world'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    controllerFn.$inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$location'</span>];</div><div class=\"line\">    mod.controller(<span class=\"string\">'testController'</span>, controllerFn);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>引入控制器的单独模块文件’./controllers’,然后在模块上新建一个名为<code>testController</code>的控制器，并在$scope上绑定了一个值为’hello, world’的变量<code>app</code>。</p>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>使用<code>grunt</code>命令启动一个简单的web服务器（前提是边编写好了Gruntfile.js文件，可以去github上看我已经写好的源码）。在浏览器就能看到效果了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hello, world</div></pre></td></tr></table></figure>\n<p>注：完整的代码我已上传至github<a href=\"https://github.com/luckykun/grunt-require-angular/tree/master\">完整代码点这里</a>，喜欢的同学帮忙点个star，谢谢咯。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。</p>\n<hr>"},{"title":"总结ES6常用的新特性","date":"2016-05-10T15:11:23.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\nES6是即将到来的新版本JavaScript语言的标准，他给我们带来了更\"甜\"的语法糖（一种语法，使得语言更容易理解和更具有可读性，也让我们编写代码更加简单快捷），如箭头函数（=>）、class等等。用一句话来说就是：\n\n> ES6给我们提供了许多的新语法和代码特性来提高javascript的体验\n\n<!--more-->\n\n不过遗憾的是，现在还没有浏览器能够很好的支持es6语法，[点这里](http://kangax.github.io/compat-table/es6/)查看浏览器支持情况，所以我们在开发中还需要用babel进行转换为CommonJS这种模块化标准的语法。\n\n因为下面我会讲到一些es6新特性的例子，如果想要运行试试效果的话，可以[点这里](http://google.github.io/traceur-compiler/demo/repl.html)去测试es6的代码。\n\n# es6常用特性列举\n然后我下面简单的介绍一些很常用的语法特性，如果想完整的了解ES6，我推荐大家[点这里](http://gank.io/post/564151c1f1df1210001c9161)\n\n## 定义函数\n我们先来看一个基本的新特性，在javascript中，定义函数需要关键字function，但是在es6中，还有更先进的写法，我们来看：\n\nes6写法：\n\n```js\nvar human = {\n    breathe(name) {   //不需要function也能定义breathe函数。\n        console.log(name + ' is breathing...');\n    }\n};\nhuman.breathe('jarson');   //输出 ‘jarson is breathing...’\n```\n\n转成js代码：\n\n```js\nvar human = {\n    breathe: function(name) {\n      console.log(name + 'is breathing...');\n    }\n};\nhuman.breathe('jarson');\n```\n\n很神奇对不对？这样一对比，就可以看出es6的写法让人简单易懂。别着急，下面还有更神奇的。\n\n## 创建类\n我们知道，javascript不像java是面向对象编程的语言，而只可以说是基于对象编程的语言。所以在js中，我们通常都是用function和prototype来模拟`类`这个概念。\n\n但是现在有了es6，我们可以像java那样'明目张胆'的创建一个类了：\n\n```js\nclass Human {\n    constructor(name) {\n        this.name = name;\n      }\n     breathe() {\n        console.log(this.name + \" is breathing\");\n      }\n}\nvar man = new Human(\"jarson\");\nman.breathe();    //jarson is breathing\n```\n\n上面代码转为js格式：\n\n```js\nfunction Human(name) {\n    this.name = name;\n    this.breathe = function() {\n        console.log(this.name + ' is breathing');\n    }\n}\nvar man = new Human('jarson');\nman.breathe();    //jarson is breathing\n```\n\n所以我们看到，我们可以像java那样语义化的去创建一个类。另外，js中的继承父类，需要用prototype来实现。那么在es6中，又有什么新的方法来实现类的继承呢？继续看：\n\n假如我们要创建一个Man类继承上面的Human类，es6代码：\n\n```js\nclass Man extends Human {\n      constructor(name, sex) {\n        super(name);\n          this.sex = sex;\n      }\n      info(){\n          console.log(this.name + 'is ' + this.sex);\n    }\n}\nvar xx = new Man('jarson', 'boy');\nxx.breathe();   //jarson is breathing\nxx.info();   //arsonis boy\n```\n\n代码很简单，不作赘述，可以使用文章里提到的在线工具去试试效果就能明白了。需要注意的是：`super()`是父类的构造函数。\n\n## 模块\n在ES6标准中，javascript原生支持module了。将不同功能的代码分别写在不同文件中，各模块只需`导出(export)`公共接口部分，然后在需要使用的地方通过模块的`导入(import)`就可以了。下面继续看例子：\n\n### 内联导出\nES6模块里的对象可在创建它们的声明中直接导出，一个模块中可无数次使用export。\n\n先看模块文件`app.js`：\n\n```js\nexport class Human{\n    constructor(name) {\n        this.name = name;\n    }\n    breathe() {\n        console.log(this.name + \" is breathing\");\n    }\n}  \nexport function run(){  \n    console.log('i am runing');\n}\nfunction eat() {\n    console.log('i am eating');\n}\n```\n\n例子中的模块导出了两个对象：Human类和run函数， eat函数没有导出，则仍为此模块私有，不能被其他文件使用。\n\n### 导出一组对象\n另外，其实如果需要导出的对象很多的时候，我们可以在最后统一导出一组对象。\n\n更改`app.js`文件：\n\n```js\nclass Human{\n    constructor(name) {\n        this.name = name;\n    }\n    breathe() {\n        console.log(this.name + \" is breathing\");\n    }\n}  \nfunction run(){  \n    console.log('i am runing');\n}\nfunction eat() {\n    console.log('i am eating');\n}\nexport {Human, run};\n```\n\n这样的写法功能和上面一样，而且也很明显，在最后可以清晰的看到导出了哪些对象。\n\n### Default导出\n导出时使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。它既可以用于内联导出，也可以用于一组对象导出声明中。\n\n查看导出default对象的语法：\n\n```js\n...   //创建类、函数等等\nexport default {  //把Human类和run函数标注为default对象导出。\n    Human,  \n    run  \n};\n```\n\n### 无对象导入\n如果模块包含一些逻辑要执行，且不会导出任何对象，此类对象也可以被导入到另一模块中，导入之后只执行逻辑。如：\n\n```js\nimport './module1.js';\n```\n\n### 导入默认对象\n使用Default导出方式导出对象，该对象在import声明中将直接被分配给某个引用，如下例中的\"app\"。\n\n```js\nimport app from './module1.js';\n```\n\n上面例子中，默认`./module1.js`文件只导出了一个对象；若导出了一组对象，则应该在导入声明中一一列出这些对象，如：\n\n```js\nimport {Human, run} from './app.js'\n```\n\n## let与const\n在我看来，在es6新特性中，在定义变量的时候统统使用`let`来代替`var`就好了，`const`则很直观，用来定义常量，即无法被更改值的变量。\n\n```js\nfor (let i=0;i<2;i++) {\n    console.log(i);  //输出: 0,1\n}\n```\n\n## 箭头函数\nES6中新增的箭头操作符`=>`简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，这样的写法可以为我们减少大量的代码，看下面的实例：\n\n```js\nlet arr = [6, 8, 10, 20, 15, 9];\narr.forEach((item, i) => console.log(item, i));\nlet newArr = arr.filter((item) => (item<10));\nconsole.log(newArr); //[6, 8, 9];\n```\n\n上面的`(item, i)`就是参数，后面的`console.log(item, i)`就是回到函数要执行的操作逻辑。\n\n上面代码转为js格式：\n\n```js\nvar arr = [6, 8, 10, 20, 15, 9];\narr.forEach(function(item, i) {\n    return console.log(item, i);\n});\nvar newArr = arr.filter(function(item) {\n    return (item < 10);\n});\nconsole.log(newArr);\n```\n\n## 字符串模版\nES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。看一下实例就会明白了：\n\n```js\n//产生一个随机数\nlet num = Math.random();\n//将这个数字输出到console\nconsole.log(`your num is ${num}`);\n```\n\n## 解构\n若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。我们来看例子：\n\n```js\nfunction getVal() {\n    return [1, 2];\n}\nvar [x,y] = getVal(); //函数返回值的解构\nconsole.log('x:'+x+', y:'+y);   //输出：x:1, y:2\n```\n\n## 默认参数\n现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。\n\n```js\nfunction sayHello(name){\n    var name=name||'tom';    //传统的指定默认参数的方式\n    console.log('Hello '+name);\n}\n//运用ES6的默认参数\nfunction sayHello2(name='tom'){  //如果没有传这个参数，才会有默认值，\n    console.log(`Hello ${name}`);\n}\nsayHello();//输出：Hello tom\nsayHello('jarson');//输出：Hello jarson\nsayHello2();//输出：Hello tom\nsayHello2('jarson');//输出：Hello jarson\n```\n\n注意： `sayHello2(name='tom')`这里的等号，意思是没有传这个参数，则设置默认值，而不是给参数赋值的意思。\n\n## Proxy\nProxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。\n\n```js\n//定义被监听的目标对象\nlet engineer = { name: 'Joe Sixpack', salary: 50 };\n//定义处理程序\nlet interceptor = {\n      set(receiver, property, value) {\n        console.log(property, 'is changed to', value);\n        receiver[property] = value;\n      }\n};\n//创建代理以进行侦听\nengineer = new Proxy(engineer, interceptor);\n//做一些改动来触发代理\nengineer.salary = 70;//控制台输出：salary is changed to 70\n```\n\n对于处理程序，是在被监听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用。\n\n# 结语\n总的来说，虽然支持es6的情况到目前还不是很乐观，但es6的新语法特性让前端和后端的差异越来越小了，这是一个新时代的开始，我们必须要了解这些新的前沿知识，才能跟上时代的步伐。\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/es6-feature.md","raw":"---\ntitle: 总结ES6常用的新特性\ndate: '2016-05-010 23:11:23'\ncategories: 工作\ntags:\n  - es6\n  - javascript\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\nES6是即将到来的新版本JavaScript语言的标准，他给我们带来了更\"甜\"的语法糖（一种语法，使得语言更容易理解和更具有可读性，也让我们编写代码更加简单快捷），如箭头函数（=>）、class等等。用一句话来说就是：\n\n> ES6给我们提供了许多的新语法和代码特性来提高javascript的体验\n\n<!--more-->\n\n不过遗憾的是，现在还没有浏览器能够很好的支持es6语法，[点这里](http://kangax.github.io/compat-table/es6/)查看浏览器支持情况，所以我们在开发中还需要用babel进行转换为CommonJS这种模块化标准的语法。\n\n因为下面我会讲到一些es6新特性的例子，如果想要运行试试效果的话，可以[点这里](http://google.github.io/traceur-compiler/demo/repl.html)去测试es6的代码。\n\n# es6常用特性列举\n然后我下面简单的介绍一些很常用的语法特性，如果想完整的了解ES6，我推荐大家[点这里](http://gank.io/post/564151c1f1df1210001c9161)\n\n## 定义函数\n我们先来看一个基本的新特性，在javascript中，定义函数需要关键字function，但是在es6中，还有更先进的写法，我们来看：\n\nes6写法：\n\n```js\nvar human = {\n    breathe(name) {   //不需要function也能定义breathe函数。\n        console.log(name + ' is breathing...');\n    }\n};\nhuman.breathe('jarson');   //输出 ‘jarson is breathing...’\n```\n\n转成js代码：\n\n```js\nvar human = {\n    breathe: function(name) {\n      console.log(name + 'is breathing...');\n    }\n};\nhuman.breathe('jarson');\n```\n\n很神奇对不对？这样一对比，就可以看出es6的写法让人简单易懂。别着急，下面还有更神奇的。\n\n## 创建类\n我们知道，javascript不像java是面向对象编程的语言，而只可以说是基于对象编程的语言。所以在js中，我们通常都是用function和prototype来模拟`类`这个概念。\n\n但是现在有了es6，我们可以像java那样'明目张胆'的创建一个类了：\n\n```js\nclass Human {\n    constructor(name) {\n        this.name = name;\n      }\n     breathe() {\n        console.log(this.name + \" is breathing\");\n      }\n}\nvar man = new Human(\"jarson\");\nman.breathe();    //jarson is breathing\n```\n\n上面代码转为js格式：\n\n```js\nfunction Human(name) {\n    this.name = name;\n    this.breathe = function() {\n        console.log(this.name + ' is breathing');\n    }\n}\nvar man = new Human('jarson');\nman.breathe();    //jarson is breathing\n```\n\n所以我们看到，我们可以像java那样语义化的去创建一个类。另外，js中的继承父类，需要用prototype来实现。那么在es6中，又有什么新的方法来实现类的继承呢？继续看：\n\n假如我们要创建一个Man类继承上面的Human类，es6代码：\n\n```js\nclass Man extends Human {\n      constructor(name, sex) {\n        super(name);\n          this.sex = sex;\n      }\n      info(){\n          console.log(this.name + 'is ' + this.sex);\n    }\n}\nvar xx = new Man('jarson', 'boy');\nxx.breathe();   //jarson is breathing\nxx.info();   //arsonis boy\n```\n\n代码很简单，不作赘述，可以使用文章里提到的在线工具去试试效果就能明白了。需要注意的是：`super()`是父类的构造函数。\n\n## 模块\n在ES6标准中，javascript原生支持module了。将不同功能的代码分别写在不同文件中，各模块只需`导出(export)`公共接口部分，然后在需要使用的地方通过模块的`导入(import)`就可以了。下面继续看例子：\n\n### 内联导出\nES6模块里的对象可在创建它们的声明中直接导出，一个模块中可无数次使用export。\n\n先看模块文件`app.js`：\n\n```js\nexport class Human{\n    constructor(name) {\n        this.name = name;\n    }\n    breathe() {\n        console.log(this.name + \" is breathing\");\n    }\n}  \nexport function run(){  \n    console.log('i am runing');\n}\nfunction eat() {\n    console.log('i am eating');\n}\n```\n\n例子中的模块导出了两个对象：Human类和run函数， eat函数没有导出，则仍为此模块私有，不能被其他文件使用。\n\n### 导出一组对象\n另外，其实如果需要导出的对象很多的时候，我们可以在最后统一导出一组对象。\n\n更改`app.js`文件：\n\n```js\nclass Human{\n    constructor(name) {\n        this.name = name;\n    }\n    breathe() {\n        console.log(this.name + \" is breathing\");\n    }\n}  \nfunction run(){  \n    console.log('i am runing');\n}\nfunction eat() {\n    console.log('i am eating');\n}\nexport {Human, run};\n```\n\n这样的写法功能和上面一样，而且也很明显，在最后可以清晰的看到导出了哪些对象。\n\n### Default导出\n导出时使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。它既可以用于内联导出，也可以用于一组对象导出声明中。\n\n查看导出default对象的语法：\n\n```js\n...   //创建类、函数等等\nexport default {  //把Human类和run函数标注为default对象导出。\n    Human,  \n    run  \n};\n```\n\n### 无对象导入\n如果模块包含一些逻辑要执行，且不会导出任何对象，此类对象也可以被导入到另一模块中，导入之后只执行逻辑。如：\n\n```js\nimport './module1.js';\n```\n\n### 导入默认对象\n使用Default导出方式导出对象，该对象在import声明中将直接被分配给某个引用，如下例中的\"app\"。\n\n```js\nimport app from './module1.js';\n```\n\n上面例子中，默认`./module1.js`文件只导出了一个对象；若导出了一组对象，则应该在导入声明中一一列出这些对象，如：\n\n```js\nimport {Human, run} from './app.js'\n```\n\n## let与const\n在我看来，在es6新特性中，在定义变量的时候统统使用`let`来代替`var`就好了，`const`则很直观，用来定义常量，即无法被更改值的变量。\n\n```js\nfor (let i=0;i<2;i++) {\n    console.log(i);  //输出: 0,1\n}\n```\n\n## 箭头函数\nES6中新增的箭头操作符`=>`简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，这样的写法可以为我们减少大量的代码，看下面的实例：\n\n```js\nlet arr = [6, 8, 10, 20, 15, 9];\narr.forEach((item, i) => console.log(item, i));\nlet newArr = arr.filter((item) => (item<10));\nconsole.log(newArr); //[6, 8, 9];\n```\n\n上面的`(item, i)`就是参数，后面的`console.log(item, i)`就是回到函数要执行的操作逻辑。\n\n上面代码转为js格式：\n\n```js\nvar arr = [6, 8, 10, 20, 15, 9];\narr.forEach(function(item, i) {\n    return console.log(item, i);\n});\nvar newArr = arr.filter(function(item) {\n    return (item < 10);\n});\nconsole.log(newArr);\n```\n\n## 字符串模版\nES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。看一下实例就会明白了：\n\n```js\n//产生一个随机数\nlet num = Math.random();\n//将这个数字输出到console\nconsole.log(`your num is ${num}`);\n```\n\n## 解构\n若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。我们来看例子：\n\n```js\nfunction getVal() {\n    return [1, 2];\n}\nvar [x,y] = getVal(); //函数返回值的解构\nconsole.log('x:'+x+', y:'+y);   //输出：x:1, y:2\n```\n\n## 默认参数\n现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。\n\n```js\nfunction sayHello(name){\n    var name=name||'tom';    //传统的指定默认参数的方式\n    console.log('Hello '+name);\n}\n//运用ES6的默认参数\nfunction sayHello2(name='tom'){  //如果没有传这个参数，才会有默认值，\n    console.log(`Hello ${name}`);\n}\nsayHello();//输出：Hello tom\nsayHello('jarson');//输出：Hello jarson\nsayHello2();//输出：Hello tom\nsayHello2('jarson');//输出：Hello jarson\n```\n\n注意： `sayHello2(name='tom')`这里的等号，意思是没有传这个参数，则设置默认值，而不是给参数赋值的意思。\n\n## Proxy\nProxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。\n\n```js\n//定义被监听的目标对象\nlet engineer = { name: 'Joe Sixpack', salary: 50 };\n//定义处理程序\nlet interceptor = {\n      set(receiver, property, value) {\n        console.log(property, 'is changed to', value);\n        receiver[property] = value;\n      }\n};\n//创建代理以进行侦听\nengineer = new Proxy(engineer, interceptor);\n//做一些改动来触发代理\nengineer.salary = 70;//控制台输出：salary is changed to 70\n```\n\n对于处理程序，是在被监听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用。\n\n# 结语\n总的来说，虽然支持es6的情况到目前还不是很乐观，但es6的新语法特性让前端和后端的差异越来越小了，这是一个新时代的开始，我们必须要了解这些新的前沿知识，才能跟上时代的步伐。\n\n\n--------------------------------------------------------------------------------\n","slug":"es6-feature","published":1,"updated":"2016-10-11T16:28:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdas000bu13gvectikti","content":"<hr>\n<p>ES6是即将到来的新版本JavaScript语言的标准，他给我们带来了更”甜”的语法糖（一种语法，使得语言更容易理解和更具有可读性，也让我们编写代码更加简单快捷），如箭头函数（=&gt;）、class等等。用一句话来说就是：</p>\n<blockquote>\n<p>ES6给我们提供了许多的新语法和代码特性来提高javascript的体验</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>不过遗憾的是，现在还没有浏览器能够很好的支持es6语法，<a href=\"http://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"external\">点这里</a>查看浏览器支持情况，所以我们在开发中还需要用babel进行转换为CommonJS这种模块化标准的语法。</p>\n<p>因为下面我会讲到一些es6新特性的例子，如果想要运行试试效果的话，可以<a href=\"http://google.github.io/traceur-compiler/demo/repl.html\" target=\"_blank\" rel=\"external\">点这里</a>去测试es6的代码。</p>\n<h1 id=\"es6常用特性列举\"><a href=\"#es6常用特性列举\" class=\"headerlink\" title=\"es6常用特性列举\"></a>es6常用特性列举</h1><p>然后我下面简单的介绍一些很常用的语法特性，如果想完整的了解ES6，我推荐大家<a href=\"http://gank.io/post/564151c1f1df1210001c9161\" target=\"_blank\" rel=\"external\">点这里</a></p>\n<h2 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h2><p>我们先来看一个基本的新特性，在javascript中，定义函数需要关键字function，但是在es6中，还有更先进的写法，我们来看：</p>\n<p>es6写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    breathe(name) &#123;   <span class=\"comment\">//不需要function也能定义breathe函数。</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name + <span class=\"string\">' is breathing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">human.breathe(<span class=\"string\">'jarson'</span>);   <span class=\"comment\">//输出 ‘jarson is breathing...’</span></div></pre></td></tr></table></figure>\n<p>转成js代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    breathe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(name + <span class=\"string\">'is breathing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">human.breathe(<span class=\"string\">'jarson'</span>);</div></pre></td></tr></table></figure>\n<p>很神奇对不对？这样一对比，就可以看出es6的写法让人简单易懂。别着急，下面还有更神奇的。</p>\n<h2 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h2><p>我们知道，javascript不像java是面向对象编程的语言，而只可以说是基于对象编程的语言。所以在js中，我们通常都是用function和prototype来模拟<code>类</code>这个概念。</p>\n<p>但是现在有了es6，我们可以像java那样’明目张胆’的创建一个类了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">      &#125;</div><div class=\"line\">     breathe() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is breathing\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Human(<span class=\"string\">\"jarson\"</span>);</div><div class=\"line\">man.breathe();    <span class=\"comment\">//jarson is breathing</span></div></pre></td></tr></table></figure>\n<p>上面代码转为js格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.breathe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' is breathing'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Human(<span class=\"string\">'jarson'</span>);</div><div class=\"line\">man.breathe();    <span class=\"comment\">//jarson is breathing</span></div></pre></td></tr></table></figure>\n<p>所以我们看到，我们可以像java那样语义化的去创建一个类。另外，js中的继承父类，需要用prototype来实现。那么在es6中，又有什么新的方法来实现类的继承呢？继续看：</p>\n<p>假如我们要创建一个Man类继承上面的Human类，es6代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Human</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">constructor</span>(name, sex) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name);</div><div class=\"line\">          <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">      &#125;</div><div class=\"line\">      info()&#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'is '</span> + <span class=\"keyword\">this</span>.sex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> xx = <span class=\"keyword\">new</span> Man(<span class=\"string\">'jarson'</span>, <span class=\"string\">'boy'</span>);</div><div class=\"line\">xx.breathe();   <span class=\"comment\">//jarson is breathing</span></div><div class=\"line\">xx.info();   <span class=\"comment\">//arsonis boy</span></div></pre></td></tr></table></figure>\n<p>代码很简单，不作赘述，可以使用文章里提到的在线工具去试试效果就能明白了。需要注意的是：<code>super()</code>是父类的构造函数。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>在ES6标准中，javascript原生支持module了。将不同功能的代码分别写在不同文件中，各模块只需<code>导出(export)</code>公共接口部分，然后在需要使用的地方通过模块的<code>导入(import)</code>就可以了。下面继续看例子：</p>\n<h3 id=\"内联导出\"><a href=\"#内联导出\" class=\"headerlink\" title=\"内联导出\"></a>内联导出</h3><p>ES6模块里的对象可在创建它们的声明中直接导出，一个模块中可无数次使用export。</p>\n<p>先看模块文件<code>app.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    breathe() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is breathing\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am runing'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am eating'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>例子中的模块导出了两个对象：Human类和run函数， eat函数没有导出，则仍为此模块私有，不能被其他文件使用。</p>\n<h3 id=\"导出一组对象\"><a href=\"#导出一组对象\" class=\"headerlink\" title=\"导出一组对象\"></a>导出一组对象</h3><p>另外，其实如果需要导出的对象很多的时候，我们可以在最后统一导出一组对象。</p>\n<p>更改<code>app.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    breathe() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is breathing\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am runing'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am eating'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;Human, run&#125;;</div></pre></td></tr></table></figure>\n<p>这样的写法功能和上面一样，而且也很明显，在最后可以清晰的看到导出了哪些对象。</p>\n<h3 id=\"Default导出\"><a href=\"#Default导出\" class=\"headerlink\" title=\"Default导出\"></a>Default导出</h3><p>导出时使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。它既可以用于内联导出，也可以用于一组对象导出声明中。</p>\n<p>查看导出default对象的语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">...   <span class=\"comment\">//创建类、函数等等</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;  <span class=\"comment\">//把Human类和run函数标注为default对象导出。</span></div><div class=\"line\">    Human,  </div><div class=\"line\">    run  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"无对象导入\"><a href=\"#无对象导入\" class=\"headerlink\" title=\"无对象导入\"></a>无对象导入</h3><p>如果模块包含一些逻辑要执行，且不会导出任何对象，此类对象也可以被导入到另一模块中，导入之后只执行逻辑。如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./module1.js'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"导入默认对象\"><a href=\"#导入默认对象\" class=\"headerlink\" title=\"导入默认对象\"></a>导入默认对象</h3><p>使用Default导出方式导出对象，该对象在import声明中将直接被分配给某个引用，如下例中的”app”。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> app <span class=\"keyword\">from</span> <span class=\"string\">'./module1.js'</span>;</div></pre></td></tr></table></figure>\n<p>上面例子中，默认<code>./module1.js</code>文件只导出了一个对象；若导出了一组对象，则应该在导入声明中一一列出这些对象，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Human, run&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.js'</span></div></pre></td></tr></table></figure>\n<h2 id=\"let与const\"><a href=\"#let与const\" class=\"headerlink\" title=\"let与const\"></a>let与const</h2><p>在我看来，在es6新特性中，在定义变量的时候统统使用<code>let</code>来代替<code>var</code>就好了，<code>const</code>则很直观，用来定义常量，即无法被更改值的变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);  <span class=\"comment\">//输出: 0,1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>ES6中新增的箭头操作符<code>=&gt;</code>简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，这样的写法可以为我们减少大量的代码，看下面的实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.forEach((item, i) =&gt; <span class=\"built_in\">console</span>.log(item, i));</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = arr.filter((item) =&gt; (item&lt;<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">//[6, 8, 9];</span></div></pre></td></tr></table></figure>\n<p>上面的<code>(item, i)</code>就是参数，后面的<code>console.log(item, i)</code>就是回到函数要执行的操作逻辑。</p>\n<p>上面代码转为js格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, i</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(item, i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (item &lt; <span class=\"number\">10</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</div></pre></td></tr></table></figure>\n<h2 id=\"字符串模版\"><a href=\"#字符串模版\" class=\"headerlink\" title=\"字符串模版\"></a>字符串模版</h2><p>ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。看一下实例就会明白了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//产生一个随机数</span></div><div class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\"><span class=\"comment\">//将这个数字输出到console</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`your num is <span class=\"subst\">$&#123;num&#125;</span>`</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><p>若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。我们来看例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> [x,y] = getVal(); <span class=\"comment\">//函数返回值的解构</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x:'</span>+x+<span class=\"string\">', y:'</span>+y);   <span class=\"comment\">//输出：x:1, y:2</span></div></pre></td></tr></table></figure>\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><p>现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name=name||<span class=\"string\">'tom'</span>;    <span class=\"comment\">//传统的指定默认参数的方式</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span>+name);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//运用ES6的默认参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello2</span>(<span class=\"params\">name='tom'</span>)</span>&#123;  <span class=\"comment\">//如果没有传这个参数，才会有默认值，</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello();<span class=\"comment\">//输出：Hello tom</span></div><div class=\"line\">sayHello(<span class=\"string\">'jarson'</span>);<span class=\"comment\">//输出：Hello jarson</span></div><div class=\"line\">sayHello2();<span class=\"comment\">//输出：Hello tom</span></div><div class=\"line\">sayHello2(<span class=\"string\">'jarson'</span>);<span class=\"comment\">//输出：Hello jarson</span></div></pre></td></tr></table></figure>\n<p>注意： <code>sayHello2(name=&#39;tom&#39;)</code>这里的等号，意思是没有传这个参数，则设置默认值，而不是给参数赋值的意思。</p>\n<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><p>Proxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义被监听的目标对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> engineer = &#123; name: <span class=\"string\">'Joe Sixpack'</span>, salary: <span class=\"number\">50</span> &#125;;</div><div class=\"line\"><span class=\"comment\">//定义处理程序</span></div><div class=\"line\"><span class=\"keyword\">let</span> interceptor = &#123;</div><div class=\"line\">      set(receiver, property, value) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(property, <span class=\"string\">'is changed to'</span>, value);</div><div class=\"line\">        receiver[property] = value;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//创建代理以进行侦听</span></div><div class=\"line\">engineer = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(engineer, interceptor);</div><div class=\"line\"><span class=\"comment\">//做一些改动来触发代理</span></div><div class=\"line\">engineer.salary = <span class=\"number\">70</span>;<span class=\"comment\">//控制台输出：salary is changed to 70</span></div></pre></td></tr></table></figure>\n<p>对于处理程序，是在被监听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>总的来说，虽然支持es6的情况到目前还不是很乐观，但es6的新语法特性让前端和后端的差异越来越小了，这是一个新时代的开始，我们必须要了解这些新的前沿知识，才能跟上时代的步伐。</p>\n<hr>\n","excerpt":"<hr>\n<p>ES6是即将到来的新版本JavaScript语言的标准，他给我们带来了更”甜”的语法糖（一种语法，使得语言更容易理解和更具有可读性，也让我们编写代码更加简单快捷），如箭头函数（=&gt;）、class等等。用一句话来说就是：</p>\n<blockquote>\n<p>ES6给我们提供了许多的新语法和代码特性来提高javascript的体验</p>\n</blockquote>","more":"<p>不过遗憾的是，现在还没有浏览器能够很好的支持es6语法，<a href=\"http://kangax.github.io/compat-table/es6/\">点这里</a>查看浏览器支持情况，所以我们在开发中还需要用babel进行转换为CommonJS这种模块化标准的语法。</p>\n<p>因为下面我会讲到一些es6新特性的例子，如果想要运行试试效果的话，可以<a href=\"http://google.github.io/traceur-compiler/demo/repl.html\">点这里</a>去测试es6的代码。</p>\n<h1 id=\"es6常用特性列举\"><a href=\"#es6常用特性列举\" class=\"headerlink\" title=\"es6常用特性列举\"></a>es6常用特性列举</h1><p>然后我下面简单的介绍一些很常用的语法特性，如果想完整的了解ES6，我推荐大家<a href=\"http://gank.io/post/564151c1f1df1210001c9161\">点这里</a></p>\n<h2 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h2><p>我们先来看一个基本的新特性，在javascript中，定义函数需要关键字function，但是在es6中，还有更先进的写法，我们来看：</p>\n<p>es6写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    breathe(name) &#123;   <span class=\"comment\">//不需要function也能定义breathe函数。</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name + <span class=\"string\">' is breathing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">human.breathe(<span class=\"string\">'jarson'</span>);   <span class=\"comment\">//输出 ‘jarson is breathing...’</span></div></pre></td></tr></table></figure>\n<p>转成js代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    breathe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(name + <span class=\"string\">'is breathing...'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">human.breathe(<span class=\"string\">'jarson'</span>);</div></pre></td></tr></table></figure>\n<p>很神奇对不对？这样一对比，就可以看出es6的写法让人简单易懂。别着急，下面还有更神奇的。</p>\n<h2 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h2><p>我们知道，javascript不像java是面向对象编程的语言，而只可以说是基于对象编程的语言。所以在js中，我们通常都是用function和prototype来模拟<code>类</code>这个概念。</p>\n<p>但是现在有了es6，我们可以像java那样’明目张胆’的创建一个类了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">      &#125;</div><div class=\"line\">     breathe() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is breathing\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Human(<span class=\"string\">\"jarson\"</span>);</div><div class=\"line\">man.breathe();    <span class=\"comment\">//jarson is breathing</span></div></pre></td></tr></table></figure>\n<p>上面代码转为js格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.breathe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' is breathing'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Human(<span class=\"string\">'jarson'</span>);</div><div class=\"line\">man.breathe();    <span class=\"comment\">//jarson is breathing</span></div></pre></td></tr></table></figure>\n<p>所以我们看到，我们可以像java那样语义化的去创建一个类。另外，js中的继承父类，需要用prototype来实现。那么在es6中，又有什么新的方法来实现类的继承呢？继续看：</p>\n<p>假如我们要创建一个Man类继承上面的Human类，es6代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Human</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">constructor</span>(name, sex) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name);</div><div class=\"line\">          <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">      &#125;</div><div class=\"line\">      info()&#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'is '</span> + <span class=\"keyword\">this</span>.sex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> xx = <span class=\"keyword\">new</span> Man(<span class=\"string\">'jarson'</span>, <span class=\"string\">'boy'</span>);</div><div class=\"line\">xx.breathe();   <span class=\"comment\">//jarson is breathing</span></div><div class=\"line\">xx.info();   <span class=\"comment\">//arsonis boy</span></div></pre></td></tr></table></figure>\n<p>代码很简单，不作赘述，可以使用文章里提到的在线工具去试试效果就能明白了。需要注意的是：<code>super()</code>是父类的构造函数。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>在ES6标准中，javascript原生支持module了。将不同功能的代码分别写在不同文件中，各模块只需<code>导出(export)</code>公共接口部分，然后在需要使用的地方通过模块的<code>导入(import)</code>就可以了。下面继续看例子：</p>\n<h3 id=\"内联导出\"><a href=\"#内联导出\" class=\"headerlink\" title=\"内联导出\"></a>内联导出</h3><p>ES6模块里的对象可在创建它们的声明中直接导出，一个模块中可无数次使用export。</p>\n<p>先看模块文件<code>app.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    breathe() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is breathing\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am runing'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am eating'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>例子中的模块导出了两个对象：Human类和run函数， eat函数没有导出，则仍为此模块私有，不能被其他文件使用。</p>\n<h3 id=\"导出一组对象\"><a href=\"#导出一组对象\" class=\"headerlink\" title=\"导出一组对象\"></a>导出一组对象</h3><p>另外，其实如果需要导出的对象很多的时候，我们可以在最后统一导出一组对象。</p>\n<p>更改<code>app.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    breathe() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is breathing\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am runing'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'i am eating'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;Human, run&#125;;</div></pre></td></tr></table></figure>\n<p>这样的写法功能和上面一样，而且也很明显，在最后可以清晰的看到导出了哪些对象。</p>\n<h3 id=\"Default导出\"><a href=\"#Default导出\" class=\"headerlink\" title=\"Default导出\"></a>Default导出</h3><p>导出时使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。它既可以用于内联导出，也可以用于一组对象导出声明中。</p>\n<p>查看导出default对象的语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">...   <span class=\"comment\">//创建类、函数等等</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;  <span class=\"comment\">//把Human类和run函数标注为default对象导出。</span></div><div class=\"line\">    Human,  </div><div class=\"line\">    run  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"无对象导入\"><a href=\"#无对象导入\" class=\"headerlink\" title=\"无对象导入\"></a>无对象导入</h3><p>如果模块包含一些逻辑要执行，且不会导出任何对象，此类对象也可以被导入到另一模块中，导入之后只执行逻辑。如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./module1.js'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"导入默认对象\"><a href=\"#导入默认对象\" class=\"headerlink\" title=\"导入默认对象\"></a>导入默认对象</h3><p>使用Default导出方式导出对象，该对象在import声明中将直接被分配给某个引用，如下例中的”app”。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> app <span class=\"keyword\">from</span> <span class=\"string\">'./module1.js'</span>;</div></pre></td></tr></table></figure>\n<p>上面例子中，默认<code>./module1.js</code>文件只导出了一个对象；若导出了一组对象，则应该在导入声明中一一列出这些对象，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Human, run&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.js'</span></div></pre></td></tr></table></figure>\n<h2 id=\"let与const\"><a href=\"#let与const\" class=\"headerlink\" title=\"let与const\"></a>let与const</h2><p>在我看来，在es6新特性中，在定义变量的时候统统使用<code>let</code>来代替<code>var</code>就好了，<code>const</code>则很直观，用来定义常量，即无法被更改值的变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);  <span class=\"comment\">//输出: 0,1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>ES6中新增的箭头操作符<code>=&gt;</code>简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，这样的写法可以为我们减少大量的代码，看下面的实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.forEach((item, i) =&gt; <span class=\"built_in\">console</span>.log(item, i));</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = arr.filter((item) =&gt; (item&lt;<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">//[6, 8, 9];</span></div></pre></td></tr></table></figure>\n<p>上面的<code>(item, i)</code>就是参数，后面的<code>console.log(item, i)</code>就是回到函数要执行的操作逻辑。</p>\n<p>上面代码转为js格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, i</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(item, i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (item &lt; <span class=\"number\">10</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</div></pre></td></tr></table></figure>\n<h2 id=\"字符串模版\"><a href=\"#字符串模版\" class=\"headerlink\" title=\"字符串模版\"></a>字符串模版</h2><p>ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。看一下实例就会明白了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//产生一个随机数</span></div><div class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\"><span class=\"comment\">//将这个数字输出到console</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`your num is <span class=\"subst\">$&#123;num&#125;</span>`</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><p>若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。我们来看例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> [x,y] = getVal(); <span class=\"comment\">//函数返回值的解构</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x:'</span>+x+<span class=\"string\">', y:'</span>+y);   <span class=\"comment\">//输出：x:1, y:2</span></div></pre></td></tr></table></figure>\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><p>现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name=name||<span class=\"string\">'tom'</span>;    <span class=\"comment\">//传统的指定默认参数的方式</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span>+name);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//运用ES6的默认参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello2</span>(<span class=\"params\">name='tom'</span>)</span>&#123;  <span class=\"comment\">//如果没有传这个参数，才会有默认值，</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello();<span class=\"comment\">//输出：Hello tom</span></div><div class=\"line\">sayHello(<span class=\"string\">'jarson'</span>);<span class=\"comment\">//输出：Hello jarson</span></div><div class=\"line\">sayHello2();<span class=\"comment\">//输出：Hello tom</span></div><div class=\"line\">sayHello2(<span class=\"string\">'jarson'</span>);<span class=\"comment\">//输出：Hello jarson</span></div></pre></td></tr></table></figure>\n<p>注意： <code>sayHello2(name=&#39;tom&#39;)</code>这里的等号，意思是没有传这个参数，则设置默认值，而不是给参数赋值的意思。</p>\n<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><p>Proxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义被监听的目标对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> engineer = &#123; name: <span class=\"string\">'Joe Sixpack'</span>, salary: <span class=\"number\">50</span> &#125;;</div><div class=\"line\"><span class=\"comment\">//定义处理程序</span></div><div class=\"line\"><span class=\"keyword\">let</span> interceptor = &#123;</div><div class=\"line\">      set(receiver, property, value) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(property, <span class=\"string\">'is changed to'</span>, value);</div><div class=\"line\">        receiver[property] = value;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//创建代理以进行侦听</span></div><div class=\"line\">engineer = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(engineer, interceptor);</div><div class=\"line\"><span class=\"comment\">//做一些改动来触发代理</span></div><div class=\"line\">engineer.salary = <span class=\"number\">70</span>;<span class=\"comment\">//控制台输出：salary is changed to 70</span></div></pre></td></tr></table></figure>\n<p>对于处理程序，是在被监听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>总的来说，虽然支持es6的情况到目前还不是很乐观，但es6的新语法特性让前端和后端的差异越来越小了，这是一个新时代的开始，我们必须要了解这些新的前沿知识，才能跟上时代的步伐。</p>\n<hr>"},{"title":"实例demo之Highextend图表","date":"2016-05-12T04:11:51.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n<header style=\"margin-top:-55px;text-align:center\">\n    <p style=\"font-size: 1.5em;margin-top: 30px;\"><span>highextend图表实例</span><a href=\"https://github.com/luckykun/highextend\" style=\"font-size:14px;font-weight:normal;\">view on github</a></p>\n</header>\n\nhighextend是基于highcharts进一步封装的图表组件，组件暴露一个`Hxt`的全局对象，它有以下一些方法来绘制不同类的图形，从此以后，画图只需简简单单的几行配置就ok了！赶紧点进来看看实例吧！\n\n```js\n    Hxt.line(elem, data, options);         //渲染默认折线图\n    Hxt.spline(elem, data, options);         //曲线图\n    Hxt.scatter(elem, data, options);         //散点图\n    Hxt.bubble(elem, data, options);         //bubble图\n    Hxt.column(elem, data, options);         //柱状图\n    Hxt.bar(elem, data, options);         //bar图，（横向柱状图）\n    Hxt.area(elem, data, options);         //区域图（默认为平滑区域图）\n    Hxt.pie(elem, data, options);         //圆饼图\n    Hxt.polar(elem, data, options);         //雷达图\n    Hxt.pyramid(elem, data, options);         //金字塔图\n    Hxt.mix(elem, data, options);         //混合图\n```\n\n<!--more-->\n\n\n# 实例展示\n\n<div class=\"high-extend-container\">\n    <div class=\"chart\" id=\"line-chart\"></div>\n    <div class=\"chart\" id=\"area-chart\"></div>\n    <div class=\"chart\" id=\"column-chart\"></div>\n    <div class=\"chart\" id=\"mix-chart\"></div>\n    <div class=\"small-chart\" id=\"pie-chart1\"></div>\n    <div class=\"small-chart\" id=\"pie-chart2\" style=\"margin-top:-28px;\"></div>\n\n</div>\n\n# 使用文档\n\n本页面的实例不全，读者可以在[我的github](https://github.com/luckykun/highextend)上访问到这个项目的所有代码，然后down下来执行以下代码就能直接在浏览器看到所有实例。\n\n```js\nnpm install   //安装依赖\ngulp   //启动服务\n```\n\n在上面介绍的方法中，有`elem`, `data`, `options`三个参数，下面依次介绍以下：\n\n- elem：绘制图表元素的id。\n- data：图表的数据。\n- options：图表配置项,`可以为空，为空则使用默认配置。`\n\n## 公共配置项\n\n- `emptyHtml`: 数据为空时的提示信息，支持html格式。\n\n- `backgroundColor`: 图表背景颜色，默认为’白色‘。\n\n- `marginTop`: 图形的上边距，例如 marginTop: 60。\n\n- `marginRight`: 图形的上边距，例如 marginRight: 60。\n\n- `chartLoad`: 设置图形加载方式。一般实时动态数据会配置此项。\n\n- `colors`: 颜色，`类型为数组`。非必选，有默认的颜色。\n\n- `title`: 图表标题，默认为空。\n\n- `subtitle`: 副标题，默认为空。\n\n- `markerEnabled`: 是否显示线条上的点，默认`true`为显示。\n\n- `markerSymbol`: 线条上点的形状，默认为‘circle’圆形，并且默认样式为空心。其他值有‘square’，‘diamond’，‘triangle’等。\n\n- `legendEnabled`: 图例是否显示，默认为`true`，显示图例。\n\n- `legendLayout`: 图例显示方式，默认为水平方向：‘horizontal’。 ‘vertical’为垂直方向。\n\n- `legendAlign`: 水平方向显示位置，默认中间位置：‘center’，其他值有‘right’，‘left’。\n\n- `legendVerticalAlign`: 垂直方向显示位置，默认‘bottom’，其他值有‘top’，‘middle’。\n\n- `legendItemMarginBottom`: 每个图例的下边距，默认为4px。\n\n- `shared`: tooltip提示框是否被共享。默认为`false`。\n\n- `valuePrefix`: tooltip悬浮框value值前面的字符，默认为空。\n\n- `valueSuffix`: tooltip悬浮框value值后面的字符，默认为空。\n\n- `xDateFormat`: tooltip中时间转化格式，默认为‘%Y-%m-%d’，即‘2016-01-10’。\n\n- `chartLabel`： 图形中的提示文案，格式为对象，如：{html:'title', style:{left:'30px', top: '5px'}}。\n\n\n## 线图/柱状图配置项\n\n\n- `Xtype`: 横坐标类型，默认为空。`如设置'datetime'，则为时间类型，默认转为'01-01'格式`。\n\n- `Ytitle`: 纵坐标标题，默认为空。\n\n- `Ytype`: 纵坐标类型，默认为空。`如设置'rate',则用1024为单位计算，且默认单位为‘kb’，大于1024单位变为‘M’`。\n\n\n\n## 饼图配置项\n\n- `size`: 饼图的整体大小（百分比），默认为100%。\n\n- `innerSize`: 内圆所占的百分比，默认为55%。\n\n- `showInLegend`: 设置圆饼图的图例是否显示，默认为`true`。\n\n- `startAngle`: 圆饼图的开始角度。\n\n- `endAngle`: 圆饼图的结束角度。\n\n- `pieLabel`: 设置圆饼图的series文案，默认为`数量`。\n\n- `pieClick`: 圆饼图的点击事件。\n\n- `pieMouseOut`: 圆饼图的mouseout事件。\n\n- `pieMouseOver`: 圆饼图的mouseover事件。\n\n\n## 雷达图配置项\n\n- `polarType`: 雷达图的形状，可设置为‘circle’－圆形，默认为‘polygon’－菱形。\n\n- `polarSize`: 雷达图大小百分比，默认95%。\n\n\n## 正负对比图（bar）配置项\n\n- `barStacking`: 设置为“normal”－表示正负对比图。\n\n\n## 混合图特有配置项\n\n- `mixPieCenter`: 混合图中饼图的特有设置--中心原点坐标，如[100,50]。\n\n- `mixPieSize`: 混合图中饼图的特有设置--饼图大小，默认为‘60%’。\n\n- `mixPieInnerSize`: 混合图中饼图的特有设置--饼图空心圆大小，默认为0。\n\n- `miePieShowInLegend`: 混合图中饼图的特有设置--是否显示legend，默认为false。\n\n--------------------------------------------------------------------------------\n\n<style>\n.high-extend-container {\n    min-height: 400px;\n    overflow: hidden;\n}\n.high-extend-container .chart {\n    background: #f5f5f5;\n    padding: 10px;\n    width: 90%;\n    height: 280px;\n}\n.high-extend-container .small-chart {\n    padding: 10px;\n    background: #f5f5f5;\n    width: 360px;\n    height: 340px;\n    float: left;\n    margin-right: 30px;\n    margin-bottom: 20px;\n    display: inline-block;\n}\n</style>\n\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script src=\"https://rawgit.com/luckykun/highextend/daily/0.0.1/build/js/highextend-min.js\"></script>\n<script type=\"text/javascript\">\n    var lineData = {\n        \"items\": [{\n            \"data\": [100,80,94,99,80,50,90],\n            \"name\": \"tom\"\n        }],\n        \"categories\": [\"first\", \"second\", \"third\", \"forth\", \"fifth\", \"sixth\", \"seventh\"]\n    };\n    var chart = Hxt.spline('line-chart', lineData, {\n        shared: true\n    });\n    chart.fn.setTitle({text: '这是我动态设置的标题'});\n    //展示动态添加一行数据，和动态删除一行数据的例子\n    var num = 1;\n    var time = function() {\n        var colors = chart.fn.options.colors;\n        if(num < 4) {\n            setTimeout(function() {\n                chart.fn.addSeries({\n                    name: 'name' + num,\n                    data:[num*50, num*50, num*50, num*50, num*50, num*50, num*50],\n                    color: colors[num]\n                });\n                num ++;\n                time();\n            }, 3000);\n        }else {\n            setTimeout(function() {\n                var series = chart.fn.series;\n                series[series.length-1].remove();\n                num  = num == 6 ? 1 : num+1;\n                time();\n            }, 3000);\n        }\n    };\n    time();\n\n    var areaData = {\n        \"items\": [{\n            \"data\": [100,105,94,79,80],\n            \"name\": \"tom\"\n        }, {\n            \"data\": [65,90,140,100,120],\n            \"name\": \"jane\"\n        }],\n        \"timeScope\": {\n            \"interval\": 86400000,\n            \"start\": 1463328000000\n        }\n    };\n    var chart1 = Hxt.area('area-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n    var chart2 = Hxt.column('column-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n\n    var pieData = {\n        \"items\": [{\n            \"name\": \"已开通\",\n            \"data\": 20\n        },{\n            \"name\": \"未开通\",\n            \"data\": 5\n        },{\n            \"name\": \"待定\",\n            \"data\": 10\n        }]\n    };\n    var chart3 = Hxt.pie('pie-chart1', pieData, {\n        size: '45%',\n        valueSuffix: '个',\n        showPercentLabels: true\n    });\n    var chart4 = Hxt.pie('pie-chart2', pieData, {    \n        startAngle: -90,  //设置角度，达到半圆效果\n        endAngle: 90\n    });\n\n                                var mixData = {\n                                    \"items\": [{\n                                        \"type\": \"column\",\n                                        \"name\": \"第一天\",\n                                        \"data\": [3, 2, 1, 3, 4]\n                                    },{\n                                        \"type\": \"column\",\n                                        \"name\": \"第二天\",\n                                        \"data\": [2, 3, 5, 7, 9]\n                                    },{\n                                        \"type\": \"spline\",\n                                        \"name\": \"平均值\",\n                                        \"data\": [2.5, 2.5, 3, 5, 6.5]\n                                    },{\n                                        \"type\": \"pie\",\n                                        \"name\": \"总量\",\n                                        \"data\": [{\n                                            \"name\": \"第一天\",\n                                            \"y\": 13\n                                        },{\n                                            \"name\": \"第二天\",\n                                            \"y\": 26\n                                        }]\n                                    }],\n                                    \"categories\": [\"苹果\", \"橘子\", \"石榴\", \"香蕉\", \"草莓\"]\n                                };\n                                var chart5 = Hxt.mix('mix-chart', mixData, {\n                                    valueSuffix: '斤',\n                                    mixPieCenter: [60, 50],\n                                    mixPieSize: '55%',\n                                    shared: true,\n                                    chartLabel: {\n                                        html: '水果两天的总销量',\n                                        style: {\n                                            left: '30px',\n                                            top: '5px'\n                                        }\n                                    }\n                                });\n</script>\n","source":"_posts/high-extend.md","raw":"---\ntitle: 实例demo之Highextend图表\ndate: '2016-05-12 12:11:51'\ncategories: 工作\ntags:\n  - demo\n  - highcharts\n  - 插件\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n<header style=\"margin-top:-55px;text-align:center\">\n    <p style=\"font-size: 1.5em;margin-top: 30px;\"><span>highextend图表实例</span><a href=\"https://github.com/luckykun/highextend\" style=\"font-size:14px;font-weight:normal;\">view on github</a></p>\n</header>\n\nhighextend是基于highcharts进一步封装的图表组件，组件暴露一个`Hxt`的全局对象，它有以下一些方法来绘制不同类的图形，从此以后，画图只需简简单单的几行配置就ok了！赶紧点进来看看实例吧！\n\n```js\n    Hxt.line(elem, data, options);         //渲染默认折线图\n    Hxt.spline(elem, data, options);         //曲线图\n    Hxt.scatter(elem, data, options);         //散点图\n    Hxt.bubble(elem, data, options);         //bubble图\n    Hxt.column(elem, data, options);         //柱状图\n    Hxt.bar(elem, data, options);         //bar图，（横向柱状图）\n    Hxt.area(elem, data, options);         //区域图（默认为平滑区域图）\n    Hxt.pie(elem, data, options);         //圆饼图\n    Hxt.polar(elem, data, options);         //雷达图\n    Hxt.pyramid(elem, data, options);         //金字塔图\n    Hxt.mix(elem, data, options);         //混合图\n```\n\n<!--more-->\n\n\n# 实例展示\n\n<div class=\"high-extend-container\">\n    <div class=\"chart\" id=\"line-chart\"></div>\n    <div class=\"chart\" id=\"area-chart\"></div>\n    <div class=\"chart\" id=\"column-chart\"></div>\n    <div class=\"chart\" id=\"mix-chart\"></div>\n    <div class=\"small-chart\" id=\"pie-chart1\"></div>\n    <div class=\"small-chart\" id=\"pie-chart2\" style=\"margin-top:-28px;\"></div>\n\n</div>\n\n# 使用文档\n\n本页面的实例不全，读者可以在[我的github](https://github.com/luckykun/highextend)上访问到这个项目的所有代码，然后down下来执行以下代码就能直接在浏览器看到所有实例。\n\n```js\nnpm install   //安装依赖\ngulp   //启动服务\n```\n\n在上面介绍的方法中，有`elem`, `data`, `options`三个参数，下面依次介绍以下：\n\n- elem：绘制图表元素的id。\n- data：图表的数据。\n- options：图表配置项,`可以为空，为空则使用默认配置。`\n\n## 公共配置项\n\n- `emptyHtml`: 数据为空时的提示信息，支持html格式。\n\n- `backgroundColor`: 图表背景颜色，默认为’白色‘。\n\n- `marginTop`: 图形的上边距，例如 marginTop: 60。\n\n- `marginRight`: 图形的上边距，例如 marginRight: 60。\n\n- `chartLoad`: 设置图形加载方式。一般实时动态数据会配置此项。\n\n- `colors`: 颜色，`类型为数组`。非必选，有默认的颜色。\n\n- `title`: 图表标题，默认为空。\n\n- `subtitle`: 副标题，默认为空。\n\n- `markerEnabled`: 是否显示线条上的点，默认`true`为显示。\n\n- `markerSymbol`: 线条上点的形状，默认为‘circle’圆形，并且默认样式为空心。其他值有‘square’，‘diamond’，‘triangle’等。\n\n- `legendEnabled`: 图例是否显示，默认为`true`，显示图例。\n\n- `legendLayout`: 图例显示方式，默认为水平方向：‘horizontal’。 ‘vertical’为垂直方向。\n\n- `legendAlign`: 水平方向显示位置，默认中间位置：‘center’，其他值有‘right’，‘left’。\n\n- `legendVerticalAlign`: 垂直方向显示位置，默认‘bottom’，其他值有‘top’，‘middle’。\n\n- `legendItemMarginBottom`: 每个图例的下边距，默认为4px。\n\n- `shared`: tooltip提示框是否被共享。默认为`false`。\n\n- `valuePrefix`: tooltip悬浮框value值前面的字符，默认为空。\n\n- `valueSuffix`: tooltip悬浮框value值后面的字符，默认为空。\n\n- `xDateFormat`: tooltip中时间转化格式，默认为‘%Y-%m-%d’，即‘2016-01-10’。\n\n- `chartLabel`： 图形中的提示文案，格式为对象，如：{html:'title', style:{left:'30px', top: '5px'}}。\n\n\n## 线图/柱状图配置项\n\n\n- `Xtype`: 横坐标类型，默认为空。`如设置'datetime'，则为时间类型，默认转为'01-01'格式`。\n\n- `Ytitle`: 纵坐标标题，默认为空。\n\n- `Ytype`: 纵坐标类型，默认为空。`如设置'rate',则用1024为单位计算，且默认单位为‘kb’，大于1024单位变为‘M’`。\n\n\n\n## 饼图配置项\n\n- `size`: 饼图的整体大小（百分比），默认为100%。\n\n- `innerSize`: 内圆所占的百分比，默认为55%。\n\n- `showInLegend`: 设置圆饼图的图例是否显示，默认为`true`。\n\n- `startAngle`: 圆饼图的开始角度。\n\n- `endAngle`: 圆饼图的结束角度。\n\n- `pieLabel`: 设置圆饼图的series文案，默认为`数量`。\n\n- `pieClick`: 圆饼图的点击事件。\n\n- `pieMouseOut`: 圆饼图的mouseout事件。\n\n- `pieMouseOver`: 圆饼图的mouseover事件。\n\n\n## 雷达图配置项\n\n- `polarType`: 雷达图的形状，可设置为‘circle’－圆形，默认为‘polygon’－菱形。\n\n- `polarSize`: 雷达图大小百分比，默认95%。\n\n\n## 正负对比图（bar）配置项\n\n- `barStacking`: 设置为“normal”－表示正负对比图。\n\n\n## 混合图特有配置项\n\n- `mixPieCenter`: 混合图中饼图的特有设置--中心原点坐标，如[100,50]。\n\n- `mixPieSize`: 混合图中饼图的特有设置--饼图大小，默认为‘60%’。\n\n- `mixPieInnerSize`: 混合图中饼图的特有设置--饼图空心圆大小，默认为0。\n\n- `miePieShowInLegend`: 混合图中饼图的特有设置--是否显示legend，默认为false。\n\n--------------------------------------------------------------------------------\n\n<style>\n.high-extend-container {\n    min-height: 400px;\n    overflow: hidden;\n}\n.high-extend-container .chart {\n    background: #f5f5f5;\n    padding: 10px;\n    width: 90%;\n    height: 280px;\n}\n.high-extend-container .small-chart {\n    padding: 10px;\n    background: #f5f5f5;\n    width: 360px;\n    height: 340px;\n    float: left;\n    margin-right: 30px;\n    margin-bottom: 20px;\n    display: inline-block;\n}\n</style>\n\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script src=\"https://rawgit.com/luckykun/highextend/daily/0.0.1/build/js/highextend-min.js\"></script>\n<script type=\"text/javascript\">\n    var lineData = {\n        \"items\": [{\n            \"data\": [100,80,94,99,80,50,90],\n            \"name\": \"tom\"\n        }],\n        \"categories\": [\"first\", \"second\", \"third\", \"forth\", \"fifth\", \"sixth\", \"seventh\"]\n    };\n    var chart = Hxt.spline('line-chart', lineData, {\n        shared: true\n    });\n    chart.fn.setTitle({text: '这是我动态设置的标题'});\n    //展示动态添加一行数据，和动态删除一行数据的例子\n    var num = 1;\n    var time = function() {\n        var colors = chart.fn.options.colors;\n        if(num < 4) {\n            setTimeout(function() {\n                chart.fn.addSeries({\n                    name: 'name' + num,\n                    data:[num*50, num*50, num*50, num*50, num*50, num*50, num*50],\n                    color: colors[num]\n                });\n                num ++;\n                time();\n            }, 3000);\n        }else {\n            setTimeout(function() {\n                var series = chart.fn.series;\n                series[series.length-1].remove();\n                num  = num == 6 ? 1 : num+1;\n                time();\n            }, 3000);\n        }\n    };\n    time();\n\n    var areaData = {\n        \"items\": [{\n            \"data\": [100,105,94,79,80],\n            \"name\": \"tom\"\n        }, {\n            \"data\": [65,90,140,100,120],\n            \"name\": \"jane\"\n        }],\n        \"timeScope\": {\n            \"interval\": 86400000,\n            \"start\": 1463328000000\n        }\n    };\n    var chart1 = Hxt.area('area-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n    var chart2 = Hxt.column('column-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n\n    var pieData = {\n        \"items\": [{\n            \"name\": \"已开通\",\n            \"data\": 20\n        },{\n            \"name\": \"未开通\",\n            \"data\": 5\n        },{\n            \"name\": \"待定\",\n            \"data\": 10\n        }]\n    };\n    var chart3 = Hxt.pie('pie-chart1', pieData, {\n        size: '45%',\n        valueSuffix: '个',\n        showPercentLabels: true\n    });\n    var chart4 = Hxt.pie('pie-chart2', pieData, {    \n        startAngle: -90,  //设置角度，达到半圆效果\n        endAngle: 90\n    });\n\n                                var mixData = {\n                                    \"items\": [{\n                                        \"type\": \"column\",\n                                        \"name\": \"第一天\",\n                                        \"data\": [3, 2, 1, 3, 4]\n                                    },{\n                                        \"type\": \"column\",\n                                        \"name\": \"第二天\",\n                                        \"data\": [2, 3, 5, 7, 9]\n                                    },{\n                                        \"type\": \"spline\",\n                                        \"name\": \"平均值\",\n                                        \"data\": [2.5, 2.5, 3, 5, 6.5]\n                                    },{\n                                        \"type\": \"pie\",\n                                        \"name\": \"总量\",\n                                        \"data\": [{\n                                            \"name\": \"第一天\",\n                                            \"y\": 13\n                                        },{\n                                            \"name\": \"第二天\",\n                                            \"y\": 26\n                                        }]\n                                    }],\n                                    \"categories\": [\"苹果\", \"橘子\", \"石榴\", \"香蕉\", \"草莓\"]\n                                };\n                                var chart5 = Hxt.mix('mix-chart', mixData, {\n                                    valueSuffix: '斤',\n                                    mixPieCenter: [60, 50],\n                                    mixPieSize: '55%',\n                                    shared: true,\n                                    chartLabel: {\n                                        html: '水果两天的总销量',\n                                        style: {\n                                            left: '30px',\n                                            top: '5px'\n                                        }\n                                    }\n                                });\n</script>\n","slug":"high-extend","published":1,"updated":"2016-05-29T04:37:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdau000cu13gntvry495","content":"<hr>\n<header style=\"margin-top:-55px;text-align:center\"><br>    <p style=\"font-size: 1.5em;margin-top: 30px;\"><span>highextend图表实例</span><a href=\"https://github.com/luckykun/highextend\" style=\"font-size:14px;font-weight:normal;\" target=\"_blank\" rel=\"external\">view on github</a></p><br></header>\n\n<p>highextend是基于highcharts进一步封装的图表组件，组件暴露一个<code>Hxt</code>的全局对象，它有以下一些方法来绘制不同类的图形，从此以后，画图只需简简单单的几行配置就ok了！赶紧点进来看看实例吧！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Hxt.line(elem, data, options);         <span class=\"comment\">//渲染默认折线图</span></div><div class=\"line\">Hxt.spline(elem, data, options);         <span class=\"comment\">//曲线图</span></div><div class=\"line\">Hxt.scatter(elem, data, options);         <span class=\"comment\">//散点图</span></div><div class=\"line\">Hxt.bubble(elem, data, options);         <span class=\"comment\">//bubble图</span></div><div class=\"line\">Hxt.column(elem, data, options);         <span class=\"comment\">//柱状图</span></div><div class=\"line\">Hxt.bar(elem, data, options);         <span class=\"comment\">//bar图，（横向柱状图）</span></div><div class=\"line\">Hxt.area(elem, data, options);         <span class=\"comment\">//区域图（默认为平滑区域图）</span></div><div class=\"line\">Hxt.pie(elem, data, options);         <span class=\"comment\">//圆饼图</span></div><div class=\"line\">Hxt.polar(elem, data, options);         <span class=\"comment\">//雷达图</span></div><div class=\"line\">Hxt.pyramid(elem, data, options);         <span class=\"comment\">//金字塔图</span></div><div class=\"line\">Hxt.mix(elem, data, options);         <span class=\"comment\">//混合图</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"实例展示\"><a href=\"#实例展示\" class=\"headerlink\" title=\"实例展示\"></a>实例展示</h1><div class=\"high-extend-container\"><br>    <div class=\"chart\" id=\"line-chart\"></div><br>    <div class=\"chart\" id=\"area-chart\"></div><br>    <div class=\"chart\" id=\"column-chart\"></div><br>    <div class=\"chart\" id=\"mix-chart\"></div><br>    <div class=\"small-chart\" id=\"pie-chart1\"></div><br>    <div class=\"small-chart\" id=\"pie-chart2\" style=\"margin-top:-28px;\"></div>\n\n<p></p></div><p></p>\n<h1 id=\"使用文档\"><a href=\"#使用文档\" class=\"headerlink\" title=\"使用文档\"></a>使用文档</h1><p>本页面的实例不全，读者可以在<a href=\"https://github.com/luckykun/highextend\" target=\"_blank\" rel=\"external\">我的github</a>上访问到这个项目的所有代码，然后down下来执行以下代码就能直接在浏览器看到所有实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install   <span class=\"comment\">//安装依赖</span></div><div class=\"line\">gulp   <span class=\"comment\">//启动服务</span></div></pre></td></tr></table></figure>\n<p>在上面介绍的方法中，有<code>elem</code>, <code>data</code>, <code>options</code>三个参数，下面依次介绍以下：</p>\n<ul>\n<li>elem：绘制图表元素的id。</li>\n<li>data：图表的数据。</li>\n<li>options：图表配置项,<code>可以为空，为空则使用默认配置。</code></li>\n</ul>\n<h2 id=\"公共配置项\"><a href=\"#公共配置项\" class=\"headerlink\" title=\"公共配置项\"></a>公共配置项</h2><ul>\n<li><p><code>emptyHtml</code>: 数据为空时的提示信息，支持html格式。</p>\n</li>\n<li><p><code>backgroundColor</code>: 图表背景颜色，默认为’白色‘。</p>\n</li>\n<li><p><code>marginTop</code>: 图形的上边距，例如 marginTop: 60。</p>\n</li>\n<li><p><code>marginRight</code>: 图形的上边距，例如 marginRight: 60。</p>\n</li>\n<li><p><code>chartLoad</code>: 设置图形加载方式。一般实时动态数据会配置此项。</p>\n</li>\n<li><p><code>colors</code>: 颜色，<code>类型为数组</code>。非必选，有默认的颜色。</p>\n</li>\n<li><p><code>title</code>: 图表标题，默认为空。</p>\n</li>\n<li><p><code>subtitle</code>: 副标题，默认为空。</p>\n</li>\n<li><p><code>markerEnabled</code>: 是否显示线条上的点，默认<code>true</code>为显示。</p>\n</li>\n<li><p><code>markerSymbol</code>: 线条上点的形状，默认为‘circle’圆形，并且默认样式为空心。其他值有‘square’，‘diamond’，‘triangle’等。</p>\n</li>\n<li><p><code>legendEnabled</code>: 图例是否显示，默认为<code>true</code>，显示图例。</p>\n</li>\n<li><p><code>legendLayout</code>: 图例显示方式，默认为水平方向：‘horizontal’。 ‘vertical’为垂直方向。</p>\n</li>\n<li><p><code>legendAlign</code>: 水平方向显示位置，默认中间位置：‘center’，其他值有‘right’，‘left’。</p>\n</li>\n<li><p><code>legendVerticalAlign</code>: 垂直方向显示位置，默认‘bottom’，其他值有‘top’，‘middle’。</p>\n</li>\n<li><p><code>legendItemMarginBottom</code>: 每个图例的下边距，默认为4px。</p>\n</li>\n<li><p><code>shared</code>: tooltip提示框是否被共享。默认为<code>false</code>。</p>\n</li>\n<li><p><code>valuePrefix</code>: tooltip悬浮框value值前面的字符，默认为空。</p>\n</li>\n<li><p><code>valueSuffix</code>: tooltip悬浮框value值后面的字符，默认为空。</p>\n</li>\n<li><p><code>xDateFormat</code>: tooltip中时间转化格式，默认为‘%Y-%m-%d’，即‘2016-01-10’。</p>\n</li>\n<li><p><code>chartLabel</code>： 图形中的提示文案，格式为对象，如：{html:’title’, style:{left:’30px’, top: ‘5px’}}。</p>\n</li>\n</ul>\n<h2 id=\"线图-柱状图配置项\"><a href=\"#线图-柱状图配置项\" class=\"headerlink\" title=\"线图/柱状图配置项\"></a>线图/柱状图配置项</h2><ul>\n<li><p><code>Xtype</code>: 横坐标类型，默认为空。<code>如设置&#39;datetime&#39;，则为时间类型，默认转为&#39;01-01&#39;格式</code>。</p>\n</li>\n<li><p><code>Ytitle</code>: 纵坐标标题，默认为空。</p>\n</li>\n<li><p><code>Ytype</code>: 纵坐标类型，默认为空。<code>如设置&#39;rate&#39;,则用1024为单位计算，且默认单位为‘kb’，大于1024单位变为‘M’</code>。</p>\n</li>\n</ul>\n<h2 id=\"饼图配置项\"><a href=\"#饼图配置项\" class=\"headerlink\" title=\"饼图配置项\"></a>饼图配置项</h2><ul>\n<li><p><code>size</code>: 饼图的整体大小（百分比），默认为100%。</p>\n</li>\n<li><p><code>innerSize</code>: 内圆所占的百分比，默认为55%。</p>\n</li>\n<li><p><code>showInLegend</code>: 设置圆饼图的图例是否显示，默认为<code>true</code>。</p>\n</li>\n<li><p><code>startAngle</code>: 圆饼图的开始角度。</p>\n</li>\n<li><p><code>endAngle</code>: 圆饼图的结束角度。</p>\n</li>\n<li><p><code>pieLabel</code>: 设置圆饼图的series文案，默认为<code>数量</code>。</p>\n</li>\n<li><p><code>pieClick</code>: 圆饼图的点击事件。</p>\n</li>\n<li><p><code>pieMouseOut</code>: 圆饼图的mouseout事件。</p>\n</li>\n<li><p><code>pieMouseOver</code>: 圆饼图的mouseover事件。</p>\n</li>\n</ul>\n<h2 id=\"雷达图配置项\"><a href=\"#雷达图配置项\" class=\"headerlink\" title=\"雷达图配置项\"></a>雷达图配置项</h2><ul>\n<li><p><code>polarType</code>: 雷达图的形状，可设置为‘circle’－圆形，默认为‘polygon’－菱形。</p>\n</li>\n<li><p><code>polarSize</code>: 雷达图大小百分比，默认95%。</p>\n</li>\n</ul>\n<h2 id=\"正负对比图（bar）配置项\"><a href=\"#正负对比图（bar）配置项\" class=\"headerlink\" title=\"正负对比图（bar）配置项\"></a>正负对比图（bar）配置项</h2><ul>\n<li><code>barStacking</code>: 设置为“normal”－表示正负对比图。</li>\n</ul>\n<h2 id=\"混合图特有配置项\"><a href=\"#混合图特有配置项\" class=\"headerlink\" title=\"混合图特有配置项\"></a>混合图特有配置项</h2><ul>\n<li><p><code>mixPieCenter</code>: 混合图中饼图的特有设置–中心原点坐标，如[100,50]。</p>\n</li>\n<li><p><code>mixPieSize</code>: 混合图中饼图的特有设置–饼图大小，默认为‘60%’。</p>\n</li>\n<li><p><code>mixPieInnerSize</code>: 混合图中饼图的特有设置–饼图空心圆大小，默认为0。</p>\n</li>\n<li><p><code>miePieShowInLegend</code>: 混合图中饼图的特有设置–是否显示legend，默认为false。</p>\n</li>\n</ul>\n<hr>\n<style>\n.high-extend-container {\n    min-height: 400px;\n    overflow: hidden;\n}\n.high-extend-container .chart {\n    background: #f5f5f5;\n    padding: 10px;\n    width: 90%;\n    height: 280px;\n}\n.high-extend-container .small-chart {\n    padding: 10px;\n    background: #f5f5f5;\n    width: 360px;\n    height: 340px;\n    float: left;\n    margin-right: 30px;\n    margin-bottom: 20px;\n    display: inline-block;\n}\n</style>\n\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script src=\"https://rawgit.com/luckykun/highextend/daily/0.0.1/build/js/highextend-min.js\"></script>\n<script type=\"text/javascript\">\n    var lineData = {\n        \"items\": [{\n            \"data\": [100,80,94,99,80,50,90],\n            \"name\": \"tom\"\n        }],\n        \"categories\": [\"first\", \"second\", \"third\", \"forth\", \"fifth\", \"sixth\", \"seventh\"]\n    };\n    var chart = Hxt.spline('line-chart', lineData, {\n        shared: true\n    });\n    chart.fn.setTitle({text: '这是我动态设置的标题'});\n    //展示动态添加一行数据，和动态删除一行数据的例子\n    var num = 1;\n    var time = function() {\n        var colors = chart.fn.options.colors;\n        if(num < 4) {\n            setTimeout(function() {\n                chart.fn.addSeries({\n                    name: 'name' + num,\n                    data:[num*50, num*50, num*50, num*50, num*50, num*50, num*50],\n                    color: colors[num]\n                });\n                num ++;\n                time();\n            }, 3000);\n        }else {\n            setTimeout(function() {\n                var series = chart.fn.series;\n                series[series.length-1].remove();\n                num  = num == 6 ? 1 : num+1;\n                time();\n            }, 3000);\n        }\n    };\n    time();\n\n    var areaData = {\n        \"items\": [{\n            \"data\": [100,105,94,79,80],\n            \"name\": \"tom\"\n        }, {\n            \"data\": [65,90,140,100,120],\n            \"name\": \"jane\"\n        }],\n        \"timeScope\": {\n            \"interval\": 86400000,\n            \"start\": 1463328000000\n        }\n    };\n    var chart1 = Hxt.area('area-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n    var chart2 = Hxt.column('column-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n\n    var pieData = {\n        \"items\": [{\n            \"name\": \"已开通\",\n            \"data\": 20\n        },{\n            \"name\": \"未开通\",\n            \"data\": 5\n        },{\n            \"name\": \"待定\",\n            \"data\": 10\n        }]\n    };\n    var chart3 = Hxt.pie('pie-chart1', pieData, {\n        size: '45%',\n        valueSuffix: '个',\n        showPercentLabels: true\n    });\n    var chart4 = Hxt.pie('pie-chart2', pieData, {    \n        startAngle: -90,  //设置角度，达到半圆效果\n        endAngle: 90\n    });\n\n                                var mixData = {\n                                    \"items\": [{\n                                        \"type\": \"column\",\n                                        \"name\": \"第一天\",\n                                        \"data\": [3, 2, 1, 3, 4]\n                                    },{\n                                        \"type\": \"column\",\n                                        \"name\": \"第二天\",\n                                        \"data\": [2, 3, 5, 7, 9]\n                                    },{\n                                        \"type\": \"spline\",\n                                        \"name\": \"平均值\",\n                                        \"data\": [2.5, 2.5, 3, 5, 6.5]\n                                    },{\n                                        \"type\": \"pie\",\n                                        \"name\": \"总量\",\n                                        \"data\": [{\n                                            \"name\": \"第一天\",\n                                            \"y\": 13\n                                        },{\n                                            \"name\": \"第二天\",\n                                            \"y\": 26\n                                        }]\n                                    }],\n                                    \"categories\": [\"苹果\", \"橘子\", \"石榴\", \"香蕉\", \"草莓\"]\n                                };\n                                var chart5 = Hxt.mix('mix-chart', mixData, {\n                                    valueSuffix: '斤',\n                                    mixPieCenter: [60, 50],\n                                    mixPieSize: '55%',\n                                    shared: true,\n                                    chartLabel: {\n                                        html: '水果两天的总销量',\n                                        style: {\n                                            left: '30px',\n                                            top: '5px'\n                                        }\n                                    }\n                                });\n</script>\n","excerpt":"<hr>\n<header style=\"margin-top:-55px;text-align:center\"><br>    <p style=\"font-size: 1.5em;margin-top: 30px;\"><span>highextend图表实例</span><a href=\"https://github.com/luckykun/highextend\" style=\"font-size:14px;font-weight:normal;\">view on github</a></p><br></header>\n\n<p>highextend是基于highcharts进一步封装的图表组件，组件暴露一个<code>Hxt</code>的全局对象，它有以下一些方法来绘制不同类的图形，从此以后，画图只需简简单单的几行配置就ok了！赶紧点进来看看实例吧！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Hxt.line(elem, data, options);         <span class=\"comment\">//渲染默认折线图</span></div><div class=\"line\">Hxt.spline(elem, data, options);         <span class=\"comment\">//曲线图</span></div><div class=\"line\">Hxt.scatter(elem, data, options);         <span class=\"comment\">//散点图</span></div><div class=\"line\">Hxt.bubble(elem, data, options);         <span class=\"comment\">//bubble图</span></div><div class=\"line\">Hxt.column(elem, data, options);         <span class=\"comment\">//柱状图</span></div><div class=\"line\">Hxt.bar(elem, data, options);         <span class=\"comment\">//bar图，（横向柱状图）</span></div><div class=\"line\">Hxt.area(elem, data, options);         <span class=\"comment\">//区域图（默认为平滑区域图）</span></div><div class=\"line\">Hxt.pie(elem, data, options);         <span class=\"comment\">//圆饼图</span></div><div class=\"line\">Hxt.polar(elem, data, options);         <span class=\"comment\">//雷达图</span></div><div class=\"line\">Hxt.pyramid(elem, data, options);         <span class=\"comment\">//金字塔图</span></div><div class=\"line\">Hxt.mix(elem, data, options);         <span class=\"comment\">//混合图</span></div></pre></td></tr></table></figure>","more":"<h1 id=\"实例展示\"><a href=\"#实例展示\" class=\"headerlink\" title=\"实例展示\"></a>实例展示</h1><div class=\"high-extend-container\"><br>    <div class=\"chart\" id=\"line-chart\"></div><br>    <div class=\"chart\" id=\"area-chart\"></div><br>    <div class=\"chart\" id=\"column-chart\"></div><br>    <div class=\"chart\" id=\"mix-chart\"></div><br>    <div class=\"small-chart\" id=\"pie-chart1\"></div><br>    <div class=\"small-chart\" id=\"pie-chart2\" style=\"margin-top:-28px;\"></div>\n\n<p></div></p>\n<h1 id=\"使用文档\"><a href=\"#使用文档\" class=\"headerlink\" title=\"使用文档\"></a>使用文档</h1><p>本页面的实例不全，读者可以在<a href=\"https://github.com/luckykun/highextend\">我的github</a>上访问到这个项目的所有代码，然后down下来执行以下代码就能直接在浏览器看到所有实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install   <span class=\"comment\">//安装依赖</span></div><div class=\"line\">gulp   <span class=\"comment\">//启动服务</span></div></pre></td></tr></table></figure>\n<p>在上面介绍的方法中，有<code>elem</code>, <code>data</code>, <code>options</code>三个参数，下面依次介绍以下：</p>\n<ul>\n<li>elem：绘制图表元素的id。</li>\n<li>data：图表的数据。</li>\n<li>options：图表配置项,<code>可以为空，为空则使用默认配置。</code></li>\n</ul>\n<h2 id=\"公共配置项\"><a href=\"#公共配置项\" class=\"headerlink\" title=\"公共配置项\"></a>公共配置项</h2><ul>\n<li><p><code>emptyHtml</code>: 数据为空时的提示信息，支持html格式。</p>\n</li>\n<li><p><code>backgroundColor</code>: 图表背景颜色，默认为’白色‘。</p>\n</li>\n<li><p><code>marginTop</code>: 图形的上边距，例如 marginTop: 60。</p>\n</li>\n<li><p><code>marginRight</code>: 图形的上边距，例如 marginRight: 60。</p>\n</li>\n<li><p><code>chartLoad</code>: 设置图形加载方式。一般实时动态数据会配置此项。</p>\n</li>\n<li><p><code>colors</code>: 颜色，<code>类型为数组</code>。非必选，有默认的颜色。</p>\n</li>\n<li><p><code>title</code>: 图表标题，默认为空。</p>\n</li>\n<li><p><code>subtitle</code>: 副标题，默认为空。</p>\n</li>\n<li><p><code>markerEnabled</code>: 是否显示线条上的点，默认<code>true</code>为显示。</p>\n</li>\n<li><p><code>markerSymbol</code>: 线条上点的形状，默认为‘circle’圆形，并且默认样式为空心。其他值有‘square’，‘diamond’，‘triangle’等。</p>\n</li>\n<li><p><code>legendEnabled</code>: 图例是否显示，默认为<code>true</code>，显示图例。</p>\n</li>\n<li><p><code>legendLayout</code>: 图例显示方式，默认为水平方向：‘horizontal’。 ‘vertical’为垂直方向。</p>\n</li>\n<li><p><code>legendAlign</code>: 水平方向显示位置，默认中间位置：‘center’，其他值有‘right’，‘left’。</p>\n</li>\n<li><p><code>legendVerticalAlign</code>: 垂直方向显示位置，默认‘bottom’，其他值有‘top’，‘middle’。</p>\n</li>\n<li><p><code>legendItemMarginBottom</code>: 每个图例的下边距，默认为4px。</p>\n</li>\n<li><p><code>shared</code>: tooltip提示框是否被共享。默认为<code>false</code>。</p>\n</li>\n<li><p><code>valuePrefix</code>: tooltip悬浮框value值前面的字符，默认为空。</p>\n</li>\n<li><p><code>valueSuffix</code>: tooltip悬浮框value值后面的字符，默认为空。</p>\n</li>\n<li><p><code>xDateFormat</code>: tooltip中时间转化格式，默认为‘%Y-%m-%d’，即‘2016-01-10’。</p>\n</li>\n<li><p><code>chartLabel</code>： 图形中的提示文案，格式为对象，如：{html:’title’, style:{left:’30px’, top: ‘5px’}}。</p>\n</li>\n</ul>\n<h2 id=\"线图-柱状图配置项\"><a href=\"#线图-柱状图配置项\" class=\"headerlink\" title=\"线图/柱状图配置项\"></a>线图/柱状图配置项</h2><ul>\n<li><p><code>Xtype</code>: 横坐标类型，默认为空。<code>如设置&#39;datetime&#39;，则为时间类型，默认转为&#39;01-01&#39;格式</code>。</p>\n</li>\n<li><p><code>Ytitle</code>: 纵坐标标题，默认为空。</p>\n</li>\n<li><p><code>Ytype</code>: 纵坐标类型，默认为空。<code>如设置&#39;rate&#39;,则用1024为单位计算，且默认单位为‘kb’，大于1024单位变为‘M’</code>。</p>\n</li>\n</ul>\n<h2 id=\"饼图配置项\"><a href=\"#饼图配置项\" class=\"headerlink\" title=\"饼图配置项\"></a>饼图配置项</h2><ul>\n<li><p><code>size</code>: 饼图的整体大小（百分比），默认为100%。</p>\n</li>\n<li><p><code>innerSize</code>: 内圆所占的百分比，默认为55%。</p>\n</li>\n<li><p><code>showInLegend</code>: 设置圆饼图的图例是否显示，默认为<code>true</code>。</p>\n</li>\n<li><p><code>startAngle</code>: 圆饼图的开始角度。</p>\n</li>\n<li><p><code>endAngle</code>: 圆饼图的结束角度。</p>\n</li>\n<li><p><code>pieLabel</code>: 设置圆饼图的series文案，默认为<code>数量</code>。</p>\n</li>\n<li><p><code>pieClick</code>: 圆饼图的点击事件。</p>\n</li>\n<li><p><code>pieMouseOut</code>: 圆饼图的mouseout事件。</p>\n</li>\n<li><p><code>pieMouseOver</code>: 圆饼图的mouseover事件。</p>\n</li>\n</ul>\n<h2 id=\"雷达图配置项\"><a href=\"#雷达图配置项\" class=\"headerlink\" title=\"雷达图配置项\"></a>雷达图配置项</h2><ul>\n<li><p><code>polarType</code>: 雷达图的形状，可设置为‘circle’－圆形，默认为‘polygon’－菱形。</p>\n</li>\n<li><p><code>polarSize</code>: 雷达图大小百分比，默认95%。</p>\n</li>\n</ul>\n<h2 id=\"正负对比图（bar）配置项\"><a href=\"#正负对比图（bar）配置项\" class=\"headerlink\" title=\"正负对比图（bar）配置项\"></a>正负对比图（bar）配置项</h2><ul>\n<li><code>barStacking</code>: 设置为“normal”－表示正负对比图。</li>\n</ul>\n<h2 id=\"混合图特有配置项\"><a href=\"#混合图特有配置项\" class=\"headerlink\" title=\"混合图特有配置项\"></a>混合图特有配置项</h2><ul>\n<li><p><code>mixPieCenter</code>: 混合图中饼图的特有设置–中心原点坐标，如[100,50]。</p>\n</li>\n<li><p><code>mixPieSize</code>: 混合图中饼图的特有设置–饼图大小，默认为‘60%’。</p>\n</li>\n<li><p><code>mixPieInnerSize</code>: 混合图中饼图的特有设置–饼图空心圆大小，默认为0。</p>\n</li>\n<li><p><code>miePieShowInLegend</code>: 混合图中饼图的特有设置–是否显示legend，默认为false。</p>\n</li>\n</ul>\n<hr>\n<style>\n.high-extend-container {\n    min-height: 400px;\n    overflow: hidden;\n}\n.high-extend-container .chart {\n    background: #f5f5f5;\n    padding: 10px;\n    width: 90%;\n    height: 280px;\n}\n.high-extend-container .small-chart {\n    padding: 10px;\n    background: #f5f5f5;\n    width: 360px;\n    height: 340px;\n    float: left;\n    margin-right: 30px;\n    margin-bottom: 20px;\n    display: inline-block;\n}\n</style>\n\n<script src=\"http://cdn.hcharts.cn/highcharts/highcharts.js\"></script>\n<script src=\"https://rawgit.com/luckykun/highextend/daily/0.0.1/build/js/highextend-min.js\"></script>\n<script type=\"text/javascript\">\n    var lineData = {\n        \"items\": [{\n            \"data\": [100,80,94,99,80,50,90],\n            \"name\": \"tom\"\n        }],\n        \"categories\": [\"first\", \"second\", \"third\", \"forth\", \"fifth\", \"sixth\", \"seventh\"]\n    };\n    var chart = Hxt.spline('line-chart', lineData, {\n        shared: true\n    });\n    chart.fn.setTitle({text: '这是我动态设置的标题'});\n    //展示动态添加一行数据，和动态删除一行数据的例子\n    var num = 1;\n    var time = function() {\n        var colors = chart.fn.options.colors;\n        if(num < 4) {\n            setTimeout(function() {\n                chart.fn.addSeries({\n                    name: 'name' + num,\n                    data:[num*50, num*50, num*50, num*50, num*50, num*50, num*50],\n                    color: colors[num]\n                });\n                num ++;\n                time();\n            }, 3000);\n        }else {\n            setTimeout(function() {\n                var series = chart.fn.series;\n                series[series.length-1].remove();\n                num  = num == 6 ? 1 : num+1;\n                time();\n            }, 3000);\n        }\n    };\n    time();\n\n    var areaData = {\n        \"items\": [{\n            \"data\": [100,105,94,79,80],\n            \"name\": \"tom\"\n        }, {\n            \"data\": [65,90,140,100,120],\n            \"name\": \"jane\"\n        }],\n        \"timeScope\": {\n            \"interval\": 86400000,\n            \"start\": 1463328000000\n        }\n    };\n    var chart1 = Hxt.area('area-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n    var chart2 = Hxt.column('column-chart', areaData, {    //曲线图\n        Xtype: 'datetime',\n        shared: true\n    });\n\n    var pieData = {\n        \"items\": [{\n            \"name\": \"已开通\",\n            \"data\": 20\n        },{\n            \"name\": \"未开通\",\n            \"data\": 5\n        },{\n            \"name\": \"待定\",\n            \"data\": 10\n        }]\n    };\n    var chart3 = Hxt.pie('pie-chart1', pieData, {\n        size: '45%',\n        valueSuffix: '个',\n        showPercentLabels: true\n    });\n    var chart4 = Hxt.pie('pie-chart2', pieData, {    \n        startAngle: -90,  //设置角度，达到半圆效果\n        endAngle: 90\n    });\n\n                                var mixData = {\n                                    \"items\": [{\n                                        \"type\": \"column\",\n                                        \"name\": \"第一天\",\n                                        \"data\": [3, 2, 1, 3, 4]\n                                    },{\n                                        \"type\": \"column\",\n                                        \"name\": \"第二天\",\n                                        \"data\": [2, 3, 5, 7, 9]\n                                    },{\n                                        \"type\": \"spline\",\n                                        \"name\": \"平均值\",\n                                        \"data\": [2.5, 2.5, 3, 5, 6.5]\n                                    },{\n                                        \"type\": \"pie\",\n                                        \"name\": \"总量\",\n                                        \"data\": [{\n                                            \"name\": \"第一天\",\n                                            \"y\": 13\n                                        },{\n                                            \"name\": \"第二天\",\n                                            \"y\": 26\n                                        }]\n                                    }],\n                                    \"categories\": [\"苹果\", \"橘子\", \"石榴\", \"香蕉\", \"草莓\"]\n                                };\n                                var chart5 = Hxt.mix('mix-chart', mixData, {\n                                    valueSuffix: '斤',\n                                    mixPieCenter: [60, 50],\n                                    mixPieSize: '55%',\n                                    shared: true,\n                                    chartLabel: {\n                                        html: '水果两天的总销量',\n                                        style: {\n                                            left: '30px',\n                                            top: '5px'\n                                        }\n                                    }\n                                });\n</script>"},{"title":"hexo博客进阶－相册和独立域名","date":"2016-05-20T15:11:51.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n之前我已经写了一篇文章详细的讲述了如何使用hexo搭建github博客。如果还没有看的可以去看看，[hexo搭建博客](/work/2016-04-23/heoll-hexo.html)\n\n其实，根据这篇文章的过程我们就能够搭建一个专属于自己，并且非常美观的博客了。但是如果你像我一样喜欢折腾，喜欢做到极致，比如添加打赏，添加文章导航，以及文章阅读次数，这些都很简单，按照主题文件的模版一点点修改，就能实现自己想要的效果了。\n\n这篇文章主要记录我折腾的两个功能： `相册`和`独立域名`。\n\n\n<!--more-->\n\n# 相册\n首先，看看我们实现后的效果，[点这里看我的相册](http://luckykun.com/photos/)\n\n## 分析\n然后我们分析一下，想要获取相册图片，首先得拿到图片得线上地址，其次，我们可以想到，既然我们的博客内容都放在了github得服务器，那么图片又何尝不能呢？\n\n使用hexo搭建博客的同学都知道，github上会建立一个名为`username.github.io`的仓库，而且仓库只存储了整个项目的一部分（source文件夹的内容），而且貌似这个仓库有大小限制，总之就是说不能把图片放在这个仓库里。\n\n我们再考虑另一个问题，假如我们有一天需要在另一台电脑写博客怎么办？所以博客备份就是需要的了。那么好，我们在Github 上再建一个仓库，用来存储整个博客项目的文件，假如某一天换个环境，直接全部down下来，就能拿到所有文章的源文件了，所以正好，我们可以在根目录下新建一个photos文件夹用来存放相册需要展示的图片文件了。\n\nok，分析结束，敲定技术方案： 我们新建文件夹photos用来存放图片文件，然后新建一个基于nodejs的js文件用来读取所有图片再生成一个json接口文件供相册页面的js文件使用。\n\n## 存放照片\n在博客的根目录下创建一个`photos`的文件夹，里面存放你想要展示的照片文件。然后把整个项目部署到github上，才能访问到图片的线上地址。\n\n## 生成json文件\n在根目录下创建一个nodejs文件`tool.js`，内容如下：\n\n```js\n\"use strict\";\nvar fs = require(\"fs\");\nvar path = \"./photos/\";\nfs.readdir(path, function (err, files) {\n    if (err) {\n        return;\n    }\n    var arr = [];\n    (function iterator(index) {\n        if (index == files.length) {\n            fs.writeFile(\"./source/photos/data.json\", JSON.stringify(arr, null, \"\\t\"));\n            console.log('get img success!');\n            return;\n        }\n        fs.stat(path + files[index], function (err, stats) {\n            if (err) {\n                return;\n            }\n            if (stats.isFile()) {\n                arr.push(files[index]);\n            }\n            iterator(index + 1);\n        })\n    }(0));\n});\n```\n\n运行这个文件`node tool.js`，运行之后，会在`/source/photos/`目录下创建一个data.json文件，内容如下：\n\n```js\n[\n    \"IMG_0011.JPG\",\n    \"IMG_0019.JPG\",\n    \"IMG_0020.JPG\",\n    \"IMG_0022.JPG\",\n    \"IMG_0045.JPG\",\n    \"IMG_0099.JPG\",\n    \"IMG_0106.JPG\",\n    \"IMG_0191.JPG\",\n    \"IMG_0306.JPG\",\n    \"IMG_0438.JPG\",\n    \"IMG_0451.JPG\",\n    \"IMG_0648.JPG\",\n    \"IMG_0670.JPG\",\n    \"IMG_0842.JPG\",\n    \"IMG_1078.JPG\",\n    \"IMG_1239.JPG\",\n    \"IMG_1429.JPG\",\n    \"IMG_1634.JPG\"\n]\n```\n\n每次修改photos文件夹里的照片，都得运行一下这个js文件，以更新生成的data.json文件。\n\n## 创建相册页面\n在根目录下执行命令：\n\n```js\nhexo page photos\n```\n\n会在`source/photos`目录下生成一个index.md文件，编辑文件内容如下：\n\n```js\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\">\n    <section class=\"archives album\">\n        <ul class=\"img-box-ul\"></ul>\n    </section>\n</div>\n```\n\n## 修改`themes/yilia/js/photo.js`：\n\n```js\n...\ninit: function () {\n    var that = this;\n    $.getJSON(\"/photos/data.json\", function (data) {\n        that.render(that.page, data);\n        that.scroll(data);\n    });\n},\nrender: function (page, data) {\n    var begin = (page - 1) * this.offset;\n    var end = page * this.offset;\n    if (begin >= data.length) return;\n    var html, li = \"\";\n    for (var i = begin; i < end && i < data.length; i++) {\n        li += '<li><div class=\"img-box\">' + '<a class=\"img-bg\" rel=\"example_group\" href=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/' + data[i] + '\"></a>' + '<img lazy-src=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/' + data[i] + '\" />' + '</li>';\n    }\n    $(\".img-box-ul\").append(li);\n    $(\".img-box-ul\").lazyload();\n    $(\"a[rel=example_group]\").fancybox();\n},\n...\n```\n\n上述文件读取json文件，将图片的线上url拼接起来渲染在页面上，相册样式使用yilia主题提供。然后上传这些文件，根据自定义的路径访问url，就能看到相册了。那么，到这里就基本完成了相册的制作。\n\n# 独立域名\n到目前为止，我们的博客都是使用github分配的二级域名`luckykun.github.io`来访问的， 那么我们会想如果能自己设置个域名，是多么cool的事！要怎么办呢？那就继续往下看吧！\n\n## 购买域名\n去卖域名的网站去买一个域名，我是在[万网](https://wanwang.aliyun.com/domain/searchresult/)买的域名，如图所示： ![](http://7xtawy.com1.z0.glb.clouddn.com/dmain.png)\n\n找到自己喜欢的域名，购买就好了。\n\n## 域名解析\n有了自己的域名之后，luckykun.github.io替换成luckykun.com，只要设置下解析即可，进入万网的云解析页面，添加如下解析： ![](http://7xtawy.com1.z0.glb.clouddn.com/domain22.png)\n\n说明：`192.30.252.154`和`192.30.252.153`是github服务器对应的ip地址，这步一定要设置，否则访问不了。\n\n## 添加CNAME\n然后回到博客项目根目录，在`source/`下新建一个名为`CNAME`的文件，里面的内容写入`luckykun.com`即可。\n\n然后在浏览器输入luckykun.com，即可代替之前的github.io的域名，访问到自己的博客页面了。实在是台、太cool了！\n\n# 结语\n好的，文章写道这里就结束了，感谢大家的阅读，如果文章能给大家带来帮助就最好了，如果读者还有任何疑问，欢迎留言，我会尽力解答。再见啦～～\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/hexo-advance.md","raw":"---\ntitle: hexo博客进阶－相册和独立域名\ndate: '2016-05-20 23:11:51'\ncategories: 工作\ntags:\n  - hexo系列\n  - 教程\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n之前我已经写了一篇文章详细的讲述了如何使用hexo搭建github博客。如果还没有看的可以去看看，[hexo搭建博客](/work/2016-04-23/heoll-hexo.html)\n\n其实，根据这篇文章的过程我们就能够搭建一个专属于自己，并且非常美观的博客了。但是如果你像我一样喜欢折腾，喜欢做到极致，比如添加打赏，添加文章导航，以及文章阅读次数，这些都很简单，按照主题文件的模版一点点修改，就能实现自己想要的效果了。\n\n这篇文章主要记录我折腾的两个功能： `相册`和`独立域名`。\n\n\n<!--more-->\n\n# 相册\n首先，看看我们实现后的效果，[点这里看我的相册](http://luckykun.com/photos/)\n\n## 分析\n然后我们分析一下，想要获取相册图片，首先得拿到图片得线上地址，其次，我们可以想到，既然我们的博客内容都放在了github得服务器，那么图片又何尝不能呢？\n\n使用hexo搭建博客的同学都知道，github上会建立一个名为`username.github.io`的仓库，而且仓库只存储了整个项目的一部分（source文件夹的内容），而且貌似这个仓库有大小限制，总之就是说不能把图片放在这个仓库里。\n\n我们再考虑另一个问题，假如我们有一天需要在另一台电脑写博客怎么办？所以博客备份就是需要的了。那么好，我们在Github 上再建一个仓库，用来存储整个博客项目的文件，假如某一天换个环境，直接全部down下来，就能拿到所有文章的源文件了，所以正好，我们可以在根目录下新建一个photos文件夹用来存放相册需要展示的图片文件了。\n\nok，分析结束，敲定技术方案： 我们新建文件夹photos用来存放图片文件，然后新建一个基于nodejs的js文件用来读取所有图片再生成一个json接口文件供相册页面的js文件使用。\n\n## 存放照片\n在博客的根目录下创建一个`photos`的文件夹，里面存放你想要展示的照片文件。然后把整个项目部署到github上，才能访问到图片的线上地址。\n\n## 生成json文件\n在根目录下创建一个nodejs文件`tool.js`，内容如下：\n\n```js\n\"use strict\";\nvar fs = require(\"fs\");\nvar path = \"./photos/\";\nfs.readdir(path, function (err, files) {\n    if (err) {\n        return;\n    }\n    var arr = [];\n    (function iterator(index) {\n        if (index == files.length) {\n            fs.writeFile(\"./source/photos/data.json\", JSON.stringify(arr, null, \"\\t\"));\n            console.log('get img success!');\n            return;\n        }\n        fs.stat(path + files[index], function (err, stats) {\n            if (err) {\n                return;\n            }\n            if (stats.isFile()) {\n                arr.push(files[index]);\n            }\n            iterator(index + 1);\n        })\n    }(0));\n});\n```\n\n运行这个文件`node tool.js`，运行之后，会在`/source/photos/`目录下创建一个data.json文件，内容如下：\n\n```js\n[\n    \"IMG_0011.JPG\",\n    \"IMG_0019.JPG\",\n    \"IMG_0020.JPG\",\n    \"IMG_0022.JPG\",\n    \"IMG_0045.JPG\",\n    \"IMG_0099.JPG\",\n    \"IMG_0106.JPG\",\n    \"IMG_0191.JPG\",\n    \"IMG_0306.JPG\",\n    \"IMG_0438.JPG\",\n    \"IMG_0451.JPG\",\n    \"IMG_0648.JPG\",\n    \"IMG_0670.JPG\",\n    \"IMG_0842.JPG\",\n    \"IMG_1078.JPG\",\n    \"IMG_1239.JPG\",\n    \"IMG_1429.JPG\",\n    \"IMG_1634.JPG\"\n]\n```\n\n每次修改photos文件夹里的照片，都得运行一下这个js文件，以更新生成的data.json文件。\n\n## 创建相册页面\n在根目录下执行命令：\n\n```js\nhexo page photos\n```\n\n会在`source/photos`目录下生成一个index.md文件，编辑文件内容如下：\n\n```js\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\">\n    <section class=\"archives album\">\n        <ul class=\"img-box-ul\"></ul>\n    </section>\n</div>\n```\n\n## 修改`themes/yilia/js/photo.js`：\n\n```js\n...\ninit: function () {\n    var that = this;\n    $.getJSON(\"/photos/data.json\", function (data) {\n        that.render(that.page, data);\n        that.scroll(data);\n    });\n},\nrender: function (page, data) {\n    var begin = (page - 1) * this.offset;\n    var end = page * this.offset;\n    if (begin >= data.length) return;\n    var html, li = \"\";\n    for (var i = begin; i < end && i < data.length; i++) {\n        li += '<li><div class=\"img-box\">' + '<a class=\"img-bg\" rel=\"example_group\" href=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/' + data[i] + '\"></a>' + '<img lazy-src=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/' + data[i] + '\" />' + '</li>';\n    }\n    $(\".img-box-ul\").append(li);\n    $(\".img-box-ul\").lazyload();\n    $(\"a[rel=example_group]\").fancybox();\n},\n...\n```\n\n上述文件读取json文件，将图片的线上url拼接起来渲染在页面上，相册样式使用yilia主题提供。然后上传这些文件，根据自定义的路径访问url，就能看到相册了。那么，到这里就基本完成了相册的制作。\n\n# 独立域名\n到目前为止，我们的博客都是使用github分配的二级域名`luckykun.github.io`来访问的， 那么我们会想如果能自己设置个域名，是多么cool的事！要怎么办呢？那就继续往下看吧！\n\n## 购买域名\n去卖域名的网站去买一个域名，我是在[万网](https://wanwang.aliyun.com/domain/searchresult/)买的域名，如图所示： ![](http://7xtawy.com1.z0.glb.clouddn.com/dmain.png)\n\n找到自己喜欢的域名，购买就好了。\n\n## 域名解析\n有了自己的域名之后，luckykun.github.io替换成luckykun.com，只要设置下解析即可，进入万网的云解析页面，添加如下解析： ![](http://7xtawy.com1.z0.glb.clouddn.com/domain22.png)\n\n说明：`192.30.252.154`和`192.30.252.153`是github服务器对应的ip地址，这步一定要设置，否则访问不了。\n\n## 添加CNAME\n然后回到博客项目根目录，在`source/`下新建一个名为`CNAME`的文件，里面的内容写入`luckykun.com`即可。\n\n然后在浏览器输入luckykun.com，即可代替之前的github.io的域名，访问到自己的博客页面了。实在是台、太cool了！\n\n# 结语\n好的，文章写道这里就结束了，感谢大家的阅读，如果文章能给大家带来帮助就最好了，如果读者还有任何疑问，欢迎留言，我会尽力解答。再见啦～～\n\n\n--------------------------------------------------------------------------------\n","slug":"hexo-advance","published":1,"updated":"2016-10-11T16:29:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdav000du13gmup9mv7b","content":"<hr>\n<p>之前我已经写了一篇文章详细的讲述了如何使用hexo搭建github博客。如果还没有看的可以去看看，<a href=\"/work/2016-04-23/heoll-hexo.html\">hexo搭建博客</a></p>\n<p>其实，根据这篇文章的过程我们就能够搭建一个专属于自己，并且非常美观的博客了。但是如果你像我一样喜欢折腾，喜欢做到极致，比如添加打赏，添加文章导航，以及文章阅读次数，这些都很简单，按照主题文件的模版一点点修改，就能实现自己想要的效果了。</p>\n<p>这篇文章主要记录我折腾的两个功能： <code>相册</code>和<code>独立域名</code>。</p>\n<a id=\"more\"></a>\n<h1 id=\"相册\"><a href=\"#相册\" class=\"headerlink\" title=\"相册\"></a>相册</h1><p>首先，看看我们实现后的效果，<a href=\"http://luckykun.com/photos/\" target=\"_blank\" rel=\"external\">点这里看我的相册</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>然后我们分析一下，想要获取相册图片，首先得拿到图片得线上地址，其次，我们可以想到，既然我们的博客内容都放在了github得服务器，那么图片又何尝不能呢？</p>\n<p>使用hexo搭建博客的同学都知道，github上会建立一个名为<code>username.github.io</code>的仓库，而且仓库只存储了整个项目的一部分（source文件夹的内容），而且貌似这个仓库有大小限制，总之就是说不能把图片放在这个仓库里。</p>\n<p>我们再考虑另一个问题，假如我们有一天需要在另一台电脑写博客怎么办？所以博客备份就是需要的了。那么好，我们在Github 上再建一个仓库，用来存储整个博客项目的文件，假如某一天换个环境，直接全部down下来，就能拿到所有文章的源文件了，所以正好，我们可以在根目录下新建一个photos文件夹用来存放相册需要展示的图片文件了。</p>\n<p>ok，分析结束，敲定技术方案： 我们新建文件夹photos用来存放图片文件，然后新建一个基于nodejs的js文件用来读取所有图片再生成一个json接口文件供相册页面的js文件使用。</p>\n<h2 id=\"存放照片\"><a href=\"#存放照片\" class=\"headerlink\" title=\"存放照片\"></a>存放照片</h2><p>在博客的根目录下创建一个<code>photos</code>的文件夹，里面存放你想要展示的照片文件。然后把整个项目部署到github上，才能访问到图片的线上地址。</p>\n<h2 id=\"生成json文件\"><a href=\"#生成json文件\" class=\"headerlink\" title=\"生成json文件\"></a>生成json文件</h2><p>在根目录下创建一个nodejs文件<code>tool.js</code>，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">\"./photos/\"</span>;</div><div class=\"line\">fs.readdir(path, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (index == files.length) &#123;</div><div class=\"line\">            fs.writeFile(<span class=\"string\">\"./source/photos/data.json\"</span>, <span class=\"built_in\">JSON</span>.stringify(arr, <span class=\"literal\">null</span>, <span class=\"string\">\"\\t\"</span>));</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'get img success!'</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        fs.stat(path + files[index], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (stats.isFile()) &#123;</div><div class=\"line\">                arr.push(files[index]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            iterator(index + <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;(<span class=\"number\">0</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>运行这个文件<code>node tool.js</code>，运行之后，会在<code>/source/photos/</code>目录下创建一个data.json文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    <span class=\"string\">\"IMG_0011.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0019.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0020.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0022.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0045.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0099.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0106.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0191.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0306.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0438.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0451.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0648.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0670.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0842.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1078.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1239.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1429.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1634.JPG\"</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>每次修改photos文件夹里的照片，都得运行一下这个js文件，以更新生成的data.json文件。</p>\n<h2 id=\"创建相册页面\"><a href=\"#创建相册页面\" class=\"headerlink\" title=\"创建相册页面\"></a>创建相册页面</h2><p>在根目录下执行命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hexo page photos</div></pre></td></tr></table></figure>\n<p>会在<code>source/photos</code>目录下生成一个index.md文件，编辑文件内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;link type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"/fancybox/jquery.fancybox.css\"</span> rel=<span class=\"string\">\"stylesheet\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"instagram\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"archives album\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-box-ul\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改themes-yilia-js-photo-js：\"><a href=\"#修改themes-yilia-js-photo-js：\" class=\"headerlink\" title=\"修改themes/yilia/js/photo.js：\"></a>修改<code>themes/yilia/js/photo.js</code>：</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">    $.getJSON(<span class=\"string\">\"/photos/data.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        that.render(that.page, data);</div><div class=\"line\">        that.scroll(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> begin = (page - <span class=\"number\">1</span>) * <span class=\"keyword\">this</span>.offset;</div><div class=\"line\">    <span class=\"keyword\">var</span> end = page * <span class=\"keyword\">this</span>.offset;</div><div class=\"line\">    <span class=\"keyword\">if</span> (begin &gt;= data.length) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> html, li = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123;</div><div class=\"line\">        li += <span class=\"string\">'&lt;li&gt;&lt;div class=\"img-box\"&gt;'</span> + <span class=\"string\">'&lt;a class=\"img-bg\" rel=\"example_group\" href=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/'</span> + data[i] + <span class=\"string\">'\"&gt;&lt;/a&gt;'</span> + <span class=\"string\">'&lt;img lazy-src=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/'</span> + data[i] + <span class=\"string\">'\" /&gt;'</span> + <span class=\"string\">'&lt;/li&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $(<span class=\"string\">\".img-box-ul\"</span>).append(li);</div><div class=\"line\">    $(<span class=\"string\">\".img-box-ul\"</span>).lazyload();</div><div class=\"line\">    $(<span class=\"string\">\"a[rel=example_group]\"</span>).fancybox();</div><div class=\"line\">&#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>上述文件读取json文件，将图片的线上url拼接起来渲染在页面上，相册样式使用yilia主题提供。然后上传这些文件，根据自定义的路径访问url，就能看到相册了。那么，到这里就基本完成了相册的制作。</p>\n<h1 id=\"独立域名\"><a href=\"#独立域名\" class=\"headerlink\" title=\"独立域名\"></a>独立域名</h1><p>到目前为止，我们的博客都是使用github分配的二级域名<code>luckykun.github.io</code>来访问的， 那么我们会想如果能自己设置个域名，是多么cool的事！要怎么办呢？那就继续往下看吧！</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>去卖域名的网站去买一个域名，我是在<a href=\"https://wanwang.aliyun.com/domain/searchresult/\" target=\"_blank\" rel=\"external\">万网</a>买的域名，如图所示： <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/dmain.png\" alt=\"\"></p>\n<p>找到自己喜欢的域名，购买就好了。</p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>有了自己的域名之后，luckykun.github.io替换成luckykun.com，只要设置下解析即可，进入万网的云解析页面，添加如下解析： <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/domain22.png\" alt=\"\"></p>\n<p>说明：<code>192.30.252.154</code>和<code>192.30.252.153</code>是github服务器对应的ip地址，这步一定要设置，否则访问不了。</p>\n<h2 id=\"添加CNAME\"><a href=\"#添加CNAME\" class=\"headerlink\" title=\"添加CNAME\"></a>添加CNAME</h2><p>然后回到博客项目根目录，在<code>source/</code>下新建一个名为<code>CNAME</code>的文件，里面的内容写入<code>luckykun.com</code>即可。</p>\n<p>然后在浏览器输入luckykun.com，即可代替之前的github.io的域名，访问到自己的博客页面了。实在是台、太cool了！</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>好的，文章写道这里就结束了，感谢大家的阅读，如果文章能给大家带来帮助就最好了，如果读者还有任何疑问，欢迎留言，我会尽力解答。再见啦～～</p>\n<hr>\n","excerpt":"<hr>\n<p>之前我已经写了一篇文章详细的讲述了如何使用hexo搭建github博客。如果还没有看的可以去看看，<a href=\"/work/2016-04-23/heoll-hexo.html\">hexo搭建博客</a></p>\n<p>其实，根据这篇文章的过程我们就能够搭建一个专属于自己，并且非常美观的博客了。但是如果你像我一样喜欢折腾，喜欢做到极致，比如添加打赏，添加文章导航，以及文章阅读次数，这些都很简单，按照主题文件的模版一点点修改，就能实现自己想要的效果了。</p>\n<p>这篇文章主要记录我折腾的两个功能： <code>相册</code>和<code>独立域名</code>。</p>","more":"<h1 id=\"相册\"><a href=\"#相册\" class=\"headerlink\" title=\"相册\"></a>相册</h1><p>首先，看看我们实现后的效果，<a href=\"http://luckykun.com/photos/\">点这里看我的相册</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>然后我们分析一下，想要获取相册图片，首先得拿到图片得线上地址，其次，我们可以想到，既然我们的博客内容都放在了github得服务器，那么图片又何尝不能呢？</p>\n<p>使用hexo搭建博客的同学都知道，github上会建立一个名为<code>username.github.io</code>的仓库，而且仓库只存储了整个项目的一部分（source文件夹的内容），而且貌似这个仓库有大小限制，总之就是说不能把图片放在这个仓库里。</p>\n<p>我们再考虑另一个问题，假如我们有一天需要在另一台电脑写博客怎么办？所以博客备份就是需要的了。那么好，我们在Github 上再建一个仓库，用来存储整个博客项目的文件，假如某一天换个环境，直接全部down下来，就能拿到所有文章的源文件了，所以正好，我们可以在根目录下新建一个photos文件夹用来存放相册需要展示的图片文件了。</p>\n<p>ok，分析结束，敲定技术方案： 我们新建文件夹photos用来存放图片文件，然后新建一个基于nodejs的js文件用来读取所有图片再生成一个json接口文件供相册页面的js文件使用。</p>\n<h2 id=\"存放照片\"><a href=\"#存放照片\" class=\"headerlink\" title=\"存放照片\"></a>存放照片</h2><p>在博客的根目录下创建一个<code>photos</code>的文件夹，里面存放你想要展示的照片文件。然后把整个项目部署到github上，才能访问到图片的线上地址。</p>\n<h2 id=\"生成json文件\"><a href=\"#生成json文件\" class=\"headerlink\" title=\"生成json文件\"></a>生成json文件</h2><p>在根目录下创建一个nodejs文件<code>tool.js</code>，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">\"./photos/\"</span>;</div><div class=\"line\">fs.readdir(path, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (index == files.length) &#123;</div><div class=\"line\">            fs.writeFile(<span class=\"string\">\"./source/photos/data.json\"</span>, <span class=\"built_in\">JSON</span>.stringify(arr, <span class=\"literal\">null</span>, <span class=\"string\">\"\\t\"</span>));</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'get img success!'</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        fs.stat(path + files[index], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (stats.isFile()) &#123;</div><div class=\"line\">                arr.push(files[index]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            iterator(index + <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;(<span class=\"number\">0</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>运行这个文件<code>node tool.js</code>，运行之后，会在<code>/source/photos/</code>目录下创建一个data.json文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    <span class=\"string\">\"IMG_0011.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0019.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0020.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0022.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0045.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0099.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0106.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0191.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0306.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0438.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0451.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0648.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0670.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_0842.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1078.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1239.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1429.JPG\"</span>,</div><div class=\"line\">    <span class=\"string\">\"IMG_1634.JPG\"</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>每次修改photos文件夹里的照片，都得运行一下这个js文件，以更新生成的data.json文件。</p>\n<h2 id=\"创建相册页面\"><a href=\"#创建相册页面\" class=\"headerlink\" title=\"创建相册页面\"></a>创建相册页面</h2><p>在根目录下执行命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hexo page photos</div></pre></td></tr></table></figure>\n<p>会在<code>source/photos</code>目录下生成一个index.md文件，编辑文件内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;link type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"/fancybox/jquery.fancybox.css\"</span> rel=<span class=\"string\">\"stylesheet\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"instagram\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"archives album\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-box-ul\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h2 id=\"修改themes-yilia-js-photo-js：\"><a href=\"#修改themes-yilia-js-photo-js：\" class=\"headerlink\" title=\"修改themes/yilia/js/photo.js：\"></a>修改<code>themes/yilia/js/photo.js</code>：</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">    $.getJSON(<span class=\"string\">\"/photos/data.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        that.render(that.page, data);</div><div class=\"line\">        that.scroll(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> begin = (page - <span class=\"number\">1</span>) * <span class=\"keyword\">this</span>.offset;</div><div class=\"line\">    <span class=\"keyword\">var</span> end = page * <span class=\"keyword\">this</span>.offset;</div><div class=\"line\">    <span class=\"keyword\">if</span> (begin &gt;= data.length) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> html, li = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123;</div><div class=\"line\">        li += <span class=\"string\">'&lt;li&gt;&lt;div class=\"img-box\"&gt;'</span> + <span class=\"string\">'&lt;a class=\"img-bg\" rel=\"example_group\" href=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/'</span> + data[i] + <span class=\"string\">'\"&gt;&lt;/a&gt;'</span> + <span class=\"string\">'&lt;img lazy-src=\"https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/'</span> + data[i] + <span class=\"string\">'\" /&gt;'</span> + <span class=\"string\">'&lt;/li&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $(<span class=\"string\">\".img-box-ul\"</span>).append(li);</div><div class=\"line\">    $(<span class=\"string\">\".img-box-ul\"</span>).lazyload();</div><div class=\"line\">    $(<span class=\"string\">\"a[rel=example_group]\"</span>).fancybox();</div><div class=\"line\">&#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>上述文件读取json文件，将图片的线上url拼接起来渲染在页面上，相册样式使用yilia主题提供。然后上传这些文件，根据自定义的路径访问url，就能看到相册了。那么，到这里就基本完成了相册的制作。</p>\n<h1 id=\"独立域名\"><a href=\"#独立域名\" class=\"headerlink\" title=\"独立域名\"></a>独立域名</h1><p>到目前为止，我们的博客都是使用github分配的二级域名<code>luckykun.github.io</code>来访问的， 那么我们会想如果能自己设置个域名，是多么cool的事！要怎么办呢？那就继续往下看吧！</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>去卖域名的网站去买一个域名，我是在<a href=\"https://wanwang.aliyun.com/domain/searchresult/\">万网</a>买的域名，如图所示： <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/dmain.png\" alt=\"\"></p>\n<p>找到自己喜欢的域名，购买就好了。</p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>有了自己的域名之后，luckykun.github.io替换成luckykun.com，只要设置下解析即可，进入万网的云解析页面，添加如下解析： <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/domain22.png\" alt=\"\"></p>\n<p>说明：<code>192.30.252.154</code>和<code>192.30.252.153</code>是github服务器对应的ip地址，这步一定要设置，否则访问不了。</p>\n<h2 id=\"添加CNAME\"><a href=\"#添加CNAME\" class=\"headerlink\" title=\"添加CNAME\"></a>添加CNAME</h2><p>然后回到博客项目根目录，在<code>source/</code>下新建一个名为<code>CNAME</code>的文件，里面的内容写入<code>luckykun.com</code>即可。</p>\n<p>然后在浏览器输入luckykun.com，即可代替之前的github.io的域名，访问到自己的博客页面了。实在是台、太cool了！</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>好的，文章写道这里就结束了，感谢大家的阅读，如果文章能给大家带来帮助就最好了，如果读者还有任何疑问，欢迎留言，我会尽力解答。再见啦～～</p>\n<hr>"},{"title":"CSS3初体验之奇技淫巧","date":"2016-07-04T14:39:19.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n自CSS3流行以来，虽然以前看过一遍所有的新增属性，但其实在实际项目中用到的少之又少。所以没有形成系统性的认识，以及看到效果立马就能想到解决方案的能力。然后最近正好遇到一个需要绘制大量动画的需求，所以决定趁此机会好好研究一下这个既熟悉又陌生的css3。\n\n在正式开始css3之前，先来介绍一些比较经典的`css3实例`，让大家好好感受一下css3的魅力，本文会提到以下几个css3的属性：\n\nborder-radius、::after、attr和content、box-sizing、linear-gradient、radial-gradient、box-shadow\n\n\n<!--more-->\n\n\n# border-radius\n- 相信这个属性，写过css的同学都知道，用来产生圆角，比如画一个圆形：\n\n  ```js\n    div {\n        width:100px;\n        height:100px;\n        background:red;\n        border-radius:100px;    //border-radius:100%;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css31.png)\n\n- 然后我们来看看它的语法：`border-radius: [左上] [右上] [右下] [左下]`，于是我们来画一个半圆\n\n  ```js\n    div {\n        width: 100px;\n        height: 50px;\n        background: red;\n        border-radius: 50px 50px 0 0;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css32.png)\n\n- 那如果要画一个椭圆该怎么办呢？你会发现上面的语法貌似做不到了，其实border-radius的值还有一种语法: `x半径/y半径`：\n\n  ```js\n    div {\n        width: 100px;\n        height: 50px;\n        background: red;\n        border-radius: 50px/25px;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css33.png)\n\n- 如果我要画半个椭圆，又要咋办呢？\n\n  ```js\n    div {\n        width: 100px;\n        height: 50px;\n        background: red;\n        border-radius: 100% 0 0 100% /50%;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css34.png)\n\n# ::after\n这里拿个简单的例子来看，我们要画一个放大镜，如下图：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css35.png)\n\n分析一下，这个放大镜可以由两个div组成，一个是黑色的圆环，一个是黑色把手（旋转45度）。所以我们就需要用两个div来实现吗？答案是NO，一个div也是可以的，我们可以借助`::after`来添加一个元素。同理如果需要三个div，我们还可以使用`::before`再添加一个元素。下面看一下代码：\n\n```js\ndiv {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 5px solid #333;\n    position: relative;\n}\ndiv::after {\n    content: '';\n    display: block;    \n    width: 8px;    \n    height: 60px;    \n    border-radius: 5px;    \n    background: #333;    \n    position: absolute;    \n    right: -22px;    \n    top: 38px;    \n    transform: rotate(-45deg);\n}\n```\n\n# attr和content\n比如我们要实现一个悬浮提示的功能。传统方法，使用title属性就能实现，但是现在我们要更美观，可以使用css3提供的`attr：能够在css中获取到元素的某个属性值，然后插入到伪元素的content中去。`\n\n假如我们的html代码如下：\n\n```js\n    <div data-title=\"hello, world\">hello...</div>\n```\n\n我们来看看实现这个插件的css代码：\n\n```js\ndiv {\n    position: relative;\n}\ndiv:hover::after {\n    content: attr(data-title);    //取到data-title属性的值\n    display: inline-block;\n    padding: 10px 14px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    position: absolute;\n    top: -50px;\n    left: -30px;\n}\n```\n\n当hover的时候，在元素尾部添加一个内容为data-title属性值的元素，所以就实现了hover显示的效果，如下图所示：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3hello.gif)\n\n# box-sizing\n我们知道，在标准盒子模型中，元素的总宽＝content + padding + border + margin。 css中的盒子模型大家可能都知道，但是这个盒子模型的属性可能没有那么多人知道，`box-sizing`属性就是用来重定义这个计算方式的，它有三个取值，分别是：`content-box（默认）`、`border-box`、`padding-box`\n\n一般来说，假如我们需要有一个`占宽200px、padding10px、border5px的div`，经过计算，要这么定义样式。\n\n```js\ndiv {\n    width: 170px;   //这里的宽度要使用200-10*2-5*2 = 170得到。\n    height: 50px;\n    padding: 10px;\n    border: 5px solid red;\n}\n```\n\n然后我们来使用一下box-sizing属性。\n\n```js\ndiv {\n    box-sizing: border-box;\n    width: 200px;  //这里的宽度就是元素所占总宽度，不需要计算  \n    height: 50px;\n    padding: 10px;\n    border: 5px solid red;\n}\n```\n\n# linear-gradient\n做活动页面的时候我们经常会遇到这样的需求：\n\n顶部的中间一张大banner图片，然后整个区域的背景色要根据图片背景色渐变。就可以使用这个属性了。\n\n```js\ndiv {\n    width: 200px;\n    height: 50px;\n    background: linear-gradient(to right, red, yellow, black, green);\n}\n```\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css39.png)\n\n是不是很有趣？其实，`linear-gradient`还有更多有趣的功能，你可以根据下面的动图去感受一下：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3gradi2.gif)\n\n你以为这就完了？等等，还有更强大的呢！`repeating-linear-gradient`，来感受一下：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3gradi.gif)\n\n`linear-gradient`还有更加强大的功能，比如它可以给元素添加多个渐变，从而达到更NB的效果。\n\n# radial-gradient\n上面的`linear-gradient`是线性渐变，这个属性是径向渐变。下面的代码实现了一个chrome的logo。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css36.png)\n\n```js\ndiv.chrome {\n    width: 180px;\n    height: 180px;\n    border-radius: 50%;\n    box-shadow: 0 0 4px #999, 0 0 2px #ddd inset;\n    background: radial-gradient(circle, #4FACF5 0, #2196F3 28%, transparent 28%),\n                radial-gradient(circle, #fff 33%, transparent 33%),\n                linear-gradient(-50deg, #FFEB3B 34%, transparent 34%),\n                linear-gradient(60deg, #4CAF50 33%, transparent 33%),\n                linear-gradient(180deg, #FF756B 0, #F44336 30%, transparent 30%),\n                linear-gradient(-120deg, #FFEB3B 40%, transparent 40%),\n                linear-gradient(-60deg, #FFEB3B 30%, transparent 30%),\n                linear-gradient(0deg, #4CAF50 45%, transparent 45%),\n                linear-gradient(60deg, #4CAF50 30%, transparent 30%),\n                linear-gradient(120deg, #F44336 50%, transparent 50%),\n                linear-gradient(180deg, #F44336 30%, transparent 30%);\n}\n```\n\n实现原理就是使用了多个渐变色放在div上，友协被遮住，视觉上就产生了想要的效果，是不是很强大！看了下图你就知道其实就是在div上加了很多个渐变。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3test6.gif)\n\n# box-shadow\n上面的例子大都是对css3新属性的了解和认识，这个实例则是有关于解决方案的例子。\n- 需求：我们要实现下面这个效果图（三个边框：黑色，绿色，红色）：\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css37.png)\n\n- 解法一：假如没有css3知识，我们可以做这样做：用三个div，分别设置边框，然后分别控制宽高和位置来达到这个效果。显然，很复杂，这里就不贴代码了。\n- 解法二：现在我们有css3的知识了，借助`box-shadow`就可以轻松解决这个问题。先来看看它的语法：`box-shadow: [x偏移] [y偏移] [阴影模糊宽度] [阴影宽度] [颜色]`，并且还能添加多个阴影，使用逗号隔开。\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css3borde2.gif)\n\n    当然你还可以继续增加，四重边框，五重边框......都不再是问题啦。另外，还能加圆角，阴影会贴紧内层div。\n\n    `使用这种方法，有一个缺点就是，不支持虚线边框。`\n\n- 解法三： 使用outline（只能支持两重边框）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css3border.gif)\n\n    `使用这种方法的缺点就是，只能支持两层的边框，而且还不能根据容器的border-radius自动贴合。`\n\n# 总结\n通过这段时间对css3的深入了解，发现css3真的很强大，研究起来还是挺有趣的，只有想不到，感觉没有做不到。不过为了实现很酷炫的效果，可能需要编写大量的css代码，这个时候使用什么技术就需要我们自己来衡量了。\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/css3-study01.md","raw":"---\ntitle: CSS3初体验之奇技淫巧\ndate: 2016-07-04T22:39:19.000Z\ncategories: 工作\ntags:\n  - CSS3\n  - 实例\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n自CSS3流行以来，虽然以前看过一遍所有的新增属性，但其实在实际项目中用到的少之又少。所以没有形成系统性的认识，以及看到效果立马就能想到解决方案的能力。然后最近正好遇到一个需要绘制大量动画的需求，所以决定趁此机会好好研究一下这个既熟悉又陌生的css3。\n\n在正式开始css3之前，先来介绍一些比较经典的`css3实例`，让大家好好感受一下css3的魅力，本文会提到以下几个css3的属性：\n\nborder-radius、::after、attr和content、box-sizing、linear-gradient、radial-gradient、box-shadow\n\n\n<!--more-->\n\n\n# border-radius\n- 相信这个属性，写过css的同学都知道，用来产生圆角，比如画一个圆形：\n\n  ```js\n    div {\n        width:100px;\n        height:100px;\n        background:red;\n        border-radius:100px;    //border-radius:100%;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css31.png)\n\n- 然后我们来看看它的语法：`border-radius: [左上] [右上] [右下] [左下]`，于是我们来画一个半圆\n\n  ```js\n    div {\n        width: 100px;\n        height: 50px;\n        background: red;\n        border-radius: 50px 50px 0 0;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css32.png)\n\n- 那如果要画一个椭圆该怎么办呢？你会发现上面的语法貌似做不到了，其实border-radius的值还有一种语法: `x半径/y半径`：\n\n  ```js\n    div {\n        width: 100px;\n        height: 50px;\n        background: red;\n        border-radius: 50px/25px;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css33.png)\n\n- 如果我要画半个椭圆，又要咋办呢？\n\n  ```js\n    div {\n        width: 100px;\n        height: 50px;\n        background: red;\n        border-radius: 100% 0 0 100% /50%;\n    }\n  ```\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css34.png)\n\n# ::after\n这里拿个简单的例子来看，我们要画一个放大镜，如下图：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css35.png)\n\n分析一下，这个放大镜可以由两个div组成，一个是黑色的圆环，一个是黑色把手（旋转45度）。所以我们就需要用两个div来实现吗？答案是NO，一个div也是可以的，我们可以借助`::after`来添加一个元素。同理如果需要三个div，我们还可以使用`::before`再添加一个元素。下面看一下代码：\n\n```js\ndiv {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 5px solid #333;\n    position: relative;\n}\ndiv::after {\n    content: '';\n    display: block;    \n    width: 8px;    \n    height: 60px;    \n    border-radius: 5px;    \n    background: #333;    \n    position: absolute;    \n    right: -22px;    \n    top: 38px;    \n    transform: rotate(-45deg);\n}\n```\n\n# attr和content\n比如我们要实现一个悬浮提示的功能。传统方法，使用title属性就能实现，但是现在我们要更美观，可以使用css3提供的`attr：能够在css中获取到元素的某个属性值，然后插入到伪元素的content中去。`\n\n假如我们的html代码如下：\n\n```js\n    <div data-title=\"hello, world\">hello...</div>\n```\n\n我们来看看实现这个插件的css代码：\n\n```js\ndiv {\n    position: relative;\n}\ndiv:hover::after {\n    content: attr(data-title);    //取到data-title属性的值\n    display: inline-block;\n    padding: 10px 14px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    position: absolute;\n    top: -50px;\n    left: -30px;\n}\n```\n\n当hover的时候，在元素尾部添加一个内容为data-title属性值的元素，所以就实现了hover显示的效果，如下图所示：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3hello.gif)\n\n# box-sizing\n我们知道，在标准盒子模型中，元素的总宽＝content + padding + border + margin。 css中的盒子模型大家可能都知道，但是这个盒子模型的属性可能没有那么多人知道，`box-sizing`属性就是用来重定义这个计算方式的，它有三个取值，分别是：`content-box（默认）`、`border-box`、`padding-box`\n\n一般来说，假如我们需要有一个`占宽200px、padding10px、border5px的div`，经过计算，要这么定义样式。\n\n```js\ndiv {\n    width: 170px;   //这里的宽度要使用200-10*2-5*2 = 170得到。\n    height: 50px;\n    padding: 10px;\n    border: 5px solid red;\n}\n```\n\n然后我们来使用一下box-sizing属性。\n\n```js\ndiv {\n    box-sizing: border-box;\n    width: 200px;  //这里的宽度就是元素所占总宽度，不需要计算  \n    height: 50px;\n    padding: 10px;\n    border: 5px solid red;\n}\n```\n\n# linear-gradient\n做活动页面的时候我们经常会遇到这样的需求：\n\n顶部的中间一张大banner图片，然后整个区域的背景色要根据图片背景色渐变。就可以使用这个属性了。\n\n```js\ndiv {\n    width: 200px;\n    height: 50px;\n    background: linear-gradient(to right, red, yellow, black, green);\n}\n```\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css39.png)\n\n是不是很有趣？其实，`linear-gradient`还有更多有趣的功能，你可以根据下面的动图去感受一下：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3gradi2.gif)\n\n你以为这就完了？等等，还有更强大的呢！`repeating-linear-gradient`，来感受一下：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3gradi.gif)\n\n`linear-gradient`还有更加强大的功能，比如它可以给元素添加多个渐变，从而达到更NB的效果。\n\n# radial-gradient\n上面的`linear-gradient`是线性渐变，这个属性是径向渐变。下面的代码实现了一个chrome的logo。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css36.png)\n\n```js\ndiv.chrome {\n    width: 180px;\n    height: 180px;\n    border-radius: 50%;\n    box-shadow: 0 0 4px #999, 0 0 2px #ddd inset;\n    background: radial-gradient(circle, #4FACF5 0, #2196F3 28%, transparent 28%),\n                radial-gradient(circle, #fff 33%, transparent 33%),\n                linear-gradient(-50deg, #FFEB3B 34%, transparent 34%),\n                linear-gradient(60deg, #4CAF50 33%, transparent 33%),\n                linear-gradient(180deg, #FF756B 0, #F44336 30%, transparent 30%),\n                linear-gradient(-120deg, #FFEB3B 40%, transparent 40%),\n                linear-gradient(-60deg, #FFEB3B 30%, transparent 30%),\n                linear-gradient(0deg, #4CAF50 45%, transparent 45%),\n                linear-gradient(60deg, #4CAF50 30%, transparent 30%),\n                linear-gradient(120deg, #F44336 50%, transparent 50%),\n                linear-gradient(180deg, #F44336 30%, transparent 30%);\n}\n```\n\n实现原理就是使用了多个渐变色放在div上，友协被遮住，视觉上就产生了想要的效果，是不是很强大！看了下图你就知道其实就是在div上加了很多个渐变。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/css3test6.gif)\n\n# box-shadow\n上面的例子大都是对css3新属性的了解和认识，这个实例则是有关于解决方案的例子。\n- 需求：我们要实现下面这个效果图（三个边框：黑色，绿色，红色）：\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css37.png)\n\n- 解法一：假如没有css3知识，我们可以做这样做：用三个div，分别设置边框，然后分别控制宽高和位置来达到这个效果。显然，很复杂，这里就不贴代码了。\n- 解法二：现在我们有css3的知识了，借助`box-shadow`就可以轻松解决这个问题。先来看看它的语法：`box-shadow: [x偏移] [y偏移] [阴影模糊宽度] [阴影宽度] [颜色]`，并且还能添加多个阴影，使用逗号隔开。\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css3borde2.gif)\n\n    当然你还可以继续增加，四重边框，五重边框......都不再是问题啦。另外，还能加圆角，阴影会贴紧内层div。\n\n    `使用这种方法，有一个缺点就是，不支持虚线边框。`\n\n- 解法三： 使用outline（只能支持两重边框）\n\n    ![](http://7xtawy.com1.z0.glb.clouddn.com/css3border.gif)\n\n    `使用这种方法的缺点就是，只能支持两层的边框，而且还不能根据容器的border-radius自动贴合。`\n\n# 总结\n通过这段时间对css3的深入了解，发现css3真的很强大，研究起来还是挺有趣的，只有想不到，感觉没有做不到。不过为了实现很酷炫的效果，可能需要编写大量的css代码，这个时候使用什么技术就需要我们自己来衡量了。\n\n\n--------------------------------------------------------------------------------\n","slug":"css3-study01","published":1,"updated":"2016-10-11T16:28:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdaw000eu13gfde2qtbp","content":"<hr>\n<p>自CSS3流行以来，虽然以前看过一遍所有的新增属性，但其实在实际项目中用到的少之又少。所以没有形成系统性的认识，以及看到效果立马就能想到解决方案的能力。然后最近正好遇到一个需要绘制大量动画的需求，所以决定趁此机会好好研究一下这个既熟悉又陌生的css3。</p>\n<p>在正式开始css3之前，先来介绍一些比较经典的<code>css3实例</code>，让大家好好感受一下css3的魅力，本文会提到以下几个css3的属性：</p>\n<p>border-radius、::after、attr和content、box-sizing、linear-gradient、radial-gradient、box-shadow</p>\n<a id=\"more\"></a>\n<h1 id=\"border-radius\"><a href=\"#border-radius\" class=\"headerlink\" title=\"border-radius\"></a>border-radius</h1><ul>\n<li><p>相信这个属性，写过css的同学都知道，用来产生圆角，比如画一个圆形：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width:<span class=\"number\">100</span>px;</div><div class=\"line\">    height:<span class=\"number\">100</span>px;</div><div class=\"line\">    background:red;</div><div class=\"line\">    border-radius:<span class=\"number\">100</span>px;    <span class=\"comment\">//border-radius:100%;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css31.png\" alt=\"\"></p>\n</li>\n<li><p>然后我们来看看它的语法：<code>border-radius: [左上] [右上] [右下] [左下]</code>，于是我们来画一个半圆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">100</span>px;</div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    background: red;</div><div class=\"line\">    border-radius: <span class=\"number\">50</span>px <span class=\"number\">50</span>px <span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css32.png\" alt=\"\"></p>\n</li>\n<li><p>那如果要画一个椭圆该怎么办呢？你会发现上面的语法貌似做不到了，其实border-radius的值还有一种语法: <code>x半径/y半径</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">100</span>px;</div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    background: red;</div><div class=\"line\">    border-radius: <span class=\"number\">50</span>px/<span class=\"number\">25</span>px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css33.png\" alt=\"\"></p>\n</li>\n<li><p>如果我要画半个椭圆，又要咋办呢？</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: 100px;</div><div class=\"line\">    height: 50px;</div><div class=\"line\">    background: red;</div><div class=\"line\">    border-radius: 100% 0 0 100% /50%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css34.png\" alt=\"\"></p>\n</li>\n</ul>\n<h1 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"::after\"></a>::after</h1><p>这里拿个简单的例子来看，我们要画一个放大镜，如下图：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css35.png\" alt=\"\"></p>\n<p>分析一下，这个放大镜可以由两个div组成，一个是黑色的圆环，一个是黑色把手（旋转45度）。所以我们就需要用两个div来实现吗？答案是NO，一个div也是可以的，我们可以借助<code>::after</code>来添加一个元素。同理如果需要三个div，我们还可以使用<code>::before</code>再添加一个元素。下面看一下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: 50px;</div><div class=\"line\">    height: 50px;</div><div class=\"line\">    border-radius: 50%;</div><div class=\"line\">    border: 5px solid #333;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">div::after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: block;    </div><div class=\"line\">    width: 8px;    </div><div class=\"line\">    height: 60px;    </div><div class=\"line\">    border-radius: 5px;    </div><div class=\"line\">    background: #333;    </div><div class=\"line\">    position: absolute;    </div><div class=\"line\">    right: -22px;    </div><div class=\"line\">    top: 38px;    </div><div class=\"line\">    transform: rotate(-45deg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"attr和content\"><a href=\"#attr和content\" class=\"headerlink\" title=\"attr和content\"></a>attr和content</h1><p>比如我们要实现一个悬浮提示的功能。传统方法，使用title属性就能实现，但是现在我们要更美观，可以使用css3提供的<code>attr：能够在css中获取到元素的某个属性值，然后插入到伪元素的content中去。</code></p>\n<p>假如我们的html代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div data-title=<span class=\"string\">\"hello, world\"</span>&gt;hello...&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<p>我们来看看实现这个插件的css代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">div:hover::after &#123;</div><div class=\"line\">    content: attr(data-title);    //取到data-title属性的值</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 10px 14px;</div><div class=\"line\">    border: 1px solid #ddd;</div><div class=\"line\">    border-radius: 5px;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    top: -50px;</div><div class=\"line\">    left: -30px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当hover的时候，在元素尾部添加一个内容为data-title属性值的元素，所以就实现了hover显示的效果，如下图所示：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3hello.gif\" alt=\"\"></p>\n<h1 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h1><p>我们知道，在标准盒子模型中，元素的总宽＝content + padding + border + margin。 css中的盒子模型大家可能都知道，但是这个盒子模型的属性可能没有那么多人知道，<code>box-sizing</code>属性就是用来重定义这个计算方式的，它有三个取值，分别是：<code>content-box（默认）</code>、<code>border-box</code>、<code>padding-box</code></p>\n<p>一般来说，假如我们需要有一个<code>占宽200px、padding10px、border5px的div</code>，经过计算，要这么定义样式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">170</span>px;   <span class=\"comment\">//这里的宽度要使用200-10*2-5*2 = 170得到。</span></div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    padding: <span class=\"number\">10</span>px;</div><div class=\"line\">    border: <span class=\"number\">5</span>px solid red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们来使用一下box-sizing属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    width: <span class=\"number\">200</span>px;  <span class=\"comment\">//这里的宽度就是元素所占总宽度，不需要计算  </span></div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    padding: <span class=\"number\">10</span>px;</div><div class=\"line\">    border: <span class=\"number\">5</span>px solid red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"linear-gradient\"><a href=\"#linear-gradient\" class=\"headerlink\" title=\"linear-gradient\"></a>linear-gradient</h1><p>做活动页面的时候我们经常会遇到这样的需求：</p>\n<p>顶部的中间一张大banner图片，然后整个区域的背景色要根据图片背景色渐变。就可以使用这个属性了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">200</span>px;</div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    background: linear-gradient(to right, red, yellow, black, green);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css39.png\" alt=\"\"></p>\n<p>是不是很有趣？其实，<code>linear-gradient</code>还有更多有趣的功能，你可以根据下面的动图去感受一下：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3gradi2.gif\" alt=\"\"></p>\n<p>你以为这就完了？等等，还有更强大的呢！<code>repeating-linear-gradient</code>，来感受一下：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3gradi.gif\" alt=\"\"></p>\n<p><code>linear-gradient</code>还有更加强大的功能，比如它可以给元素添加多个渐变，从而达到更NB的效果。</p>\n<h1 id=\"radial-gradient\"><a href=\"#radial-gradient\" class=\"headerlink\" title=\"radial-gradient\"></a>radial-gradient</h1><p>上面的<code>linear-gradient</code>是线性渐变，这个属性是径向渐变。下面的代码实现了一个chrome的logo。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css36.png\" alt=\"\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div.chrome &#123;</div><div class=\"line\">    width: 180px;</div><div class=\"line\">    height: 180px;</div><div class=\"line\">    border-radius: 50%;</div><div class=\"line\">    box-shadow: 0 0 4px #999, 0 0 2px #ddd inset;</div><div class=\"line\">    background: radial-gradient(circle, #4FACF5 0, #2196F3 28%, transparent 28%),</div><div class=\"line\">                radial-gradient(circle, #fff 33%, transparent 33%),</div><div class=\"line\">                linear-gradient(-50deg, #FFEB3B 34%, transparent 34%),</div><div class=\"line\">                linear-gradient(60deg, #4CAF50 33%, transparent 33%),</div><div class=\"line\">                linear-gradient(180deg, #FF756B 0, #F44336 30%, transparent 30%),</div><div class=\"line\">                linear-gradient(-120deg, #FFEB3B 40%, transparent 40%),</div><div class=\"line\">                linear-gradient(-60deg, #FFEB3B 30%, transparent 30%),</div><div class=\"line\">                linear-gradient(0deg, #4CAF50 45%, transparent 45%),</div><div class=\"line\">                linear-gradient(60deg, #4CAF50 30%, transparent 30%),</div><div class=\"line\">                linear-gradient(120deg, #F44336 50%, transparent 50%),</div><div class=\"line\">                linear-gradient(180deg, #F44336 30%, transparent 30%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现原理就是使用了多个渐变色放在div上，友协被遮住，视觉上就产生了想要的效果，是不是很强大！看了下图你就知道其实就是在div上加了很多个渐变。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3test6.gif\" alt=\"\"></p>\n<h1 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h1><p>上面的例子大都是对css3新属性的了解和认识，这个实例则是有关于解决方案的例子。</p>\n<ul>\n<li><p>需求：我们要实现下面这个效果图（三个边框：黑色，绿色，红色）：</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css37.png\" alt=\"\"></p>\n</li>\n<li><p>解法一：假如没有css3知识，我们可以做这样做：用三个div，分别设置边框，然后分别控制宽高和位置来达到这个效果。显然，很复杂，这里就不贴代码了。</p>\n</li>\n<li><p>解法二：现在我们有css3的知识了，借助<code>box-shadow</code>就可以轻松解决这个问题。先来看看它的语法：<code>box-shadow: [x偏移] [y偏移] [阴影模糊宽度] [阴影宽度] [颜色]</code>，并且还能添加多个阴影，使用逗号隔开。</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3borde2.gif\" alt=\"\"></p>\n<p>  当然你还可以继续增加，四重边框，五重边框……都不再是问题啦。另外，还能加圆角，阴影会贴紧内层div。</p>\n<p>  <code>使用这种方法，有一个缺点就是，不支持虚线边框。</code></p>\n</li>\n<li><p>解法三： 使用outline（只能支持两重边框）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3border.gif\" alt=\"\"></p>\n<p>  <code>使用这种方法的缺点就是，只能支持两层的边框，而且还不能根据容器的border-radius自动贴合。</code></p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过这段时间对css3的深入了解，发现css3真的很强大，研究起来还是挺有趣的，只有想不到，感觉没有做不到。不过为了实现很酷炫的效果，可能需要编写大量的css代码，这个时候使用什么技术就需要我们自己来衡量了。</p>\n<hr>\n","excerpt":"<hr>\n<p>自CSS3流行以来，虽然以前看过一遍所有的新增属性，但其实在实际项目中用到的少之又少。所以没有形成系统性的认识，以及看到效果立马就能想到解决方案的能力。然后最近正好遇到一个需要绘制大量动画的需求，所以决定趁此机会好好研究一下这个既熟悉又陌生的css3。</p>\n<p>在正式开始css3之前，先来介绍一些比较经典的<code>css3实例</code>，让大家好好感受一下css3的魅力，本文会提到以下几个css3的属性：</p>\n<p>border-radius、::after、attr和content、box-sizing、linear-gradient、radial-gradient、box-shadow</p>","more":"<h1 id=\"border-radius\"><a href=\"#border-radius\" class=\"headerlink\" title=\"border-radius\"></a>border-radius</h1><ul>\n<li><p>相信这个属性，写过css的同学都知道，用来产生圆角，比如画一个圆形：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width:<span class=\"number\">100</span>px;</div><div class=\"line\">    height:<span class=\"number\">100</span>px;</div><div class=\"line\">    background:red;</div><div class=\"line\">    border-radius:<span class=\"number\">100</span>px;    <span class=\"comment\">//border-radius:100%;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css31.png\" alt=\"\"></p>\n</li>\n<li><p>然后我们来看看它的语法：<code>border-radius: [左上] [右上] [右下] [左下]</code>，于是我们来画一个半圆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">100</span>px;</div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    background: red;</div><div class=\"line\">    border-radius: <span class=\"number\">50</span>px <span class=\"number\">50</span>px <span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css32.png\" alt=\"\"></p>\n</li>\n<li><p>那如果要画一个椭圆该怎么办呢？你会发现上面的语法貌似做不到了，其实border-radius的值还有一种语法: <code>x半径/y半径</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">100</span>px;</div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    background: red;</div><div class=\"line\">    border-radius: <span class=\"number\">50</span>px/<span class=\"number\">25</span>px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css33.png\" alt=\"\"></p>\n</li>\n<li><p>如果我要画半个椭圆，又要咋办呢？</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: 100px;</div><div class=\"line\">    height: 50px;</div><div class=\"line\">    background: red;</div><div class=\"line\">    border-radius: 100% 0 0 100% /50%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css34.png\" alt=\"\"></p>\n</li>\n</ul>\n<h1 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"::after\"></a>::after</h1><p>这里拿个简单的例子来看，我们要画一个放大镜，如下图：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css35.png\" alt=\"\"></p>\n<p>分析一下，这个放大镜可以由两个div组成，一个是黑色的圆环，一个是黑色把手（旋转45度）。所以我们就需要用两个div来实现吗？答案是NO，一个div也是可以的，我们可以借助<code>::after</code>来添加一个元素。同理如果需要三个div，我们还可以使用<code>::before</code>再添加一个元素。下面看一下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: 50px;</div><div class=\"line\">    height: 50px;</div><div class=\"line\">    border-radius: 50%;</div><div class=\"line\">    border: 5px solid #333;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">div::after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: block;    </div><div class=\"line\">    width: 8px;    </div><div class=\"line\">    height: 60px;    </div><div class=\"line\">    border-radius: 5px;    </div><div class=\"line\">    background: #333;    </div><div class=\"line\">    position: absolute;    </div><div class=\"line\">    right: -22px;    </div><div class=\"line\">    top: 38px;    </div><div class=\"line\">    transform: rotate(-45deg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"attr和content\"><a href=\"#attr和content\" class=\"headerlink\" title=\"attr和content\"></a>attr和content</h1><p>比如我们要实现一个悬浮提示的功能。传统方法，使用title属性就能实现，但是现在我们要更美观，可以使用css3提供的<code>attr：能够在css中获取到元素的某个属性值，然后插入到伪元素的content中去。</code></p>\n<p>假如我们的html代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div data-title=<span class=\"string\">\"hello, world\"</span>&gt;hello...&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<p>我们来看看实现这个插件的css代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">div:hover::after &#123;</div><div class=\"line\">    content: attr(data-title);    //取到data-title属性的值</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 10px 14px;</div><div class=\"line\">    border: 1px solid #ddd;</div><div class=\"line\">    border-radius: 5px;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    top: -50px;</div><div class=\"line\">    left: -30px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当hover的时候，在元素尾部添加一个内容为data-title属性值的元素，所以就实现了hover显示的效果，如下图所示：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3hello.gif\" alt=\"\"></p>\n<h1 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h1><p>我们知道，在标准盒子模型中，元素的总宽＝content + padding + border + margin。 css中的盒子模型大家可能都知道，但是这个盒子模型的属性可能没有那么多人知道，<code>box-sizing</code>属性就是用来重定义这个计算方式的，它有三个取值，分别是：<code>content-box（默认）</code>、<code>border-box</code>、<code>padding-box</code></p>\n<p>一般来说，假如我们需要有一个<code>占宽200px、padding10px、border5px的div</code>，经过计算，要这么定义样式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">170</span>px;   <span class=\"comment\">//这里的宽度要使用200-10*2-5*2 = 170得到。</span></div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    padding: <span class=\"number\">10</span>px;</div><div class=\"line\">    border: <span class=\"number\">5</span>px solid red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们来使用一下box-sizing属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    width: <span class=\"number\">200</span>px;  <span class=\"comment\">//这里的宽度就是元素所占总宽度，不需要计算  </span></div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    padding: <span class=\"number\">10</span>px;</div><div class=\"line\">    border: <span class=\"number\">5</span>px solid red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"linear-gradient\"><a href=\"#linear-gradient\" class=\"headerlink\" title=\"linear-gradient\"></a>linear-gradient</h1><p>做活动页面的时候我们经常会遇到这样的需求：</p>\n<p>顶部的中间一张大banner图片，然后整个区域的背景色要根据图片背景色渐变。就可以使用这个属性了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    width: <span class=\"number\">200</span>px;</div><div class=\"line\">    height: <span class=\"number\">50</span>px;</div><div class=\"line\">    background: linear-gradient(to right, red, yellow, black, green);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css39.png\" alt=\"\"></p>\n<p>是不是很有趣？其实，<code>linear-gradient</code>还有更多有趣的功能，你可以根据下面的动图去感受一下：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3gradi2.gif\" alt=\"\"></p>\n<p>你以为这就完了？等等，还有更强大的呢！<code>repeating-linear-gradient</code>，来感受一下：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3gradi.gif\" alt=\"\"></p>\n<p><code>linear-gradient</code>还有更加强大的功能，比如它可以给元素添加多个渐变，从而达到更NB的效果。</p>\n<h1 id=\"radial-gradient\"><a href=\"#radial-gradient\" class=\"headerlink\" title=\"radial-gradient\"></a>radial-gradient</h1><p>上面的<code>linear-gradient</code>是线性渐变，这个属性是径向渐变。下面的代码实现了一个chrome的logo。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css36.png\" alt=\"\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">div.chrome &#123;</div><div class=\"line\">    width: 180px;</div><div class=\"line\">    height: 180px;</div><div class=\"line\">    border-radius: 50%;</div><div class=\"line\">    box-shadow: 0 0 4px #999, 0 0 2px #ddd inset;</div><div class=\"line\">    background: radial-gradient(circle, #4FACF5 0, #2196F3 28%, transparent 28%),</div><div class=\"line\">                radial-gradient(circle, #fff 33%, transparent 33%),</div><div class=\"line\">                linear-gradient(-50deg, #FFEB3B 34%, transparent 34%),</div><div class=\"line\">                linear-gradient(60deg, #4CAF50 33%, transparent 33%),</div><div class=\"line\">                linear-gradient(180deg, #FF756B 0, #F44336 30%, transparent 30%),</div><div class=\"line\">                linear-gradient(-120deg, #FFEB3B 40%, transparent 40%),</div><div class=\"line\">                linear-gradient(-60deg, #FFEB3B 30%, transparent 30%),</div><div class=\"line\">                linear-gradient(0deg, #4CAF50 45%, transparent 45%),</div><div class=\"line\">                linear-gradient(60deg, #4CAF50 30%, transparent 30%),</div><div class=\"line\">                linear-gradient(120deg, #F44336 50%, transparent 50%),</div><div class=\"line\">                linear-gradient(180deg, #F44336 30%, transparent 30%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现原理就是使用了多个渐变色放在div上，友协被遮住，视觉上就产生了想要的效果，是不是很强大！看了下图你就知道其实就是在div上加了很多个渐变。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3test6.gif\" alt=\"\"></p>\n<h1 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h1><p>上面的例子大都是对css3新属性的了解和认识，这个实例则是有关于解决方案的例子。</p>\n<ul>\n<li><p>需求：我们要实现下面这个效果图（三个边框：黑色，绿色，红色）：</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css37.png\" alt=\"\"></p>\n</li>\n<li><p>解法一：假如没有css3知识，我们可以做这样做：用三个div，分别设置边框，然后分别控制宽高和位置来达到这个效果。显然，很复杂，这里就不贴代码了。</p>\n</li>\n<li><p>解法二：现在我们有css3的知识了，借助<code>box-shadow</code>就可以轻松解决这个问题。先来看看它的语法：<code>box-shadow: [x偏移] [y偏移] [阴影模糊宽度] [阴影宽度] [颜色]</code>，并且还能添加多个阴影，使用逗号隔开。</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3borde2.gif\" alt=\"\"></p>\n<p>  当然你还可以继续增加，四重边框，五重边框……都不再是问题啦。另外，还能加圆角，阴影会贴紧内层div。</p>\n<p>  <code>使用这种方法，有一个缺点就是，不支持虚线边框。</code></p>\n</li>\n<li><p>解法三： 使用outline（只能支持两重边框）</p>\n<p>  <img src=\"http://7xtawy.com1.z0.glb.clouddn.com/css3border.gif\" alt=\"\"></p>\n<p>  <code>使用这种方法的缺点就是，只能支持两层的边框，而且还不能根据容器的border-radius自动贴合。</code></p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过这段时间对css3的深入了解，发现css3真的很强大，研究起来还是挺有趣的，只有想不到，感觉没有做不到。不过为了实现很酷炫的效果，可能需要编写大量的css代码，这个时候使用什么技术就需要我们自己来衡量了。</p>\n<hr>"},{"title":"hexo博客进阶－性能优化","date":"2016-07-10T09:47:20.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n刚开始搭建博客的时候觉得很好玩，可是玩的久了，问题慢慢就出来了，就跟谈恋爱一样＝＝。比如现在我访问博客的时候就感觉慢的要死，不可否认，使用hexo搭建服务器方便快捷，但是由于github作为服务器，也会有速度稍慢的代价产生。既然我不能放弃github，那就只有另寻出路了，作为一名前端，有哪些地方我们可以自己来优化呢？\n\n先来说说我们在面试中经常遇到的一个问题，`在浏览器输入url到页面打开，都做了些什么？`\n\n<!--more-->\n\n- 浏览器里输入网址\n- 浏览器查找域名对应的IP地址\n    - 这一步包括DNS具体的查找过程，包括：浏览器缓存->系统缓存->路由器缓存...\n- 浏览器向web服务器发送一个HTTP请求\n- 服务器的永久重定向响应（从`http://example.com` 到 `http://www.example.com`）\n   - 关于为什么要重定向。其中一个原因跟`搜索引擎`排名有关。如果一个页面有两个地址，就像`http://example.com/`和`http://www.example.com/`，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。所以要把带www的和不带www的地址归到同一个网站排名下。还有一个原因是用不同的地址会造成`缓存友好性变差`。\n- 浏览器跟踪重定向地址，发起GET请求\n- 服务器\"处理\"请求，向浏览器发回一个HTML响应\n- 浏览器解析显示HTML\n- 浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）\n- 浏览器发送异步请求（ajax请求等）\n\n# 分析\n从上面的过程可以看出，其实大部分过程我们是控制不了的，我们只能从浏览器端入手来找一些可以做的事情。那么，我们可以做些什么呢？\n- 少发送请求\n   - 把要加载的js文件（css文件同理）合并成一个（尽量少）文件，则可以向服务器少发送请求，从而减少等待时间。\n- 压缩文件\n   - 使用压缩之后的js、css、img文件，同样可以减少请求时间。\n- Css Sprite\n   - 这是css的一项技术，将图片尽可能多的合并成一个图片文件，第一次使用的时候加载这张图片，然后浏览器会缓存下来，其他地方再使用的时候就不需要重新请求了。\n- js／css位置\n   - css引用建议放在head标签里面；js脚本建议放到body内容的最后，原因：等待js加载或者脚本有错误的时候不会影响html页面的展示。\n- 待发现...^_^\n\n# 博客优化\n## 优化之前\n优化之前，大家可以利用百度统计这个平台（界面太丑，不过功能还行＝＝）给自己的网站做一些评测，比如可以测速，并给出优化建议，下面是我测试的结果：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/111.png)\n\n他还会告诉我们导致网站访问速度慢的原因，以便我们对症下药，如下图：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/2.png)\n\n## 使用gulp优化\n从上图可以看出，慢的不要不要的，不优化根本不能接受，所以，我尝试着做了一些优化，主要是利用gulp和它的一些插件来压缩js、css、img等文件，下面是我添加的gulpfile.js文件:\n\n```js\nvar gulp = require('gulp'),\n    uglify = require('gulp-uglify'),\n    rename = require('gulp-rename'),\n    cssmin = require('gulp-minify-css'),\n    imagemin = require('gulp-imagemin');\n//JS压缩\ngulp.task('uglify', function() {\n    return gulp.src('././public/js/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('././public/js/'));\n});\n//public-fancybox-js压缩\ngulp.task('fancybox:js', function() {\n    return gulp.src('././public/fancybox/jquery.fancybox.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('././public/fancybox/'));\n});\n//public-fancybox-css压缩\ngulp.task('fancybox:css', function() {\n    return gulp.src('././public/fancybox/jquery.fancybox.css')\n        .pipe(cssmin())\n        .pipe(gulp.dest('././public/fancybox/'));\n});\n//CSS压缩\ngulp.task('cssmin', function() {\n    return gulp.src('././public/css/style.css')\n        .pipe(cssmin())\n        .pipe(gulp.dest('././public/css/'));\n});\n//图片压缩\ngulp.task('images', function() {\n    gulp.src('././public/img/*.*')\n        .pipe(imagemin({\n            progressive: false\n        }))\n        .pipe(gulp.dest('././public/img/'));\n});\ngulp.task('build', ['uglify', 'cssmin', 'images', 'fancybox:js', 'fancybox:css']);\n```\n\n# 博客优化\n优化之后，然后每次添加文章之后，编译发布之间需要多一个命令来压缩这些文件，总结了一下，详细如下：\n\n```js\nhexo clean      //清除public文件夹\nhexo g       //编译文章，生成public文件夹\ngulp build     //压缩js、css、img文件\nhexo d      //部署到github\n```\n\n最后再去测试一下网站的访问速度，可以看出比之前已经快了不少了，截图如下：\n![](https://img.alicdn.com/tps/TB1iMayKVXXXXX.XXXXXXXXXXXX-795-86.png)\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/hexo-faster.md","raw":"---\ntitle: hexo博客进阶－性能优化\ndate: 2016-07-10T17:47:20.000Z\ncategories: 工作\ntags:\n  - hexo系列\n  - 教程\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n刚开始搭建博客的时候觉得很好玩，可是玩的久了，问题慢慢就出来了，就跟谈恋爱一样＝＝。比如现在我访问博客的时候就感觉慢的要死，不可否认，使用hexo搭建服务器方便快捷，但是由于github作为服务器，也会有速度稍慢的代价产生。既然我不能放弃github，那就只有另寻出路了，作为一名前端，有哪些地方我们可以自己来优化呢？\n\n先来说说我们在面试中经常遇到的一个问题，`在浏览器输入url到页面打开，都做了些什么？`\n\n<!--more-->\n\n- 浏览器里输入网址\n- 浏览器查找域名对应的IP地址\n    - 这一步包括DNS具体的查找过程，包括：浏览器缓存->系统缓存->路由器缓存...\n- 浏览器向web服务器发送一个HTTP请求\n- 服务器的永久重定向响应（从`http://example.com` 到 `http://www.example.com`）\n   - 关于为什么要重定向。其中一个原因跟`搜索引擎`排名有关。如果一个页面有两个地址，就像`http://example.com/`和`http://www.example.com/`，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。所以要把带www的和不带www的地址归到同一个网站排名下。还有一个原因是用不同的地址会造成`缓存友好性变差`。\n- 浏览器跟踪重定向地址，发起GET请求\n- 服务器\"处理\"请求，向浏览器发回一个HTML响应\n- 浏览器解析显示HTML\n- 浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）\n- 浏览器发送异步请求（ajax请求等）\n\n# 分析\n从上面的过程可以看出，其实大部分过程我们是控制不了的，我们只能从浏览器端入手来找一些可以做的事情。那么，我们可以做些什么呢？\n- 少发送请求\n   - 把要加载的js文件（css文件同理）合并成一个（尽量少）文件，则可以向服务器少发送请求，从而减少等待时间。\n- 压缩文件\n   - 使用压缩之后的js、css、img文件，同样可以减少请求时间。\n- Css Sprite\n   - 这是css的一项技术，将图片尽可能多的合并成一个图片文件，第一次使用的时候加载这张图片，然后浏览器会缓存下来，其他地方再使用的时候就不需要重新请求了。\n- js／css位置\n   - css引用建议放在head标签里面；js脚本建议放到body内容的最后，原因：等待js加载或者脚本有错误的时候不会影响html页面的展示。\n- 待发现...^_^\n\n# 博客优化\n## 优化之前\n优化之前，大家可以利用百度统计这个平台（界面太丑，不过功能还行＝＝）给自己的网站做一些评测，比如可以测速，并给出优化建议，下面是我测试的结果：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/111.png)\n\n他还会告诉我们导致网站访问速度慢的原因，以便我们对症下药，如下图：\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/2.png)\n\n## 使用gulp优化\n从上图可以看出，慢的不要不要的，不优化根本不能接受，所以，我尝试着做了一些优化，主要是利用gulp和它的一些插件来压缩js、css、img等文件，下面是我添加的gulpfile.js文件:\n\n```js\nvar gulp = require('gulp'),\n    uglify = require('gulp-uglify'),\n    rename = require('gulp-rename'),\n    cssmin = require('gulp-minify-css'),\n    imagemin = require('gulp-imagemin');\n//JS压缩\ngulp.task('uglify', function() {\n    return gulp.src('././public/js/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('././public/js/'));\n});\n//public-fancybox-js压缩\ngulp.task('fancybox:js', function() {\n    return gulp.src('././public/fancybox/jquery.fancybox.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('././public/fancybox/'));\n});\n//public-fancybox-css压缩\ngulp.task('fancybox:css', function() {\n    return gulp.src('././public/fancybox/jquery.fancybox.css')\n        .pipe(cssmin())\n        .pipe(gulp.dest('././public/fancybox/'));\n});\n//CSS压缩\ngulp.task('cssmin', function() {\n    return gulp.src('././public/css/style.css')\n        .pipe(cssmin())\n        .pipe(gulp.dest('././public/css/'));\n});\n//图片压缩\ngulp.task('images', function() {\n    gulp.src('././public/img/*.*')\n        .pipe(imagemin({\n            progressive: false\n        }))\n        .pipe(gulp.dest('././public/img/'));\n});\ngulp.task('build', ['uglify', 'cssmin', 'images', 'fancybox:js', 'fancybox:css']);\n```\n\n# 博客优化\n优化之后，然后每次添加文章之后，编译发布之间需要多一个命令来压缩这些文件，总结了一下，详细如下：\n\n```js\nhexo clean      //清除public文件夹\nhexo g       //编译文章，生成public文件夹\ngulp build     //压缩js、css、img文件\nhexo d      //部署到github\n```\n\n最后再去测试一下网站的访问速度，可以看出比之前已经快了不少了，截图如下：\n![](https://img.alicdn.com/tps/TB1iMayKVXXXXX.XXXXXXXXXXXX-795-86.png)\n\n\n--------------------------------------------------------------------------------\n","slug":"hexo-faster","published":1,"updated":"2016-10-11T16:29:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pday000fu13gmm8gtvbu","content":"<hr>\n<p>刚开始搭建博客的时候觉得很好玩，可是玩的久了，问题慢慢就出来了，就跟谈恋爱一样＝＝。比如现在我访问博客的时候就感觉慢的要死，不可否认，使用hexo搭建服务器方便快捷，但是由于github作为服务器，也会有速度稍慢的代价产生。既然我不能放弃github，那就只有另寻出路了，作为一名前端，有哪些地方我们可以自己来优化呢？</p>\n<p>先来说说我们在面试中经常遇到的一个问题，<code>在浏览器输入url到页面打开，都做了些什么？</code></p>\n<a id=\"more\"></a>\n<ul>\n<li>浏览器里输入网址</li>\n<li>浏览器查找域名对应的IP地址<ul>\n<li>这一步包括DNS具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…</li>\n</ul>\n</li>\n<li>浏览器向web服务器发送一个HTTP请求</li>\n<li>服务器的永久重定向响应（从<code>http://example.com</code> 到 <code>http://www.example.com</code>）<ul>\n<li>关于为什么要重定向。其中一个原因跟<code>搜索引擎</code>排名有关。如果一个页面有两个地址，就像<code>http://example.com/</code>和<code>http://www.example.com/</code>，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。所以要把带www的和不带www的地址归到同一个网站排名下。还有一个原因是用不同的地址会造成<code>缓存友好性变差</code>。</li>\n</ul>\n</li>\n<li>浏览器跟踪重定向地址，发起GET请求</li>\n<li>服务器”处理”请求，向浏览器发回一个HTML响应</li>\n<li>浏览器解析显示HTML</li>\n<li>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</li>\n<li>浏览器发送异步请求（ajax请求等）</li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>从上面的过程可以看出，其实大部分过程我们是控制不了的，我们只能从浏览器端入手来找一些可以做的事情。那么，我们可以做些什么呢？</p>\n<ul>\n<li>少发送请求<ul>\n<li>把要加载的js文件（css文件同理）合并成一个（尽量少）文件，则可以向服务器少发送请求，从而减少等待时间。</li>\n</ul>\n</li>\n<li>压缩文件<ul>\n<li>使用压缩之后的js、css、img文件，同样可以减少请求时间。</li>\n</ul>\n</li>\n<li>Css Sprite<ul>\n<li>这是css的一项技术，将图片尽可能多的合并成一个图片文件，第一次使用的时候加载这张图片，然后浏览器会缓存下来，其他地方再使用的时候就不需要重新请求了。</li>\n</ul>\n</li>\n<li>js／css位置<ul>\n<li>css引用建议放在head标签里面；js脚本建议放到body内容的最后，原因：等待js加载或者脚本有错误的时候不会影响html页面的展示。</li>\n</ul>\n</li>\n<li>待发现…^_^</li>\n</ul>\n<h1 id=\"博客优化\"><a href=\"#博客优化\" class=\"headerlink\" title=\"博客优化\"></a>博客优化</h1><h2 id=\"优化之前\"><a href=\"#优化之前\" class=\"headerlink\" title=\"优化之前\"></a>优化之前</h2><p>优化之前，大家可以利用百度统计这个平台（界面太丑，不过功能还行＝＝）给自己的网站做一些评测，比如可以测速，并给出优化建议，下面是我测试的结果：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/111.png\" alt=\"\"></p>\n<p>他还会告诉我们导致网站访问速度慢的原因，以便我们对症下药，如下图：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/2.png\" alt=\"\"></p>\n<h2 id=\"使用gulp优化\"><a href=\"#使用gulp优化\" class=\"headerlink\" title=\"使用gulp优化\"></a>使用gulp优化</h2><p>从上图可以看出，慢的不要不要的，不优化根本不能接受，所以，我尝试着做了一些优化，主要是利用gulp和它的一些插件来压缩js、css、img等文件，下面是我添加的gulpfile.js文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">    cssmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</div><div class=\"line\">    imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>);</div><div class=\"line\"><span class=\"comment\">//JS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'uglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/js/*.js'</span>)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/js/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//public-fancybox-js压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'fancybox:js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/fancybox/jquery.fancybox.js'</span>)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/fancybox/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//public-fancybox-css压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'fancybox:css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/fancybox/jquery.fancybox.css'</span>)</div><div class=\"line\">        .pipe(cssmin())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/fancybox/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//CSS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/css/style.css'</span>)</div><div class=\"line\">        .pipe(cssmin())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/css/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//图片压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'././public/img/*.*'</span>)</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            progressive: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/img/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'uglify'</span>, <span class=\"string\">'cssmin'</span>, <span class=\"string\">'images'</span>, <span class=\"string\">'fancybox:js'</span>, <span class=\"string\">'fancybox:css'</span>]);</div></pre></td></tr></table></figure>\n<h1 id=\"博客优化-1\"><a href=\"#博客优化-1\" class=\"headerlink\" title=\"博客优化\"></a>博客优化</h1><p>优化之后，然后每次添加文章之后，编译发布之间需要多一个命令来压缩这些文件，总结了一下，详细如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hexo clean      <span class=\"comment\">//清除public文件夹</span></div><div class=\"line\">hexo g       <span class=\"comment\">//编译文章，生成public文件夹</span></div><div class=\"line\">gulp build     <span class=\"comment\">//压缩js、css、img文件</span></div><div class=\"line\">hexo d      <span class=\"comment\">//部署到github</span></div></pre></td></tr></table></figure>\n<p>最后再去测试一下网站的访问速度，可以看出比之前已经快了不少了，截图如下：<br><img src=\"https://img.alicdn.com/tps/TB1iMayKVXXXXX.XXXXXXXXXXXX-795-86.png\" alt=\"\"></p>\n<hr>\n","excerpt":"<hr>\n<p>刚开始搭建博客的时候觉得很好玩，可是玩的久了，问题慢慢就出来了，就跟谈恋爱一样＝＝。比如现在我访问博客的时候就感觉慢的要死，不可否认，使用hexo搭建服务器方便快捷，但是由于github作为服务器，也会有速度稍慢的代价产生。既然我不能放弃github，那就只有另寻出路了，作为一名前端，有哪些地方我们可以自己来优化呢？</p>\n<p>先来说说我们在面试中经常遇到的一个问题，<code>在浏览器输入url到页面打开，都做了些什么？</code></p>","more":"<ul>\n<li>浏览器里输入网址</li>\n<li>浏览器查找域名对应的IP地址<ul>\n<li>这一步包括DNS具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…</li>\n</ul>\n</li>\n<li>浏览器向web服务器发送一个HTTP请求</li>\n<li>服务器的永久重定向响应（从<code>http://example.com</code> 到 <code>http://www.example.com</code>）<ul>\n<li>关于为什么要重定向。其中一个原因跟<code>搜索引擎</code>排名有关。如果一个页面有两个地址，就像<code>http://example.com/</code>和<code>http://www.example.com/</code>，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。所以要把带www的和不带www的地址归到同一个网站排名下。还有一个原因是用不同的地址会造成<code>缓存友好性变差</code>。</li>\n</ul>\n</li>\n<li>浏览器跟踪重定向地址，发起GET请求</li>\n<li>服务器”处理”请求，向浏览器发回一个HTML响应</li>\n<li>浏览器解析显示HTML</li>\n<li>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</li>\n<li>浏览器发送异步请求（ajax请求等）</li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>从上面的过程可以看出，其实大部分过程我们是控制不了的，我们只能从浏览器端入手来找一些可以做的事情。那么，我们可以做些什么呢？</p>\n<ul>\n<li>少发送请求<ul>\n<li>把要加载的js文件（css文件同理）合并成一个（尽量少）文件，则可以向服务器少发送请求，从而减少等待时间。</li>\n</ul>\n</li>\n<li>压缩文件<ul>\n<li>使用压缩之后的js、css、img文件，同样可以减少请求时间。</li>\n</ul>\n</li>\n<li>Css Sprite<ul>\n<li>这是css的一项技术，将图片尽可能多的合并成一个图片文件，第一次使用的时候加载这张图片，然后浏览器会缓存下来，其他地方再使用的时候就不需要重新请求了。</li>\n</ul>\n</li>\n<li>js／css位置<ul>\n<li>css引用建议放在head标签里面；js脚本建议放到body内容的最后，原因：等待js加载或者脚本有错误的时候不会影响html页面的展示。</li>\n</ul>\n</li>\n<li>待发现…^_^</li>\n</ul>\n<h1 id=\"博客优化\"><a href=\"#博客优化\" class=\"headerlink\" title=\"博客优化\"></a>博客优化</h1><h2 id=\"优化之前\"><a href=\"#优化之前\" class=\"headerlink\" title=\"优化之前\"></a>优化之前</h2><p>优化之前，大家可以利用百度统计这个平台（界面太丑，不过功能还行＝＝）给自己的网站做一些评测，比如可以测速，并给出优化建议，下面是我测试的结果：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/111.png\" alt=\"\"></p>\n<p>他还会告诉我们导致网站访问速度慢的原因，以便我们对症下药，如下图：</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/2.png\" alt=\"\"></p>\n<h2 id=\"使用gulp优化\"><a href=\"#使用gulp优化\" class=\"headerlink\" title=\"使用gulp优化\"></a>使用gulp优化</h2><p>从上图可以看出，慢的不要不要的，不优化根本不能接受，所以，我尝试着做了一些优化，主要是利用gulp和它的一些插件来压缩js、css、img等文件，下面是我添加的gulpfile.js文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">    cssmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</div><div class=\"line\">    imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>);</div><div class=\"line\"><span class=\"comment\">//JS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'uglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/js/*.js'</span>)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/js/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//public-fancybox-js压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'fancybox:js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/fancybox/jquery.fancybox.js'</span>)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/fancybox/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//public-fancybox-css压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'fancybox:css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/fancybox/jquery.fancybox.css'</span>)</div><div class=\"line\">        .pipe(cssmin())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/fancybox/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//CSS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'././public/css/style.css'</span>)</div><div class=\"line\">        .pipe(cssmin())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/css/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//图片压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'././public/img/*.*'</span>)</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            progressive: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/img/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'uglify'</span>, <span class=\"string\">'cssmin'</span>, <span class=\"string\">'images'</span>, <span class=\"string\">'fancybox:js'</span>, <span class=\"string\">'fancybox:css'</span>]);</div></pre></td></tr></table></figure>\n<h1 id=\"博客优化-1\"><a href=\"#博客优化-1\" class=\"headerlink\" title=\"博客优化\"></a>博客优化</h1><p>优化之后，然后每次添加文章之后，编译发布之间需要多一个命令来压缩这些文件，总结了一下，详细如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">hexo clean      <span class=\"comment\">//清除public文件夹</span></div><div class=\"line\">hexo g       <span class=\"comment\">//编译文章，生成public文件夹</span></div><div class=\"line\">gulp build     <span class=\"comment\">//压缩js、css、img文件</span></div><div class=\"line\">hexo d      <span class=\"comment\">//部署到github</span></div></pre></td></tr></table></figure>\n<p>最后再去测试一下网站的访问速度，可以看出比之前已经快了不少了，截图如下：<br><img src=\"https://img.alicdn.com/tps/TB1iMayKVXXXXX.XXXXXXXXXXXX-795-86.png\" alt=\"\"></p>\n<hr>"},{"title":"实例demo之3D transform立方体效果","date":"2016-07-24T09:41:57.000Z","toc":false,"_content":"\n--------------------------------------------------------------------------------\n\n<style>\n    @keyframes rotate-frame {\n        0% {\n            transform: rotateX(0deg) rotateY(0deg);\n        }\n        10% {\n            transform: rotateX(0deg) rotateY(180deg);\n        }\n        20% {\n            transform: rotateX(-180deg) rotateY(180deg);\n        }\n        30% {\n            transform: rotateX(-360deg) rotateY(180deg);\n        }\n        40% {\n            transform: rotateX(-360deg) rotateY(360deg);\n        }\n        50% {\n            transform: rotateX(-180deg) rotateY(360deg);\n        }\n        60% {\n            transform: rotateX(90deg) rotateY(180deg);\n        }\n        70% {\n            transform: rotateX(0) rotateY(180deg);\n        }\n        80% {\n            transform: rotateX(90deg) rotateY(90deg);\n        }\n        90% {\n            transform: rotateX(90deg) rotateY(0);\n        }\n        100% {\n            transform: rotateX(0) rotateY(0);\n        }\n    }\n\n    .my-container {\n        width: 62.5rem;\n        height: 31.25rem;\n        margin: 0 auto;\n        transform: scale(0.6) translateY(-10rem);\n    }\n\n    .rect-wrap {\n        position: relative;\n        perspective: 100rem;\n    }\n\n    .container {\n        width: 50rem;\n        height: 50rem;\n        transform-style: preserve-3d;\n        transform-origin: 50% 50% 12.5rem;\n        animation: rotate-frame 30s linear infinite;\n    }\n\n    .slide {\n        width: 25rem;\n        height: 25rem;\n        position: absolute;\n        box-shadow: 0 0 1.25rem rgba(0, 0, 0, 0.9) inset;\n    }\n\n    .top {\n        left: 12.5rem;\n        top: -12.5rem;\n        transform: rotateX(-90deg);\n        transform-origin: bottom;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img1.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .bottom {\n        left: 12.5rem;\n        bottom: -12.5rem;\n        transform: rotateX(90deg);\n        transform-origin: top;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img2.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .left {\n        left: -12.5rem;\n        top: 12.5rem;\n        transform: rotateY(90deg);\n        transform-origin: right;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img3.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .right {\n        left: 37.5rem;\n        top: 12.5rem;\n        transform: rotateY(-90deg);\n        transform-origin: left;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img4.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .front {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(25rem);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img5.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .back {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(0);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img6.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n</style>\n\n\n<div class=\"my-container\"><div class=\"rect-wrap\"><div class=\"container\">\n    <div class=\"top slide\"></div>\n    <div class=\"bottom slide\"></div>\n    <div class=\"left slide\"></div>\n    <div class=\"right slide\"></div>\n    <div class=\"front slide\"></div>\n    <div class=\"back slide\"></div>\n</div></div></div>\n\n--------------------------------------------------------------------------------\n","source":"_posts/rect-grid-demo.md","raw":"---\ntitle: 实例demo之3D transform立方体效果\ndate: 2016-07-24T17:41:57.000Z\ncategories: 工作\ntags:\n  - demo\n  - CSS3\ntoc: false\n---\n\n--------------------------------------------------------------------------------\n\n<style>\n    @keyframes rotate-frame {\n        0% {\n            transform: rotateX(0deg) rotateY(0deg);\n        }\n        10% {\n            transform: rotateX(0deg) rotateY(180deg);\n        }\n        20% {\n            transform: rotateX(-180deg) rotateY(180deg);\n        }\n        30% {\n            transform: rotateX(-360deg) rotateY(180deg);\n        }\n        40% {\n            transform: rotateX(-360deg) rotateY(360deg);\n        }\n        50% {\n            transform: rotateX(-180deg) rotateY(360deg);\n        }\n        60% {\n            transform: rotateX(90deg) rotateY(180deg);\n        }\n        70% {\n            transform: rotateX(0) rotateY(180deg);\n        }\n        80% {\n            transform: rotateX(90deg) rotateY(90deg);\n        }\n        90% {\n            transform: rotateX(90deg) rotateY(0);\n        }\n        100% {\n            transform: rotateX(0) rotateY(0);\n        }\n    }\n\n    .my-container {\n        width: 62.5rem;\n        height: 31.25rem;\n        margin: 0 auto;\n        transform: scale(0.6) translateY(-10rem);\n    }\n\n    .rect-wrap {\n        position: relative;\n        perspective: 100rem;\n    }\n\n    .container {\n        width: 50rem;\n        height: 50rem;\n        transform-style: preserve-3d;\n        transform-origin: 50% 50% 12.5rem;\n        animation: rotate-frame 30s linear infinite;\n    }\n\n    .slide {\n        width: 25rem;\n        height: 25rem;\n        position: absolute;\n        box-shadow: 0 0 1.25rem rgba(0, 0, 0, 0.9) inset;\n    }\n\n    .top {\n        left: 12.5rem;\n        top: -12.5rem;\n        transform: rotateX(-90deg);\n        transform-origin: bottom;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img1.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .bottom {\n        left: 12.5rem;\n        bottom: -12.5rem;\n        transform: rotateX(90deg);\n        transform-origin: top;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img2.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .left {\n        left: -12.5rem;\n        top: 12.5rem;\n        transform: rotateY(90deg);\n        transform-origin: right;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img3.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .right {\n        left: 37.5rem;\n        top: 12.5rem;\n        transform: rotateY(-90deg);\n        transform-origin: left;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img4.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .front {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(25rem);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img5.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .back {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(0);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img6.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n</style>\n\n\n<div class=\"my-container\"><div class=\"rect-wrap\"><div class=\"container\">\n    <div class=\"top slide\"></div>\n    <div class=\"bottom slide\"></div>\n    <div class=\"left slide\"></div>\n    <div class=\"right slide\"></div>\n    <div class=\"front slide\"></div>\n    <div class=\"back slide\"></div>\n</div></div></div>\n\n--------------------------------------------------------------------------------\n","slug":"rect-grid-demo","published":1,"updated":"2016-08-07T13:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdb0000gu13g5j9zkl54","content":"<hr>\n<style>\n    @keyframes rotate-frame {\n        0% {\n            transform: rotateX(0deg) rotateY(0deg);\n        }\n        10% {\n            transform: rotateX(0deg) rotateY(180deg);\n        }\n        20% {\n            transform: rotateX(-180deg) rotateY(180deg);\n        }\n        30% {\n            transform: rotateX(-360deg) rotateY(180deg);\n        }\n        40% {\n            transform: rotateX(-360deg) rotateY(360deg);\n        }\n        50% {\n            transform: rotateX(-180deg) rotateY(360deg);\n        }\n        60% {\n            transform: rotateX(90deg) rotateY(180deg);\n        }\n        70% {\n            transform: rotateX(0) rotateY(180deg);\n        }\n        80% {\n            transform: rotateX(90deg) rotateY(90deg);\n        }\n        90% {\n            transform: rotateX(90deg) rotateY(0);\n        }\n        100% {\n            transform: rotateX(0) rotateY(0);\n        }\n    }\n\n    .my-container {\n        width: 62.5rem;\n        height: 31.25rem;\n        margin: 0 auto;\n        transform: scale(0.6) translateY(-10rem);\n    }\n\n    .rect-wrap {\n        position: relative;\n        perspective: 100rem;\n    }\n\n    .container {\n        width: 50rem;\n        height: 50rem;\n        transform-style: preserve-3d;\n        transform-origin: 50% 50% 12.5rem;\n        animation: rotate-frame 30s linear infinite;\n    }\n\n    .slide {\n        width: 25rem;\n        height: 25rem;\n        position: absolute;\n        box-shadow: 0 0 1.25rem rgba(0, 0, 0, 0.9) inset;\n    }\n\n    .top {\n        left: 12.5rem;\n        top: -12.5rem;\n        transform: rotateX(-90deg);\n        transform-origin: bottom;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img1.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .bottom {\n        left: 12.5rem;\n        bottom: -12.5rem;\n        transform: rotateX(90deg);\n        transform-origin: top;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img2.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .left {\n        left: -12.5rem;\n        top: 12.5rem;\n        transform: rotateY(90deg);\n        transform-origin: right;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img3.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .right {\n        left: 37.5rem;\n        top: 12.5rem;\n        transform: rotateY(-90deg);\n        transform-origin: left;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img4.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .front {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(25rem);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img5.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .back {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(0);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img6.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n</style>\n\n\n<div class=\"my-container\"><div class=\"rect-wrap\"><div class=\"container\"><br>    <div class=\"top slide\"></div><br>    <div class=\"bottom slide\"></div><br>    <div class=\"left slide\"></div><br>    <div class=\"right slide\"></div><br>    <div class=\"front slide\"></div><br>    <div class=\"back slide\"></div><br></div></div></div>\n\n<hr>\n","excerpt":"","more":"<hr>\n<style>\n    @keyframes rotate-frame {\n        0% {\n            transform: rotateX(0deg) rotateY(0deg);\n        }\n        10% {\n            transform: rotateX(0deg) rotateY(180deg);\n        }\n        20% {\n            transform: rotateX(-180deg) rotateY(180deg);\n        }\n        30% {\n            transform: rotateX(-360deg) rotateY(180deg);\n        }\n        40% {\n            transform: rotateX(-360deg) rotateY(360deg);\n        }\n        50% {\n            transform: rotateX(-180deg) rotateY(360deg);\n        }\n        60% {\n            transform: rotateX(90deg) rotateY(180deg);\n        }\n        70% {\n            transform: rotateX(0) rotateY(180deg);\n        }\n        80% {\n            transform: rotateX(90deg) rotateY(90deg);\n        }\n        90% {\n            transform: rotateX(90deg) rotateY(0);\n        }\n        100% {\n            transform: rotateX(0) rotateY(0);\n        }\n    }\n\n    .my-container {\n        width: 62.5rem;\n        height: 31.25rem;\n        margin: 0 auto;\n        transform: scale(0.6) translateY(-10rem);\n    }\n\n    .rect-wrap {\n        position: relative;\n        perspective: 100rem;\n    }\n\n    .container {\n        width: 50rem;\n        height: 50rem;\n        transform-style: preserve-3d;\n        transform-origin: 50% 50% 12.5rem;\n        animation: rotate-frame 30s linear infinite;\n    }\n\n    .slide {\n        width: 25rem;\n        height: 25rem;\n        position: absolute;\n        box-shadow: 0 0 1.25rem rgba(0, 0, 0, 0.9) inset;\n    }\n\n    .top {\n        left: 12.5rem;\n        top: -12.5rem;\n        transform: rotateX(-90deg);\n        transform-origin: bottom;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img1.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .bottom {\n        left: 12.5rem;\n        bottom: -12.5rem;\n        transform: rotateX(90deg);\n        transform-origin: top;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img2.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .left {\n        left: -12.5rem;\n        top: 12.5rem;\n        transform: rotateY(90deg);\n        transform-origin: right;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img3.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .right {\n        left: 37.5rem;\n        top: 12.5rem;\n        transform: rotateY(-90deg);\n        transform-origin: left;\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img4.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .front {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(25rem);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img5.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n\n    .back {\n        left: 12.5rem;\n        top: 12.5rem;\n        transform: translateZ(0);\n        background: url(http://7xtawy.com1.z0.glb.clouddn.com/img6.jpeg) no-repeat;\n        background-size: 100% 100%;\n    }\n</style>\n\n\n<div class=\"my-container\"><div class=\"rect-wrap\"><div class=\"container\"><br>    <div class=\"top slide\"></div><br>    <div class=\"bottom slide\"></div><br>    <div class=\"left slide\"></div><br>    <div class=\"right slide\"></div><br>    <div class=\"front slide\"></div><br>    <div class=\"back slide\"></div><br></div></div></div>\n\n<hr>\n"},{"title":"瑾以此文纪念我逝去的“宝马”","date":"2016-05-11T14:59:22.000Z","toc":null,"_content":"\n--------------------------------------------------------------------------------\n\n> 此文由本人写于大学时期，时间：2012-10-19\n\n2012年10月18日，也就是昨天，我的“宝马”毫无征兆的永远的离开了我，我很伤心，瑾以吐槽的方式用此文纪念我逝去的爱车。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac1.jpg)\n\n<!---more-->\n\n首先，它再也不会回来了，我真的很气愤，很伤心。虽然我学过很多自我疗伤的方法:生气是拿别人的过错来惩罚自己，宽恕别人就是善待自己；任何事情都有两面性，要看到好的那一面；吃一堑，长一智，只有失去才会明白得到有多么不易...这些话当真不无道理，它们也确实能够让我得到暂时的安慰，但是无论我想得怎么怎么好，只要一想到爱车不再的结果，我还是会被它莫名其妙的困扰，毕竟跟了我一年多的时光，它的零件构造我都记忆犹新;毕竟它是用血汗钱买来的，而不是偷来的！\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/bike.jpeg)\n\n其次，我再回头想想，好像最近一直比较霉，霉透了！事事不顺心，件件不如意。列举如下，开始是打篮球弄破指甲，这个就算了，然后是物理书失踪，后来找到也就算了，然后是手机屏幕毫无征兆的摔坏，修好手机的当天接着就是自行车瞬间被盗！不说不知道，一说吓一跳啊。感觉这好像电影情节，我就是正宗的男主角！但为什么又偏偏是如此令人蛋疼的剧情！\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac2.jpeg)\n\n我想问，我又没有得罪老天爷吧？！相反，最近我还做了许多好事的吧！爬金龙长城时我不顾生死也要爬到顶端只为给佛祖添点香火；在路上偶遇残疾人小施1元，虽然不多，至少心意是好的吧；早读捡钱我还拾金不昧主动发短信询问失主。真是越说越气愤，真想引用《窦娥冤》的一句话，天你不明是非枉做天！真心觉得自己被老天无缘无故的扣上一个罪犯的帽子，无辜却又无奈。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac3.jpg)\n\n唉。。。无法与老天抗衡，我认了，但他小偷算个什么东西，社会的人渣、败类。想到尾随我一年多的自行车现在不知被哪个牲口停靠在哪个角落里时，我就气不打一处来，要是真逮着他，我恨不得扒了他的衣服，写上“我是小偷”挂在树上，吊个三天三夜，但千万别弄死他，我真想看看就算这样他是否还有勇气活在这世上，如若真有，那国家不把他的脸拿去研究防弹衣就简直太可惜了！\n\n此文至此，我也不再深究了。不是我不想，也不是我不敢，只是有心无力罢了。\n\n我想对我的爱车说:对不起，没保护好你是我的错，希望你不要太早“死去”，就算死去也要去幸福的天堂。\n\n我还想对偷车大盗说:没关系，虽然不知道你是谁，但我知道，你的人生是龌龊的，至少到昨晚推走我车时为止，你就是TM的一个son of a bitch。作为一个文明人，还要温馨提示一下: 如果你要用它，就烧个香祈祷它有朝一日不会像马一样把你像坨屎一样甩出去，如果你要卖它，就祈祷你看病的钱不会高于你卖车的钱。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac4.gif)\n\n如果妈妈你看到这篇文章，请不要怪我，我不是故意的，我也很伤心。但是，除了伤心，我还会有决定，我会做兼职，把钱赚回来，至少把自行车的钱赚回来。所以，请你下次打电话时不要再拿这件事说我了，哭...\n\n好了，这篇日志过后，我就不会再郁闷了，重新振作，千万不能让小偷再看见我伤心样子，那样他会更加猖狂的。\n\n最后，用陈小春的歌来送给可恶的偷车大盗，算你狠！！！\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/life-miss-bike.md","raw":"---\ntitle: 瑾以此文纪念我逝去的“宝马”\ndate: 2016-05-11T22:59:22.000Z\ncategories: 生活\ntags: null\ntoc: null\n---\n\n--------------------------------------------------------------------------------\n\n> 此文由本人写于大学时期，时间：2012-10-19\n\n2012年10月18日，也就是昨天，我的“宝马”毫无征兆的永远的离开了我，我很伤心，瑾以吐槽的方式用此文纪念我逝去的爱车。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac1.jpg)\n\n<!---more-->\n\n首先，它再也不会回来了，我真的很气愤，很伤心。虽然我学过很多自我疗伤的方法:生气是拿别人的过错来惩罚自己，宽恕别人就是善待自己；任何事情都有两面性，要看到好的那一面；吃一堑，长一智，只有失去才会明白得到有多么不易...这些话当真不无道理，它们也确实能够让我得到暂时的安慰，但是无论我想得怎么怎么好，只要一想到爱车不再的结果，我还是会被它莫名其妙的困扰，毕竟跟了我一年多的时光，它的零件构造我都记忆犹新;毕竟它是用血汗钱买来的，而不是偷来的！\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/bike.jpeg)\n\n其次，我再回头想想，好像最近一直比较霉，霉透了！事事不顺心，件件不如意。列举如下，开始是打篮球弄破指甲，这个就算了，然后是物理书失踪，后来找到也就算了，然后是手机屏幕毫无征兆的摔坏，修好手机的当天接着就是自行车瞬间被盗！不说不知道，一说吓一跳啊。感觉这好像电影情节，我就是正宗的男主角！但为什么又偏偏是如此令人蛋疼的剧情！\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac2.jpeg)\n\n我想问，我又没有得罪老天爷吧？！相反，最近我还做了许多好事的吧！爬金龙长城时我不顾生死也要爬到顶端只为给佛祖添点香火；在路上偶遇残疾人小施1元，虽然不多，至少心意是好的吧；早读捡钱我还拾金不昧主动发短信询问失主。真是越说越气愤，真想引用《窦娥冤》的一句话，天你不明是非枉做天！真心觉得自己被老天无缘无故的扣上一个罪犯的帽子，无辜却又无奈。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac3.jpg)\n\n唉。。。无法与老天抗衡，我认了，但他小偷算个什么东西，社会的人渣、败类。想到尾随我一年多的自行车现在不知被哪个牲口停靠在哪个角落里时，我就气不打一处来，要是真逮着他，我恨不得扒了他的衣服，写上“我是小偷”挂在树上，吊个三天三夜，但千万别弄死他，我真想看看就算这样他是否还有勇气活在这世上，如若真有，那国家不把他的脸拿去研究防弹衣就简直太可惜了！\n\n此文至此，我也不再深究了。不是我不想，也不是我不敢，只是有心无力罢了。\n\n我想对我的爱车说:对不起，没保护好你是我的错，希望你不要太早“死去”，就算死去也要去幸福的天堂。\n\n我还想对偷车大盗说:没关系，虽然不知道你是谁，但我知道，你的人生是龌龊的，至少到昨晚推走我车时为止，你就是TM的一个son of a bitch。作为一个文明人，还要温馨提示一下: 如果你要用它，就烧个香祈祷它有朝一日不会像马一样把你像坨屎一样甩出去，如果你要卖它，就祈祷你看病的钱不会高于你卖车的钱。\n\n![](http://7xtawy.com1.z0.glb.clouddn.com/ac4.gif)\n\n如果妈妈你看到这篇文章，请不要怪我，我不是故意的，我也很伤心。但是，除了伤心，我还会有决定，我会做兼职，把钱赚回来，至少把自行车的钱赚回来。所以，请你下次打电话时不要再拿这件事说我了，哭...\n\n好了，这篇日志过后，我就不会再郁闷了，重新振作，千万不能让小偷再看见我伤心样子，那样他会更加猖狂的。\n\n最后，用陈小春的歌来送给可恶的偷车大盗，算你狠！！！\n\n\n--------------------------------------------------------------------------------\n","slug":"life-miss-bike","published":1,"updated":"2016-10-11T16:29:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdb2000hu13gu6p7bvlj","content":"<hr>\n<blockquote>\n<p>此文由本人写于大学时期，时间：2012-10-19</p>\n</blockquote>\n<p>2012年10月18日，也就是昨天，我的“宝马”毫无征兆的永远的离开了我，我很伤心，瑾以吐槽的方式用此文纪念我逝去的爱车。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac1.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>首先，它再也不会回来了，我真的很气愤，很伤心。虽然我学过很多自我疗伤的方法:生气是拿别人的过错来惩罚自己，宽恕别人就是善待自己；任何事情都有两面性，要看到好的那一面；吃一堑，长一智，只有失去才会明白得到有多么不易…这些话当真不无道理，它们也确实能够让我得到暂时的安慰，但是无论我想得怎么怎么好，只要一想到爱车不再的结果，我还是会被它莫名其妙的困扰，毕竟跟了我一年多的时光，它的零件构造我都记忆犹新;毕竟它是用血汗钱买来的，而不是偷来的！</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/bike.jpeg\" alt=\"\"></p>\n<p>其次，我再回头想想，好像最近一直比较霉，霉透了！事事不顺心，件件不如意。列举如下，开始是打篮球弄破指甲，这个就算了，然后是物理书失踪，后来找到也就算了，然后是手机屏幕毫无征兆的摔坏，修好手机的当天接着就是自行车瞬间被盗！不说不知道，一说吓一跳啊。感觉这好像电影情节，我就是正宗的男主角！但为什么又偏偏是如此令人蛋疼的剧情！</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac2.jpeg\" alt=\"\"></p>\n<p>我想问，我又没有得罪老天爷吧？！相反，最近我还做了许多好事的吧！爬金龙长城时我不顾生死也要爬到顶端只为给佛祖添点香火；在路上偶遇残疾人小施1元，虽然不多，至少心意是好的吧；早读捡钱我还拾金不昧主动发短信询问失主。真是越说越气愤，真想引用《窦娥冤》的一句话，天你不明是非枉做天！真心觉得自己被老天无缘无故的扣上一个罪犯的帽子，无辜却又无奈。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac3.jpg\" alt=\"\"></p>\n<p>唉。。。无法与老天抗衡，我认了，但他小偷算个什么东西，社会的人渣、败类。想到尾随我一年多的自行车现在不知被哪个牲口停靠在哪个角落里时，我就气不打一处来，要是真逮着他，我恨不得扒了他的衣服，写上“我是小偷”挂在树上，吊个三天三夜，但千万别弄死他，我真想看看就算这样他是否还有勇气活在这世上，如若真有，那国家不把他的脸拿去研究防弹衣就简直太可惜了！</p>\n<p>此文至此，我也不再深究了。不是我不想，也不是我不敢，只是有心无力罢了。</p>\n<p>我想对我的爱车说:对不起，没保护好你是我的错，希望你不要太早“死去”，就算死去也要去幸福的天堂。</p>\n<p>我还想对偷车大盗说:没关系，虽然不知道你是谁，但我知道，你的人生是龌龊的，至少到昨晚推走我车时为止，你就是TM的一个son of a bitch。作为一个文明人，还要温馨提示一下: 如果你要用它，就烧个香祈祷它有朝一日不会像马一样把你像坨屎一样甩出去，如果你要卖它，就祈祷你看病的钱不会高于你卖车的钱。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac4.gif\" alt=\"\"></p>\n<p>如果妈妈你看到这篇文章，请不要怪我，我不是故意的，我也很伤心。但是，除了伤心，我还会有决定，我会做兼职，把钱赚回来，至少把自行车的钱赚回来。所以，请你下次打电话时不要再拿这件事说我了，哭…</p>\n<p>好了，这篇日志过后，我就不会再郁闷了，重新振作，千万不能让小偷再看见我伤心样子，那样他会更加猖狂的。</p>\n<p>最后，用陈小春的歌来送给可恶的偷车大盗，算你狠！！！</p>\n<hr>\n","excerpt":"<hr>\n<blockquote>\n<p>此文由本人写于大学时期，时间：2012-10-19</p>\n</blockquote>\n<p>2012年10月18日，也就是昨天，我的“宝马”毫无征兆的永远的离开了我，我很伤心，瑾以吐槽的方式用此文纪念我逝去的爱车。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac1.jpg\" alt=\"\"></p>","more":"<p>首先，它再也不会回来了，我真的很气愤，很伤心。虽然我学过很多自我疗伤的方法:生气是拿别人的过错来惩罚自己，宽恕别人就是善待自己；任何事情都有两面性，要看到好的那一面；吃一堑，长一智，只有失去才会明白得到有多么不易…这些话当真不无道理，它们也确实能够让我得到暂时的安慰，但是无论我想得怎么怎么好，只要一想到爱车不再的结果，我还是会被它莫名其妙的困扰，毕竟跟了我一年多的时光，它的零件构造我都记忆犹新;毕竟它是用血汗钱买来的，而不是偷来的！</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/bike.jpeg\" alt=\"\"></p>\n<p>其次，我再回头想想，好像最近一直比较霉，霉透了！事事不顺心，件件不如意。列举如下，开始是打篮球弄破指甲，这个就算了，然后是物理书失踪，后来找到也就算了，然后是手机屏幕毫无征兆的摔坏，修好手机的当天接着就是自行车瞬间被盗！不说不知道，一说吓一跳啊。感觉这好像电影情节，我就是正宗的男主角！但为什么又偏偏是如此令人蛋疼的剧情！</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac2.jpeg\" alt=\"\"></p>\n<p>我想问，我又没有得罪老天爷吧？！相反，最近我还做了许多好事的吧！爬金龙长城时我不顾生死也要爬到顶端只为给佛祖添点香火；在路上偶遇残疾人小施1元，虽然不多，至少心意是好的吧；早读捡钱我还拾金不昧主动发短信询问失主。真是越说越气愤，真想引用《窦娥冤》的一句话，天你不明是非枉做天！真心觉得自己被老天无缘无故的扣上一个罪犯的帽子，无辜却又无奈。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac3.jpg\" alt=\"\"></p>\n<p>唉。。。无法与老天抗衡，我认了，但他小偷算个什么东西，社会的人渣、败类。想到尾随我一年多的自行车现在不知被哪个牲口停靠在哪个角落里时，我就气不打一处来，要是真逮着他，我恨不得扒了他的衣服，写上“我是小偷”挂在树上，吊个三天三夜，但千万别弄死他，我真想看看就算这样他是否还有勇气活在这世上，如若真有，那国家不把他的脸拿去研究防弹衣就简直太可惜了！</p>\n<p>此文至此，我也不再深究了。不是我不想，也不是我不敢，只是有心无力罢了。</p>\n<p>我想对我的爱车说:对不起，没保护好你是我的错，希望你不要太早“死去”，就算死去也要去幸福的天堂。</p>\n<p>我还想对偷车大盗说:没关系，虽然不知道你是谁，但我知道，你的人生是龌龊的，至少到昨晚推走我车时为止，你就是TM的一个son of a bitch。作为一个文明人，还要温馨提示一下: 如果你要用它，就烧个香祈祷它有朝一日不会像马一样把你像坨屎一样甩出去，如果你要卖它，就祈祷你看病的钱不会高于你卖车的钱。</p>\n<p><img src=\"http://7xtawy.com1.z0.glb.clouddn.com/ac4.gif\" alt=\"\"></p>\n<p>如果妈妈你看到这篇文章，请不要怪我，我不是故意的，我也很伤心。但是，除了伤心，我还会有决定，我会做兼职，把钱赚回来，至少把自行车的钱赚回来。所以，请你下次打电话时不要再拿这件事说我了，哭…</p>\n<p>好了，这篇日志过后，我就不会再郁闷了，重新振作，千万不能让小偷再看见我伤心样子，那样他会更加猖狂的。</p>\n<p>最后，用陈小春的歌来送给可恶的偷车大盗，算你狠！！！</p>\n<hr>"},{"title":"实例demo之小游戏tinyHeart","date":"2016-05-30T01:41:43.000Z","toc":false,"_content":"\n--------------------------------------------------------------------------------\n\n<style>\n.introduce{width:100%;min-height:50px;margin:0 auto;overflow:hidden;margin-top:-40px;}\n.introduce p.title{font-size: 16px;font-weight: bold;text-align: center;}\n.page{width: 100%;min-height: 600px;margin: 0px auto;margin-top: 6px;}\n#main{width: 100%;height: 600px;position: relative;top: -60px;}\n#canvas1, #canvas2 {width: 800px;height: 600px;position: absolute;left: 50%;top: 0;margin-left: -400px;}\n#canvas1{z-index: 1;}\n#canvas2{z-index: 0;}\n</style>\n\n<header style=\"margin-top:-55px;text-align:center;\">\n    <h1><span>TinyHeart</span><a href=\"https://github.com/luckykun/tinyHeart\" style=\"font-size:14px;font-weight:normal;\">view on github</a></h1>\n</header>\n<div class=\"introduce\">\n    <p class=\"title\">游戏规则：</p>\n    <p>1. 大鱼跟着鼠标的位置移动而吃到果实，如吃到红色果实，身体变红，画布下方的个数加1；如吃到蓝色果实，身体变蓝，下方的倍数加1。</p><p>2. 画布右上角显示着小鱼的体力值，初始为10，身体为红色，随着时间的推移，体力值减小，身体颜色变淡。</p><p>3. 大鱼吃到果实之后去喂小鱼，此时小鱼的体力值也会相应增加，画布上方的分值等于画布下方的倍数乘以个数的累加和。</p><p>4. 当小鱼体力值减到0时，游戏结束；点击画布，则可重新开始游戏。好了，拯救小鱼行动开始，躁起来吧！</p>\n</div>\n\n<!--more-->\n\n<div class=\"page\">\n    <div class=\"content\" id=\"main\">\n    <canvas id=\"canvas1\" width=\"800\" height=\"600\"></canvas>\n    <canvas id=\"canvas2\" width=\"800\" height=\"600\"></canvas></div>\n</div>\n\n\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/common-min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/index-min.js\"></script>\n<script type=\"text/javascript\">\n\tjzk.startgame();\n</script>\n\n\n----------\n","source":"_posts/tiny-heart-demo.md","raw":"---\ntitle: 实例demo之小游戏tinyHeart\ndate: 2016-05-30T09:41:43.000Z\ncategories: 工作\ntags:\n  - demo\n  - html5\n  - canvas\ntoc: false\n---\n\n--------------------------------------------------------------------------------\n\n<style>\n.introduce{width:100%;min-height:50px;margin:0 auto;overflow:hidden;margin-top:-40px;}\n.introduce p.title{font-size: 16px;font-weight: bold;text-align: center;}\n.page{width: 100%;min-height: 600px;margin: 0px auto;margin-top: 6px;}\n#main{width: 100%;height: 600px;position: relative;top: -60px;}\n#canvas1, #canvas2 {width: 800px;height: 600px;position: absolute;left: 50%;top: 0;margin-left: -400px;}\n#canvas1{z-index: 1;}\n#canvas2{z-index: 0;}\n</style>\n\n<header style=\"margin-top:-55px;text-align:center;\">\n    <h1><span>TinyHeart</span><a href=\"https://github.com/luckykun/tinyHeart\" style=\"font-size:14px;font-weight:normal;\">view on github</a></h1>\n</header>\n<div class=\"introduce\">\n    <p class=\"title\">游戏规则：</p>\n    <p>1. 大鱼跟着鼠标的位置移动而吃到果实，如吃到红色果实，身体变红，画布下方的个数加1；如吃到蓝色果实，身体变蓝，下方的倍数加1。</p><p>2. 画布右上角显示着小鱼的体力值，初始为10，身体为红色，随着时间的推移，体力值减小，身体颜色变淡。</p><p>3. 大鱼吃到果实之后去喂小鱼，此时小鱼的体力值也会相应增加，画布上方的分值等于画布下方的倍数乘以个数的累加和。</p><p>4. 当小鱼体力值减到0时，游戏结束；点击画布，则可重新开始游戏。好了，拯救小鱼行动开始，躁起来吧！</p>\n</div>\n\n<!--more-->\n\n<div class=\"page\">\n    <div class=\"content\" id=\"main\">\n    <canvas id=\"canvas1\" width=\"800\" height=\"600\"></canvas>\n    <canvas id=\"canvas2\" width=\"800\" height=\"600\"></canvas></div>\n</div>\n\n\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/common-min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/index-min.js\"></script>\n<script type=\"text/javascript\">\n\tjzk.startgame();\n</script>\n\n\n----------\n","slug":"tiny-heart-demo","published":1,"updated":"2016-07-12T14:37:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdb5000iu13gsdeftw9f","content":"<hr>\n<style>\n.introduce{width:100%;min-height:50px;margin:0 auto;overflow:hidden;margin-top:-40px;}\n.introduce p.title{font-size: 16px;font-weight: bold;text-align: center;}\n.page{width: 100%;min-height: 600px;margin: 0px auto;margin-top: 6px;}\n#main{width: 100%;height: 600px;position: relative;top: -60px;}\n#canvas1, #canvas2 {width: 800px;height: 600px;position: absolute;left: 50%;top: 0;margin-left: -400px;}\n#canvas1{z-index: 1;}\n#canvas2{z-index: 0;}\n</style>\n\n<p><header style=\"margin-top:-55px;text-align:center;\"><br>    <h1><span>TinyHeart</span><a href=\"https://github.com/luckykun/tinyHeart\" style=\"font-size:14px;font-weight:normal;\" target=\"_blank\" rel=\"external\">view on github</a></h1><br></header></p>\n<div class=\"introduce\"><br>    <p class=\"title\">游戏规则：</p><br>    <p>1. 大鱼跟着鼠标的位置移动而吃到果实，如吃到红色果实，身体变红，画布下方的个数加1；如吃到蓝色果实，身体变蓝，下方的倍数加1。</p><p>2. 画布右上角显示着小鱼的体力值，初始为10，身体为红色，随着时间的推移，体力值减小，身体颜色变淡。</p><p>3. 大鱼吃到果实之后去喂小鱼，此时小鱼的体力值也会相应增加，画布上方的分值等于画布下方的倍数乘以个数的累加和。</p><p>4. 当小鱼体力值减到0时，游戏结束；点击画布，则可重新开始游戏。好了，拯救小鱼行动开始，躁起来吧！</p><br></div>\n\n<a id=\"more\"></a>\n<div class=\"page\"><br>    <div class=\"content\" id=\"main\"><br>    <canvas id=\"canvas1\" width=\"800\" height=\"600\"></canvas><br>    <canvas id=\"canvas2\" width=\"800\" height=\"600\"></canvas></div><br></div>\n\n\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/common-min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/index-min.js\"></script>\n<script type=\"text/javascript\">\n    jzk.startgame();\n</script>\n\n\n<hr>\n","excerpt":"<hr>\n<style>\n.introduce{width:100%;min-height:50px;margin:0 auto;overflow:hidden;margin-top:-40px;}\n.introduce p.title{font-size: 16px;font-weight: bold;text-align: center;}\n.page{width: 100%;min-height: 600px;margin: 0px auto;margin-top: 6px;}\n#main{width: 100%;height: 600px;position: relative;top: -60px;}\n#canvas1, #canvas2 {width: 800px;height: 600px;position: absolute;left: 50%;top: 0;margin-left: -400px;}\n#canvas1{z-index: 1;}\n#canvas2{z-index: 0;}\n</style>\n\n<p><header style=\"margin-top:-55px;text-align:center;\"><br>    <h1><span>TinyHeart</span><a href=\"https://github.com/luckykun/tinyHeart\" style=\"font-size:14px;font-weight:normal;\">view on github</a></h1><br></header></p>\n<div class=\"introduce\"><br>    <p class=\"title\">游戏规则：</p><br>    <p>1. 大鱼跟着鼠标的位置移动而吃到果实，如吃到红色果实，身体变红，画布下方的个数加1；如吃到蓝色果实，身体变蓝，下方的倍数加1。</p><p>2. 画布右上角显示着小鱼的体力值，初始为10，身体为红色，随着时间的推移，体力值减小，身体颜色变淡。</p><p>3. 大鱼吃到果实之后去喂小鱼，此时小鱼的体力值也会相应增加，画布上方的分值等于画布下方的倍数乘以个数的累加和。</p><p>4. 当小鱼体力值减到0时，游戏结束；点击画布，则可重新开始游戏。好了，拯救小鱼行动开始，躁起来吧！</p><br></div>","more":"<div class=\"page\"><br>    <div class=\"content\" id=\"main\"><br>    <canvas id=\"canvas1\" width=\"800\" height=\"600\"></canvas><br>    <canvas id=\"canvas2\" width=\"800\" height=\"600\"></canvas></div><br></div>\n\n\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/common-min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/tinyHeart/master/js/index-min.js\"></script>\n<script type=\"text/javascript\">\n    jzk.startgame();\n</script>\n\n\n<hr>"},{"title":"实例demo之React-Todos","date":"2016-05-08T14:11:51.000Z","toc":false,"_content":"\n--------------------------------------------------------------------------------\n\n<header style=\"margin-top:-55px;\">\n    <h1 class=\"todo-title\"><span>React-Todos</span><a href=\"https://github.com/luckykun/react-demo\" style=\"font-size:14px;font-weight:normal;\">view on github</a></h1>\n</header>\n\n<div class=\"container react-todo-demo\" style=\"margin-top:-30px;\">\n    <div id=\"app\"></div>\n</div>\n\n<script src=\"https://rawgit.com/luckykun/react-demo/master/src/vendor/react.min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/react-demo/master/out/bundle.js\"></script>\n\n<!--more-->\n\n`React-Todos`是一个管理任务清单的例子，数据使用localstorage存储在浏览器中，有以下几点功能：\n- 在输入框输入任务名称，回车键显示。\n- 勾选其中一条任务列表，表示已完成。\n- 鼠标移入其中一个list，可以删除。\n- 底部有全选和删除已完成任务列表的功能。\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/react-todo-demo.md","raw":"---\ntitle: 实例demo之React-Todos\ndate: 2016-05-08T22:11:51.000Z\ncategories: 工作\ntags:\n  - demo\n  - react\ntoc: false\n---\n\n--------------------------------------------------------------------------------\n\n<header style=\"margin-top:-55px;\">\n    <h1 class=\"todo-title\"><span>React-Todos</span><a href=\"https://github.com/luckykun/react-demo\" style=\"font-size:14px;font-weight:normal;\">view on github</a></h1>\n</header>\n\n<div class=\"container react-todo-demo\" style=\"margin-top:-30px;\">\n    <div id=\"app\"></div>\n</div>\n\n<script src=\"https://rawgit.com/luckykun/react-demo/master/src/vendor/react.min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/react-demo/master/out/bundle.js\"></script>\n\n<!--more-->\n\n`React-Todos`是一个管理任务清单的例子，数据使用localstorage存储在浏览器中，有以下几点功能：\n- 在输入框输入任务名称，回车键显示。\n- 勾选其中一条任务列表，表示已完成。\n- 鼠标移入其中一个list，可以删除。\n- 底部有全选和删除已完成任务列表的功能。\n\n\n--------------------------------------------------------------------------------\n","slug":"react-todo-demo","published":1,"updated":"2016-10-11T16:29:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdb6000ju13g4m4uh743","content":"<hr>\n<header style=\"margin-top:-55px;\"><br>    <h1 class=\"todo-title\"><span>React-Todos</span><a href=\"https://github.com/luckykun/react-demo\" style=\"font-size:14px;font-weight:normal;\" target=\"_blank\" rel=\"external\">view on github</a></h1><br></header>\n\n<div class=\"container react-todo-demo\" style=\"margin-top:-30px;\"><br>    <div id=\"app\"></div><br></div>\n\n<script src=\"https://rawgit.com/luckykun/react-demo/master/src/vendor/react.min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/react-demo/master/out/bundle.js\"></script>\n\n<a id=\"more\"></a>\n<p><code>React-Todos</code>是一个管理任务清单的例子，数据使用localstorage存储在浏览器中，有以下几点功能：</p>\n<ul>\n<li>在输入框输入任务名称，回车键显示。</li>\n<li>勾选其中一条任务列表，表示已完成。</li>\n<li>鼠标移入其中一个list，可以删除。</li>\n<li>底部有全选和删除已完成任务列表的功能。</li>\n</ul>\n<hr>\n","excerpt":"<hr>\n<header style=\"margin-top:-55px;\"><br>    <h1 class=\"todo-title\"><span>React-Todos</span><a href=\"https://github.com/luckykun/react-demo\" style=\"font-size:14px;font-weight:normal;\">view on github</a></h1><br></header>\n\n<div class=\"container react-todo-demo\" style=\"margin-top:-30px;\"><br>    <div id=\"app\"></div><br></div>\n\n<script src=\"https://rawgit.com/luckykun/react-demo/master/src/vendor/react.min.js\"></script>\n<script src=\"https://rawgit.com/luckykun/react-demo/master/out/bundle.js\"></script>","more":"<p><code>React-Todos</code>是一个管理任务清单的例子，数据使用localstorage存储在浏览器中，有以下几点功能：</p>\n<ul>\n<li>在输入框输入任务名称，回车键显示。</li>\n<li>勾选其中一条任务列表，表示已完成。</li>\n<li>鼠标移入其中一个list，可以删除。</li>\n<li>底部有全选和删除已完成任务列表的功能。</li>\n</ul>\n<hr>"},{"title":"简单封装微信分享插件","date":"2016-05-14T02:33:46.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n最近要慢慢开始做移动端的一些页面了，并且大多数都是活动页面，需要在微信里面分享、传播。\n\n如果只是单单传播一下页面，扩散一些信息还好，那就跟pc差不多，一刀一刀切页面就完了。。。但是我们在传播的时候往往需要分享出去，并且自定义传播信息的标题、链接或者图片，有时候一些小游戏还需要获取用户的信息等等，那么，就需要调用微信分享的接口了...\n<!--more-->\n\n我跟着[微信官方文档](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html)开发了两次，其实如果搞清楚了流程，本身步骤也还算简单。但是我发现每次要写很多重复的代码，并且因为时间间隔，每次开发的时候又要重新看看文档，才能回忆起该怎么调用＝＝，所以我写这个微信分享的小插件，就是为了自己以后再做这样的需求时，分分钟搞定。顺便在这里做一个简单的记录，如果文中有错，欢迎大家指出^_^。\n\n# 使用条件\n首先解释一下，这里的使用条件，不是说插件的使用条件，而是调用微信分享接口的使用条件。\n\n不是每个人随便写个页面都能拿到微信里，互相传播，让用户授权，获取用户信息的。你需要拥有一个已经认证过的微信公众号，进入\"公众号设置\"的\"功能设置\"里填写\"JS接口安全域名\"，来绑定一个能访问的域名，另外还需要一个与公众号对应的唯一的appId，这个id能从公众号后台查看。\n\n# 调用过程\n其实使用的过程在微信官方文档中已经说的非常清楚了，但是其中其实有很多的都是我们用不到的，所以我把分享页面的开发过程再简单的总结一遍:\n- 引入官方分享需要的js文件：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.0.0.js\" target=\"_blank\">http://res.wx.qq.com/open/js/jweixin-1.0.0.js</a>\n- 调用后台接口，获取签名信息(服务端提供)。\n- 所有需要使用JS-SDK的页面必须先注入配置信息，如下配置之后(signature,nonceStr,timestamp就是上一步获取到的信息)，方能调用分享接口。\n\n  ```js\n  wx.config({\n      debug: true,    //开启调试模式，会实时的提示信息\n      appId: self.config.appId, // 必填，公众号的唯一标识\n      timestamp: d.timestamp, // 必填，生成签名的时间戳\n      nonceStr: d.conststr, // 必填，生成签名的随机串\n      signature: d.signature,// 必填，签名，见附录1\n      jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage']\n  });\n  ```\n\n- 如果上一步的配置有错，则执行：\n\n  ```js\n  wx.error(function(){\n        alert('error');\n  })\n  ```\n\n- 如果配置成功，则执行\n\n  ```js\n  wx.ready(function(){\n        //...\n  })\n  ```\n\n- 然后在配置成功的回调函数里，即可调用分享的函数了。\n\n  ```js\n  wx.ready(function(){\n      wx.onMenuShareTimeline({   //分享到朋友圈\n          title: ‘标题’,\n          link: 'http://www.taobao.com',\n          imgUrl: 'imgurl',\n          success: function () {\n              self.config.circleFunction();      // 分享成功的回调函数\n          },\n          cancel: function () {\n              // 取消分享\n          }\n      });\n      wx.onMenuShareAppMessage({   //分享给朋友\n          title: self.config.title,\n          link: self.config.link,\n          desc: '为什么这里没有起作用？？',\n          imgUrl: self.config.imgUrl,\n          success: function () {\n              self.config.friendFunction();         // 分享成功的回调函数\n          },\n          cancel: function () {\n              // 取消分享\n          }\n      });\n  })\n  ```\n\n  `值得一提的是，这里用到的函数，都需要在配置项的'jsAplilist'中添加进去。` jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage']\n\n# 插件代码\n\n```js\nfunction WxShare(conf){\n    this.getURLParam = function(name) {\n        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)', \"ig\").exec(location.search) || [, \"\"])[1].replace(/\\+/g, '%20')) || null;\n    };\n    this.config = {\n        appId: conf && conf.appId || '',\n        url: conf && conf.url || '',   //接口地址\n        data: {    //接口的参数\n            code: this.getURLParam('code'),\n            state: this.getURLParam('state'),\n            url: location.href.split('#')[0],   // zepto 自动编码对location.href进行encodeURIComponent编码\n            method: 0\n        },\n        imgUrl: conf && conf.imgUrl || '',\n        title: conf && conf.title || '',\n        link: conf && conf.link || '',\n        desc: conf && conf.desc || '',\n        circleFunction: conf && conf.circleFunction || function() {},\n        friendFunction: conf && conf.friendFunction || function() {},\n        callback: conf && conf.callback || function(d){}\n    };\n    this.init();\n}\nWxShare.prototype.init = function(){  //获取用户信息\n    var self = this;\n    $.ajax({\n        url: self.config.url,\n        data: self.config.data,\n        dataType: 'jsonp',\n        jsonp: 'callback',\n        success: function (d) {    // 成功获取到用户信息，然后配置sdk\n            self.config.callback(d);   //处理用户信息\n            wx.config({\n                debug: false,\n                appId: self.config.appId, // 必填，公众号的唯一标识\n                timestamp: d.timestamp, // 必填，生成签名的时间戳\n                nonceStr: d.conststr, // 必填，生成签名的随机串\n                signature: d.signature,// 必填，签名，见附录1\n                jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage']\n            });\n            wx.ready(function(){\n                wx.onMenuShareTimeline({   //分享到朋友圈\n                    title: self.config.title,\n                    link: self.config.link,\n                    imgUrl: self.config.imgUrl,\n                    success: function () {\n                        self.config.circleFunction();      // 确认分享\n                    },\n                    cancel: function () {\n                        // 取消分享\n                    }\n                });\n                wx.onMenuShareAppMessage({   //分享给朋友\n                    title: self.config.title,\n                    link: self.config.link,\n                    desc: self.config.desc,\n                    imgUrl: self.config.imgUrl,\n                    success: function () {\n                        self.config.friendFunction();         // 确认分享\n                    },\n                    cancel: function () {\n                        // 取消分享\n                    }\n                });\n            });\n        },\n        error: function (a, b, c) {\n            // alert('error');\n        }\n    });\n}\n```\n\n说明：\n- 因为我最常见的就是分享朋友圈和分享给朋友这两个需求，所以插件只是实现了这样个功能，官方文档中还有其他很多功能强大的接口，比如分享到微博，分享到qq等等，大家如果有需要，可以自行添加。\n- 另外，分享给朋友这个接口还有一些配置项因为不常用，也没有列出来，比如：文件类型type，文件链接dataUrl（如果类型为音乐或视频）。\n\n# 使用文档\n\n```js\n        var linkUrl = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx60d2d83ca82005ec&redirect_uri='+ location.href +'&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect';\n        var wxShare = new WxShare({\n            appId: 'xxxxxxxxxxxxxxxxxx',\n            url: url,\n            imgUrl: 'http://pic24.nipic.com/20120831/10132780_100453579000_2.jpg',\n            title: '这是分享出去的标题',\n            desc: '这是发送给朋友的描述信息',\n            link: linkUrl,\n            circleFunction: function(){\n            },\n            callback: function(data){   //处理获得的用户信息\n                $('.page1 .logo').html(data.nickname);\n            }\n        });\n```\n\n配置项：\n- appId： 必填，公众号的唯一标识。\n- url：后端接口地址（不需要配置接口参数，因为插件已经传入了需要的参数code、state、url、method）。\n- imgUrl：分享出去的图片地址。\n- title：分享出去的标题。\n- link：分享出去的链接（注意：如果希望别人点击你分享的链接也需要授权，则需要微信客户端的链接格式。）\n- desc：分享给朋友的的描述信息。\n- circleFunction：分享到朋友圈成功的回调函数。\n- friendFunction：分享给朋友成功的回调函数。\n- callback：参数d(用户信息)，接口调用成功，处理用户信息的回调函数。\n\n# 总结\n因为平时用到的只有分享朋友圈和朋友这两个接口，所以这个插件也只是实现了这两个功能。并且标题，链接，图片地址都是公用的。以后如有需要，可以继续增加功能。\n\n-----------------------------------------------------------------------------------\n","source":"_posts/weixin-share.md","raw":"---\ntitle: 简单封装微信分享插件\ndate: 2016-05-14T10:33:46.000Z\ncategories: 工作\ntags:\n  - 微信分享\n  - javascript\n  - 插件\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n最近要慢慢开始做移动端的一些页面了，并且大多数都是活动页面，需要在微信里面分享、传播。\n\n如果只是单单传播一下页面，扩散一些信息还好，那就跟pc差不多，一刀一刀切页面就完了。。。但是我们在传播的时候往往需要分享出去，并且自定义传播信息的标题、链接或者图片，有时候一些小游戏还需要获取用户的信息等等，那么，就需要调用微信分享的接口了...\n<!--more-->\n\n我跟着[微信官方文档](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html)开发了两次，其实如果搞清楚了流程，本身步骤也还算简单。但是我发现每次要写很多重复的代码，并且因为时间间隔，每次开发的时候又要重新看看文档，才能回忆起该怎么调用＝＝，所以我写这个微信分享的小插件，就是为了自己以后再做这样的需求时，分分钟搞定。顺便在这里做一个简单的记录，如果文中有错，欢迎大家指出^_^。\n\n# 使用条件\n首先解释一下，这里的使用条件，不是说插件的使用条件，而是调用微信分享接口的使用条件。\n\n不是每个人随便写个页面都能拿到微信里，互相传播，让用户授权，获取用户信息的。你需要拥有一个已经认证过的微信公众号，进入\"公众号设置\"的\"功能设置\"里填写\"JS接口安全域名\"，来绑定一个能访问的域名，另外还需要一个与公众号对应的唯一的appId，这个id能从公众号后台查看。\n\n# 调用过程\n其实使用的过程在微信官方文档中已经说的非常清楚了，但是其中其实有很多的都是我们用不到的，所以我把分享页面的开发过程再简单的总结一遍:\n- 引入官方分享需要的js文件：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.0.0.js\" target=\"_blank\">http://res.wx.qq.com/open/js/jweixin-1.0.0.js</a>\n- 调用后台接口，获取签名信息(服务端提供)。\n- 所有需要使用JS-SDK的页面必须先注入配置信息，如下配置之后(signature,nonceStr,timestamp就是上一步获取到的信息)，方能调用分享接口。\n\n  ```js\n  wx.config({\n      debug: true,    //开启调试模式，会实时的提示信息\n      appId: self.config.appId, // 必填，公众号的唯一标识\n      timestamp: d.timestamp, // 必填，生成签名的时间戳\n      nonceStr: d.conststr, // 必填，生成签名的随机串\n      signature: d.signature,// 必填，签名，见附录1\n      jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage']\n  });\n  ```\n\n- 如果上一步的配置有错，则执行：\n\n  ```js\n  wx.error(function(){\n        alert('error');\n  })\n  ```\n\n- 如果配置成功，则执行\n\n  ```js\n  wx.ready(function(){\n        //...\n  })\n  ```\n\n- 然后在配置成功的回调函数里，即可调用分享的函数了。\n\n  ```js\n  wx.ready(function(){\n      wx.onMenuShareTimeline({   //分享到朋友圈\n          title: ‘标题’,\n          link: 'http://www.taobao.com',\n          imgUrl: 'imgurl',\n          success: function () {\n              self.config.circleFunction();      // 分享成功的回调函数\n          },\n          cancel: function () {\n              // 取消分享\n          }\n      });\n      wx.onMenuShareAppMessage({   //分享给朋友\n          title: self.config.title,\n          link: self.config.link,\n          desc: '为什么这里没有起作用？？',\n          imgUrl: self.config.imgUrl,\n          success: function () {\n              self.config.friendFunction();         // 分享成功的回调函数\n          },\n          cancel: function () {\n              // 取消分享\n          }\n      });\n  })\n  ```\n\n  `值得一提的是，这里用到的函数，都需要在配置项的'jsAplilist'中添加进去。` jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage']\n\n# 插件代码\n\n```js\nfunction WxShare(conf){\n    this.getURLParam = function(name) {\n        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)', \"ig\").exec(location.search) || [, \"\"])[1].replace(/\\+/g, '%20')) || null;\n    };\n    this.config = {\n        appId: conf && conf.appId || '',\n        url: conf && conf.url || '',   //接口地址\n        data: {    //接口的参数\n            code: this.getURLParam('code'),\n            state: this.getURLParam('state'),\n            url: location.href.split('#')[0],   // zepto 自动编码对location.href进行encodeURIComponent编码\n            method: 0\n        },\n        imgUrl: conf && conf.imgUrl || '',\n        title: conf && conf.title || '',\n        link: conf && conf.link || '',\n        desc: conf && conf.desc || '',\n        circleFunction: conf && conf.circleFunction || function() {},\n        friendFunction: conf && conf.friendFunction || function() {},\n        callback: conf && conf.callback || function(d){}\n    };\n    this.init();\n}\nWxShare.prototype.init = function(){  //获取用户信息\n    var self = this;\n    $.ajax({\n        url: self.config.url,\n        data: self.config.data,\n        dataType: 'jsonp',\n        jsonp: 'callback',\n        success: function (d) {    // 成功获取到用户信息，然后配置sdk\n            self.config.callback(d);   //处理用户信息\n            wx.config({\n                debug: false,\n                appId: self.config.appId, // 必填，公众号的唯一标识\n                timestamp: d.timestamp, // 必填，生成签名的时间戳\n                nonceStr: d.conststr, // 必填，生成签名的随机串\n                signature: d.signature,// 必填，签名，见附录1\n                jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage']\n            });\n            wx.ready(function(){\n                wx.onMenuShareTimeline({   //分享到朋友圈\n                    title: self.config.title,\n                    link: self.config.link,\n                    imgUrl: self.config.imgUrl,\n                    success: function () {\n                        self.config.circleFunction();      // 确认分享\n                    },\n                    cancel: function () {\n                        // 取消分享\n                    }\n                });\n                wx.onMenuShareAppMessage({   //分享给朋友\n                    title: self.config.title,\n                    link: self.config.link,\n                    desc: self.config.desc,\n                    imgUrl: self.config.imgUrl,\n                    success: function () {\n                        self.config.friendFunction();         // 确认分享\n                    },\n                    cancel: function () {\n                        // 取消分享\n                    }\n                });\n            });\n        },\n        error: function (a, b, c) {\n            // alert('error');\n        }\n    });\n}\n```\n\n说明：\n- 因为我最常见的就是分享朋友圈和分享给朋友这两个需求，所以插件只是实现了这样个功能，官方文档中还有其他很多功能强大的接口，比如分享到微博，分享到qq等等，大家如果有需要，可以自行添加。\n- 另外，分享给朋友这个接口还有一些配置项因为不常用，也没有列出来，比如：文件类型type，文件链接dataUrl（如果类型为音乐或视频）。\n\n# 使用文档\n\n```js\n        var linkUrl = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx60d2d83ca82005ec&redirect_uri='+ location.href +'&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect';\n        var wxShare = new WxShare({\n            appId: 'xxxxxxxxxxxxxxxxxx',\n            url: url,\n            imgUrl: 'http://pic24.nipic.com/20120831/10132780_100453579000_2.jpg',\n            title: '这是分享出去的标题',\n            desc: '这是发送给朋友的描述信息',\n            link: linkUrl,\n            circleFunction: function(){\n            },\n            callback: function(data){   //处理获得的用户信息\n                $('.page1 .logo').html(data.nickname);\n            }\n        });\n```\n\n配置项：\n- appId： 必填，公众号的唯一标识。\n- url：后端接口地址（不需要配置接口参数，因为插件已经传入了需要的参数code、state、url、method）。\n- imgUrl：分享出去的图片地址。\n- title：分享出去的标题。\n- link：分享出去的链接（注意：如果希望别人点击你分享的链接也需要授权，则需要微信客户端的链接格式。）\n- desc：分享给朋友的的描述信息。\n- circleFunction：分享到朋友圈成功的回调函数。\n- friendFunction：分享给朋友成功的回调函数。\n- callback：参数d(用户信息)，接口调用成功，处理用户信息的回调函数。\n\n# 总结\n因为平时用到的只有分享朋友圈和朋友这两个接口，所以这个插件也只是实现了这两个功能。并且标题，链接，图片地址都是公用的。以后如有需要，可以继续增加功能。\n\n-----------------------------------------------------------------------------------\n","slug":"weixin-share","published":1,"updated":"2016-10-11T16:28:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdb8000ku13g39q5wa88","content":"<hr>\n<p>最近要慢慢开始做移动端的一些页面了，并且大多数都是活动页面，需要在微信里面分享、传播。</p>\n<p>如果只是单单传播一下页面，扩散一些信息还好，那就跟pc差不多，一刀一刀切页面就完了。。。但是我们在传播的时候往往需要分享出去，并且自定义传播信息的标题、链接或者图片，有时候一些小游戏还需要获取用户的信息等等，那么，就需要调用微信分享的接口了…<br><a id=\"more\"></a></p>\n<p>我跟着<a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\" target=\"_blank\" rel=\"external\">微信官方文档</a>开发了两次，其实如果搞清楚了流程，本身步骤也还算简单。但是我发现每次要写很多重复的代码，并且因为时间间隔，每次开发的时候又要重新看看文档，才能回忆起该怎么调用＝＝，所以我写这个微信分享的小插件，就是为了自己以后再做这样的需求时，分分钟搞定。顺便在这里做一个简单的记录，如果文中有错，欢迎大家指出^_^。</p>\n<h1 id=\"使用条件\"><a href=\"#使用条件\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h1><p>首先解释一下，这里的使用条件，不是说插件的使用条件，而是调用微信分享接口的使用条件。</p>\n<p>不是每个人随便写个页面都能拿到微信里，互相传播，让用户授权，获取用户信息的。你需要拥有一个已经认证过的微信公众号，进入”公众号设置”的”功能设置”里填写”JS接口安全域名”，来绑定一个能访问的域名，另外还需要一个与公众号对应的唯一的appId，这个id能从公众号后台查看。</p>\n<h1 id=\"调用过程\"><a href=\"#调用过程\" class=\"headerlink\" title=\"调用过程\"></a>调用过程</h1><p>其实使用的过程在微信官方文档中已经说的非常清楚了，但是其中其实有很多的都是我们用不到的，所以我把分享页面的开发过程再简单的总结一遍:</p>\n<ul>\n<li>引入官方分享需要的js文件：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.0.0.js\" target=\"_blank\">http://res.wx.qq.com/open/js/jweixin-1.0.0.js</a></li>\n<li>调用后台接口，获取签名信息(服务端提供)。</li>\n<li><p>所有需要使用JS-SDK的页面必须先注入配置信息，如下配置之后(signature,nonceStr,timestamp就是上一步获取到的信息)，方能调用分享接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: <span class=\"literal\">true</span>,    <span class=\"comment\">//开启调试模式，会实时的提示信息</span></div><div class=\"line\">    appId: self.config.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: d.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: d.conststr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature: d.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果上一步的配置有错，则执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      alert(<span class=\"string\">'error'</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果配置成功，则执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在配置成功的回调函数里，即可调用分享的函数了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    wx.onMenuShareTimeline(&#123;   <span class=\"comment\">//分享到朋友圈</span></div><div class=\"line\">        title: ‘标题’,</div><div class=\"line\">        link: <span class=\"string\">'http://www.taobao.com'</span>,</div><div class=\"line\">        imgUrl: <span class=\"string\">'imgurl'</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            self.config.circleFunction();      <span class=\"comment\">// 分享成功的回调函数</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 取消分享</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    wx.onMenuShareAppMessage(&#123;   <span class=\"comment\">//分享给朋友</span></div><div class=\"line\">        title: self.config.title,</div><div class=\"line\">        link: self.config.link,</div><div class=\"line\">        desc: <span class=\"string\">'为什么这里没有起作用？？'</span>,</div><div class=\"line\">        imgUrl: self.config.imgUrl,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            self.config.friendFunction();         <span class=\"comment\">// 分享成功的回调函数</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 取消分享</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><code>值得一提的是，这里用到的函数，都需要在配置项的&#39;jsAplilist&#39;中添加进去。</code> jsApiList: [‘onMenuShareTimeline’, ‘onMenuShareAppMessage’]</p>\n</li>\n</ul>\n<h1 id=\"插件代码\"><a href=\"#插件代码\" class=\"headerlink\" title=\"插件代码\"></a>插件代码</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WxShare</span>(<span class=\"params\">conf</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getURLParam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>((<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'[?|&amp;]'</span> + name + <span class=\"string\">'='</span> + <span class=\"string\">'([^&amp;;]+?)(&amp;|#|;|$)'</span>, <span class=\"string\">\"ig\"</span>).exec(location.search) || [, <span class=\"string\">\"\"</span>])[<span class=\"number\">1</span>].replace(<span class=\"regexp\">/\\+/g</span>, <span class=\"string\">'%20'</span>)) || <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.config = &#123;</div><div class=\"line\">        appId: conf &amp;&amp; conf.appId || <span class=\"string\">''</span>,</div><div class=\"line\">        url: conf &amp;&amp; conf.url || <span class=\"string\">''</span>,   <span class=\"comment\">//接口地址</span></div><div class=\"line\">        data: &#123;    <span class=\"comment\">//接口的参数</span></div><div class=\"line\">            code: <span class=\"keyword\">this</span>.getURLParam(<span class=\"string\">'code'</span>),</div><div class=\"line\">            state: <span class=\"keyword\">this</span>.getURLParam(<span class=\"string\">'state'</span>),</div><div class=\"line\">            url: location.href.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>],   <span class=\"comment\">// zepto 自动编码对location.href进行encodeURIComponent编码</span></div><div class=\"line\">            method: <span class=\"number\">0</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        imgUrl: conf &amp;&amp; conf.imgUrl || <span class=\"string\">''</span>,</div><div class=\"line\">        title: conf &amp;&amp; conf.title || <span class=\"string\">''</span>,</div><div class=\"line\">        link: conf &amp;&amp; conf.link || <span class=\"string\">''</span>,</div><div class=\"line\">        desc: conf &amp;&amp; conf.desc || <span class=\"string\">''</span>,</div><div class=\"line\">        circleFunction: conf &amp;&amp; conf.circleFunction || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">        friendFunction: conf &amp;&amp; conf.friendFunction || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">        callback: conf &amp;&amp; conf.callback || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init();</div><div class=\"line\">&#125;</div><div class=\"line\">WxShare.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//获取用户信息</span></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: self.config.url,</div><div class=\"line\">        data: self.config.data,</div><div class=\"line\">        dataType: <span class=\"string\">'jsonp'</span>,</div><div class=\"line\">        jsonp: <span class=\"string\">'callback'</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;    <span class=\"comment\">// 成功获取到用户信息，然后配置sdk</span></div><div class=\"line\">            self.config.callback(d);   <span class=\"comment\">//处理用户信息</span></div><div class=\"line\">            wx.config(&#123;</div><div class=\"line\">                debug: <span class=\"literal\">false</span>,</div><div class=\"line\">                appId: self.config.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">                timestamp: d.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">                nonceStr: d.conststr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">                signature: d.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">                jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>]</div><div class=\"line\">            &#125;);</div><div class=\"line\">            wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                wx.onMenuShareTimeline(&#123;   <span class=\"comment\">//分享到朋友圈</span></div><div class=\"line\">                    title: self.config.title,</div><div class=\"line\">                    link: self.config.link,</div><div class=\"line\">                    imgUrl: self.config.imgUrl,</div><div class=\"line\">                    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        self.config.circleFunction();      <span class=\"comment\">// 确认分享</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        <span class=\"comment\">// 取消分享</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">                wx.onMenuShareAppMessage(&#123;   <span class=\"comment\">//分享给朋友</span></div><div class=\"line\">                    title: self.config.title,</div><div class=\"line\">                    link: self.config.link,</div><div class=\"line\">                    desc: self.config.desc,</div><div class=\"line\">                    imgUrl: self.config.imgUrl,</div><div class=\"line\">                    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        self.config.friendFunction();         <span class=\"comment\">// 确认分享</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        <span class=\"comment\">// 取消分享</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// alert('error');</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>因为我最常见的就是分享朋友圈和分享给朋友这两个需求，所以插件只是实现了这样个功能，官方文档中还有其他很多功能强大的接口，比如分享到微博，分享到qq等等，大家如果有需要，可以自行添加。</li>\n<li>另外，分享给朋友这个接口还有一些配置项因为不常用，也没有列出来，比如：文件类型type，文件链接dataUrl（如果类型为音乐或视频）。</li>\n</ul>\n<h1 id=\"使用文档\"><a href=\"#使用文档\" class=\"headerlink\" title=\"使用文档\"></a>使用文档</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> linkUrl = <span class=\"string\">'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx60d2d83ca82005ec&amp;redirect_uri='</span>+ location.href +<span class=\"string\">'&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> wxShare = <span class=\"keyword\">new</span> WxShare(&#123;</div><div class=\"line\">    appId: <span class=\"string\">'xxxxxxxxxxxxxxxxxx'</span>,</div><div class=\"line\">    url: url,</div><div class=\"line\">    imgUrl: <span class=\"string\">'http://pic24.nipic.com/20120831/10132780_100453579000_2.jpg'</span>,</div><div class=\"line\">    title: <span class=\"string\">'这是分享出去的标题'</span>,</div><div class=\"line\">    desc: <span class=\"string\">'这是发送给朋友的描述信息'</span>,</div><div class=\"line\">    link: linkUrl,</div><div class=\"line\">    circleFunction: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;   <span class=\"comment\">//处理获得的用户信息</span></div><div class=\"line\">        $(<span class=\"string\">'.page1 .logo'</span>).html(data.nickname);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>配置项：</p>\n<ul>\n<li>appId： 必填，公众号的唯一标识。</li>\n<li>url：后端接口地址（不需要配置接口参数，因为插件已经传入了需要的参数code、state、url、method）。</li>\n<li>imgUrl：分享出去的图片地址。</li>\n<li>title：分享出去的标题。</li>\n<li>link：分享出去的链接（注意：如果希望别人点击你分享的链接也需要授权，则需要微信客户端的链接格式。）</li>\n<li>desc：分享给朋友的的描述信息。</li>\n<li>circleFunction：分享到朋友圈成功的回调函数。</li>\n<li>friendFunction：分享给朋友成功的回调函数。</li>\n<li>callback：参数d(用户信息)，接口调用成功，处理用户信息的回调函数。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>因为平时用到的只有分享朋友圈和朋友这两个接口，所以这个插件也只是实现了这两个功能。并且标题，链接，图片地址都是公用的。以后如有需要，可以继续增加功能。</p>\n<hr>\n","excerpt":"<hr>\n<p>最近要慢慢开始做移动端的一些页面了，并且大多数都是活动页面，需要在微信里面分享、传播。</p>\n<p>如果只是单单传播一下页面，扩散一些信息还好，那就跟pc差不多，一刀一刀切页面就完了。。。但是我们在传播的时候往往需要分享出去，并且自定义传播信息的标题、链接或者图片，有时候一些小游戏还需要获取用户的信息等等，那么，就需要调用微信分享的接口了…<br>","more":"</p>\n<p>我跟着<a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\">微信官方文档</a>开发了两次，其实如果搞清楚了流程，本身步骤也还算简单。但是我发现每次要写很多重复的代码，并且因为时间间隔，每次开发的时候又要重新看看文档，才能回忆起该怎么调用＝＝，所以我写这个微信分享的小插件，就是为了自己以后再做这样的需求时，分分钟搞定。顺便在这里做一个简单的记录，如果文中有错，欢迎大家指出^_^。</p>\n<h1 id=\"使用条件\"><a href=\"#使用条件\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h1><p>首先解释一下，这里的使用条件，不是说插件的使用条件，而是调用微信分享接口的使用条件。</p>\n<p>不是每个人随便写个页面都能拿到微信里，互相传播，让用户授权，获取用户信息的。你需要拥有一个已经认证过的微信公众号，进入”公众号设置”的”功能设置”里填写”JS接口安全域名”，来绑定一个能访问的域名，另外还需要一个与公众号对应的唯一的appId，这个id能从公众号后台查看。</p>\n<h1 id=\"调用过程\"><a href=\"#调用过程\" class=\"headerlink\" title=\"调用过程\"></a>调用过程</h1><p>其实使用的过程在微信官方文档中已经说的非常清楚了，但是其中其实有很多的都是我们用不到的，所以我把分享页面的开发过程再简单的总结一遍:</p>\n<ul>\n<li>引入官方分享需要的js文件：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.0.0.js\" target=\"_blank\">http://res.wx.qq.com/open/js/jweixin-1.0.0.js</a></li>\n<li>调用后台接口，获取签名信息(服务端提供)。</li>\n<li><p>所有需要使用JS-SDK的页面必须先注入配置信息，如下配置之后(signature,nonceStr,timestamp就是上一步获取到的信息)，方能调用分享接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: <span class=\"literal\">true</span>,    <span class=\"comment\">//开启调试模式，会实时的提示信息</span></div><div class=\"line\">    appId: self.config.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: d.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: d.conststr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature: d.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果上一步的配置有错，则执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      alert(<span class=\"string\">'error'</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果配置成功，则执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在配置成功的回调函数里，即可调用分享的函数了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    wx.onMenuShareTimeline(&#123;   <span class=\"comment\">//分享到朋友圈</span></div><div class=\"line\">        title: ‘标题’,</div><div class=\"line\">        link: <span class=\"string\">'http://www.taobao.com'</span>,</div><div class=\"line\">        imgUrl: <span class=\"string\">'imgurl'</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            self.config.circleFunction();      <span class=\"comment\">// 分享成功的回调函数</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 取消分享</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    wx.onMenuShareAppMessage(&#123;   <span class=\"comment\">//分享给朋友</span></div><div class=\"line\">        title: self.config.title,</div><div class=\"line\">        link: self.config.link,</div><div class=\"line\">        desc: <span class=\"string\">'为什么这里没有起作用？？'</span>,</div><div class=\"line\">        imgUrl: self.config.imgUrl,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            self.config.friendFunction();         <span class=\"comment\">// 分享成功的回调函数</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 取消分享</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><code>值得一提的是，这里用到的函数，都需要在配置项的&#39;jsAplilist&#39;中添加进去。</code> jsApiList: [‘onMenuShareTimeline’, ‘onMenuShareAppMessage’]</p>\n</li>\n</ul>\n<h1 id=\"插件代码\"><a href=\"#插件代码\" class=\"headerlink\" title=\"插件代码\"></a>插件代码</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WxShare</span>(<span class=\"params\">conf</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getURLParam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>((<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'[?|&amp;]'</span> + name + <span class=\"string\">'='</span> + <span class=\"string\">'([^&amp;;]+?)(&amp;|#|;|$)'</span>, <span class=\"string\">\"ig\"</span>).exec(location.search) || [, <span class=\"string\">\"\"</span>])[<span class=\"number\">1</span>].replace(<span class=\"regexp\">/\\+/g</span>, <span class=\"string\">'%20'</span>)) || <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.config = &#123;</div><div class=\"line\">        appId: conf &amp;&amp; conf.appId || <span class=\"string\">''</span>,</div><div class=\"line\">        url: conf &amp;&amp; conf.url || <span class=\"string\">''</span>,   <span class=\"comment\">//接口地址</span></div><div class=\"line\">        data: &#123;    <span class=\"comment\">//接口的参数</span></div><div class=\"line\">            code: <span class=\"keyword\">this</span>.getURLParam(<span class=\"string\">'code'</span>),</div><div class=\"line\">            state: <span class=\"keyword\">this</span>.getURLParam(<span class=\"string\">'state'</span>),</div><div class=\"line\">            url: location.href.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>],   <span class=\"comment\">// zepto 自动编码对location.href进行encodeURIComponent编码</span></div><div class=\"line\">            method: <span class=\"number\">0</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        imgUrl: conf &amp;&amp; conf.imgUrl || <span class=\"string\">''</span>,</div><div class=\"line\">        title: conf &amp;&amp; conf.title || <span class=\"string\">''</span>,</div><div class=\"line\">        link: conf &amp;&amp; conf.link || <span class=\"string\">''</span>,</div><div class=\"line\">        desc: conf &amp;&amp; conf.desc || <span class=\"string\">''</span>,</div><div class=\"line\">        circleFunction: conf &amp;&amp; conf.circleFunction || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">        friendFunction: conf &amp;&amp; conf.friendFunction || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">        callback: conf &amp;&amp; conf.callback || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init();</div><div class=\"line\">&#125;</div><div class=\"line\">WxShare.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//获取用户信息</span></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: self.config.url,</div><div class=\"line\">        data: self.config.data,</div><div class=\"line\">        dataType: <span class=\"string\">'jsonp'</span>,</div><div class=\"line\">        jsonp: <span class=\"string\">'callback'</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;    <span class=\"comment\">// 成功获取到用户信息，然后配置sdk</span></div><div class=\"line\">            self.config.callback(d);   <span class=\"comment\">//处理用户信息</span></div><div class=\"line\">            wx.config(&#123;</div><div class=\"line\">                debug: <span class=\"literal\">false</span>,</div><div class=\"line\">                appId: self.config.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">                timestamp: d.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">                nonceStr: d.conststr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">                signature: d.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">                jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>]</div><div class=\"line\">            &#125;);</div><div class=\"line\">            wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                wx.onMenuShareTimeline(&#123;   <span class=\"comment\">//分享到朋友圈</span></div><div class=\"line\">                    title: self.config.title,</div><div class=\"line\">                    link: self.config.link,</div><div class=\"line\">                    imgUrl: self.config.imgUrl,</div><div class=\"line\">                    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        self.config.circleFunction();      <span class=\"comment\">// 确认分享</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        <span class=\"comment\">// 取消分享</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">                wx.onMenuShareAppMessage(&#123;   <span class=\"comment\">//分享给朋友</span></div><div class=\"line\">                    title: self.config.title,</div><div class=\"line\">                    link: self.config.link,</div><div class=\"line\">                    desc: self.config.desc,</div><div class=\"line\">                    imgUrl: self.config.imgUrl,</div><div class=\"line\">                    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        self.config.friendFunction();         <span class=\"comment\">// 确认分享</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    cancel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        <span class=\"comment\">// 取消分享</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// alert('error');</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>因为我最常见的就是分享朋友圈和分享给朋友这两个需求，所以插件只是实现了这样个功能，官方文档中还有其他很多功能强大的接口，比如分享到微博，分享到qq等等，大家如果有需要，可以自行添加。</li>\n<li>另外，分享给朋友这个接口还有一些配置项因为不常用，也没有列出来，比如：文件类型type，文件链接dataUrl（如果类型为音乐或视频）。</li>\n</ul>\n<h1 id=\"使用文档\"><a href=\"#使用文档\" class=\"headerlink\" title=\"使用文档\"></a>使用文档</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> linkUrl = <span class=\"string\">'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx60d2d83ca82005ec&amp;redirect_uri='</span>+ location.href +<span class=\"string\">'&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> wxShare = <span class=\"keyword\">new</span> WxShare(&#123;</div><div class=\"line\">    appId: <span class=\"string\">'xxxxxxxxxxxxxxxxxx'</span>,</div><div class=\"line\">    url: url,</div><div class=\"line\">    imgUrl: <span class=\"string\">'http://pic24.nipic.com/20120831/10132780_100453579000_2.jpg'</span>,</div><div class=\"line\">    title: <span class=\"string\">'这是分享出去的标题'</span>,</div><div class=\"line\">    desc: <span class=\"string\">'这是发送给朋友的描述信息'</span>,</div><div class=\"line\">    link: linkUrl,</div><div class=\"line\">    circleFunction: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;   <span class=\"comment\">//处理获得的用户信息</span></div><div class=\"line\">        $(<span class=\"string\">'.page1 .logo'</span>).html(data.nickname);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>配置项：</p>\n<ul>\n<li>appId： 必填，公众号的唯一标识。</li>\n<li>url：后端接口地址（不需要配置接口参数，因为插件已经传入了需要的参数code、state、url、method）。</li>\n<li>imgUrl：分享出去的图片地址。</li>\n<li>title：分享出去的标题。</li>\n<li>link：分享出去的链接（注意：如果希望别人点击你分享的链接也需要授权，则需要微信客户端的链接格式。）</li>\n<li>desc：分享给朋友的的描述信息。</li>\n<li>circleFunction：分享到朋友圈成功的回调函数。</li>\n<li>friendFunction：分享给朋友成功的回调函数。</li>\n<li>callback：参数d(用户信息)，接口调用成功，处理用户信息的回调函数。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>因为平时用到的只有分享朋友圈和朋友这两个接口，所以这个插件也只是实现了这两个功能。并且标题，链接，图片地址都是公用的。以后如有需要，可以继续增加功能。</p>\n<hr>"},{"title":"开发自己的yeoman脚手架（generator-reactpackage）","date":"2016-09-01T03:55:33.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n自从前后端开始分离之后，前端项目工程化也显得越来越重要了，之前写过一篇搭建基于`Angular+Requirejs+Grunt`的前端项目教程，有兴趣的可以[点这里去看](http://luckykun.com/work/2016-05-02/grunt-angular.html)\n\n但是有些项目可以使用这种方式，但有些却不太适合，或者我们就是想要去尝试新的框架。比如最近我就尝试着使用了`webpack+react+es6`的方式开发项目，感觉很不错，然后很多项目都用了这种方式。所以为了不需要每次开发的时候都从头开始新建文件，就想着能不能弄个工具，使用命令能够快速的生成这样一套跑的通的项目模版，正好，有个工具叫`yeoman`。\n\n<!--more-->\n\n本篇文章看点：\n1. 教你使用`yeoman`快速开发自己的脚手架。\n2. 介绍作者编写的`generator-reactpackage`脚手架模版，此项目的开发基于`webpack+react+es6`，项目功能包含：\n  - 启动本地服务，默认监听端口8888\n  - css文件能自动补全css3属性的前缀\n  - 包含路由功能(react-router)\n  - 使用命令`npm run dev`启动服务，修改保存文件的时候浏览器会自动刷新\n  - 如果不想要实时刷新的功能，将webpack.config.js文件的devServer配置改为inline: false\n  - 使用`npm run build`打包文件，js和css分开打包，并且默认会压缩文件\n\n# 开发脚手架\n## 环境准备\n安装或者更新一下你的node和npm\n\n```js\nnpm install -g n  //首先安装n模块\nn stable   //升级node.js到最新稳定版\nn 5.0.0   //或者指定版本升级\nnode -v   //检查更新是否成功\n```\n\n然后安装yeoman\n\n```js\nnpm install -g yo\n```\n\n## 创建目录\n新建一个名为`generator-xxx`（yeoman脚手架命名规范）的文件夹，我这里叫`generator-reactpackage`。然后在目录下执行`npm init`创建package.json文件。修改为：\n\n```js\n{\n  \"name\": \"generator-reactpackage\",\n  \"version\": \"0.0.4\",\n  \"description\": \"基于ract+webpack的项目目录快速生成器\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/luckykun/generator-reactpackage.git\"\n  },\n  \"keywords\": [\n    \"yeoman-generator\"\n  ],\n  \"author\": \"luckykun\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/luckykun/generator-reactpackage/issues\"\n  },\n  \"homepage\": \"https://github.com/luckykun/generator-reactpackage\",\n  \"dependencies\": {\n    \"chai\": \"^3.3.0\",\n    \"chalk\": \"^1.1.1\",\n    \"fs-extra\": \"^0.24.0\",\n    \"mocha\": \"^2.3.3\",\n    \"yeoman-generator\": \"^0.24.1\",\n    \"yosay\": \"^1.0.5\"\n  }\n}\n```\n\n注意：package.json的信息一定要尽可能完整，不然可能上传不到[generator-lists](http://yeoman.io/generators/)\n\n然后在此目录下新建`generators->app->index.js`，`generators-app-templates`，如下图所示：\n\n![](https://img.alicdn.com/tps/TB1_c8XNXXXXXcnaXXXXXXXXXXX-245-625.png)\n- `generator-reactpackage`是整个npm包的项目文件夹。\n- `templates目录`里面就是我们最后要用到的项目模版文件，里面的内容是一个完整的前端项目，可以自定义。\n- `index.js`是开发脚手架的主要逻辑文件。\n\n## 开始开发\n然后编辑index.js文件：\n\n```js\nvar path = require('path');\nvar chalk = require('chalk');    //不同颜色的info\nvar util = require('util');\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');    //yeoman弹出框\nvar path = require('path');\nvar Reactpackage = yeoman.Base.extend({\n    info: function() {\n        this.log(chalk.green(\n            'I am going to build your app!'\n        ));\n    },\n    generateBasic: function() {  //按照自己的templates目录自定义\n        this.directory('src', 'src');    //拷贝目录\n        this.directory('data', 'data');\n        this.copy('package.json', 'package.json');   //拷贝文件\n        this.copy('index.html', 'index.html');\n        this.copy('README.md', 'README.md');\n        this.copy('webpack.config.js', 'webpack.config.js');\n    },\n    generateClient: function() {\n        this.sourceRoot(path.join(__dirname, 'templates'));\n        this.destinationPath('./');\n    },\n    install: function() {      //安装依赖\n        this.installDependencies({\n            skipInstall: this.options['skip-install']\n        });\n    },\n    end: function() {\n        this.log(yosay(\n            'Your app has been created successfully!'\n        ));\n    }\n});\nmodule.exports = Reactpackage;\n```\n\n上面这个文件就是主要逻辑部分了。至于具体的语法，可以参考这篇文章。[快速搭建基于yeoman快速编写脚手架工具](http://www.07net01.com/2016/01/1179066.html)\n\n## 上传\n开发完成之后，我们就可以将`generator-reactpackage`这个项目上传到npm官网。步骤如下：\n\n```js\nnpm adduser  //如果没有账号，用此命令注册\nnpm login   //如果有账号，用此命令登陆\nnpm publish --access=public     //上传到npm官网\n```\n\n上传成功后会提示：\n\n```js\n+ generator-reactpackage@0.0.4\n```\n\n然后你可以访问[http://yeoman.io/generators/](http://yeoman.io/generators/)这里去搜索一下自己的包，有没有上传成功，比如搜索`reactpackage`就会出现我上传的脚手架。如下图：\n\n![](https://img.alicdn.com/tps/TB1OtpiNXXXXXaKXVXXXXXXXXXX-1136-337.png)\n\n注意：\n- 上传到npm官网之前需要先将脚手架项目上传到github\n- 脚手架项目的package.json文件一定要尽可能详细，比如git主页，readme文件链接等等\n\n如果你能搜到自己上传的脚手架了，OK，开发基于yeoman的脚手架工具就到这里结束了，你可以随时随地使用自己的脚手架快速生成项目模板了。有兴趣的同学可以去看看我编写的[generator-reactpackage](https://github.com/luckykun/generator-reactpackage)源码，喜欢的同学顺便来个star～～哈哈，感谢～\n\n# 使用脚手架（generator-reactpackage）\n首先确保自己安装了nodejs，然后全局安装yeoman\n\n```js\nnpm install -g yo\n```\n\n然后直接安装脚手架\n\n```js\nnpm install -g generator-reactpackage\n```\n\n在合适的地方新建一个文件夹，在文件夹下运行：\n\n```js\nyo reactpackage\n```\n\n然后就会在此目录下生成以下目录结构：\n\n```\n├── data\n│   └── test.json\n├── src\n│   ├── components\n│   │   └── App.js\n│   ├── images\n│   │   └── yeoman.png\n│   ├── styles\n│   │   └── app.scss\n│   ├── vendor\n│   │   └── jquery.js\n│   ├── views\n│   │   └── home.html\n├── node_modules\n├── index.html\n├── package.json\n└── webpack.config.js\n```\n\n细心的同学可能已经发现，其实这里生成的内容就是我们脚手架中定义的`templates目录`下的内容。\n\n然后使用以下命令：\n\n```js\nnpm run dev    //项目开发过程使用，启动服务，实时刷新\nnpm run build    //开发完成之后打包文件（js、css分开打包）\n```\n\n注意：\n- 本项目默认监听端口是8888，所以在浏览器输入 [http://localhost:8888](http://localhost:8888) 就能看到效果了\n- 如果执行上述命令提示错误：`Error: getaddrinfo ENOTFOUND localhost`，在host文件里面添加`127.0.0.1 localhost`即可\n- 监听端口和实时刷新的功能都能在`webpack.config.js`文件中修改配置\n- 如果项目运行正常，会看到如下效果：\n\n  ![](https://img.alicdn.com/tps/TB1VKFhNXXXXXXCaXXXXXXXXXXX-884-217.png)\n\n# 结语\n可以看到，定义一个自己常用的脚手架骑士挺简单的，还有更多的功能有待探索。`generator-reactpackage`是一个基于webpack+react+es6开发的项目模版，有需要用到这个模版的同学就赶快安装用起来吧。\n\n另外，它的源码已经上传到github上，喜欢[generator-reactpackage](https://github.com/luckykun/generator-reactpackage)的同学顺便给个star，多谢～～～\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/yeoman-reactpackage.md","raw":"---\ntitle: 开发自己的yeoman脚手架（generator-reactpackage）\ndate: 2016-09-01T11:55:33.000Z\ncategories: 工作\ntags:\n  - yeoman\n  - react\n  - webpack\n  - 构建\n  - 教程\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n自从前后端开始分离之后，前端项目工程化也显得越来越重要了，之前写过一篇搭建基于`Angular+Requirejs+Grunt`的前端项目教程，有兴趣的可以[点这里去看](http://luckykun.com/work/2016-05-02/grunt-angular.html)\n\n但是有些项目可以使用这种方式，但有些却不太适合，或者我们就是想要去尝试新的框架。比如最近我就尝试着使用了`webpack+react+es6`的方式开发项目，感觉很不错，然后很多项目都用了这种方式。所以为了不需要每次开发的时候都从头开始新建文件，就想着能不能弄个工具，使用命令能够快速的生成这样一套跑的通的项目模版，正好，有个工具叫`yeoman`。\n\n<!--more-->\n\n本篇文章看点：\n1. 教你使用`yeoman`快速开发自己的脚手架。\n2. 介绍作者编写的`generator-reactpackage`脚手架模版，此项目的开发基于`webpack+react+es6`，项目功能包含：\n  - 启动本地服务，默认监听端口8888\n  - css文件能自动补全css3属性的前缀\n  - 包含路由功能(react-router)\n  - 使用命令`npm run dev`启动服务，修改保存文件的时候浏览器会自动刷新\n  - 如果不想要实时刷新的功能，将webpack.config.js文件的devServer配置改为inline: false\n  - 使用`npm run build`打包文件，js和css分开打包，并且默认会压缩文件\n\n# 开发脚手架\n## 环境准备\n安装或者更新一下你的node和npm\n\n```js\nnpm install -g n  //首先安装n模块\nn stable   //升级node.js到最新稳定版\nn 5.0.0   //或者指定版本升级\nnode -v   //检查更新是否成功\n```\n\n然后安装yeoman\n\n```js\nnpm install -g yo\n```\n\n## 创建目录\n新建一个名为`generator-xxx`（yeoman脚手架命名规范）的文件夹，我这里叫`generator-reactpackage`。然后在目录下执行`npm init`创建package.json文件。修改为：\n\n```js\n{\n  \"name\": \"generator-reactpackage\",\n  \"version\": \"0.0.4\",\n  \"description\": \"基于ract+webpack的项目目录快速生成器\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/luckykun/generator-reactpackage.git\"\n  },\n  \"keywords\": [\n    \"yeoman-generator\"\n  ],\n  \"author\": \"luckykun\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/luckykun/generator-reactpackage/issues\"\n  },\n  \"homepage\": \"https://github.com/luckykun/generator-reactpackage\",\n  \"dependencies\": {\n    \"chai\": \"^3.3.0\",\n    \"chalk\": \"^1.1.1\",\n    \"fs-extra\": \"^0.24.0\",\n    \"mocha\": \"^2.3.3\",\n    \"yeoman-generator\": \"^0.24.1\",\n    \"yosay\": \"^1.0.5\"\n  }\n}\n```\n\n注意：package.json的信息一定要尽可能完整，不然可能上传不到[generator-lists](http://yeoman.io/generators/)\n\n然后在此目录下新建`generators->app->index.js`，`generators-app-templates`，如下图所示：\n\n![](https://img.alicdn.com/tps/TB1_c8XNXXXXXcnaXXXXXXXXXXX-245-625.png)\n- `generator-reactpackage`是整个npm包的项目文件夹。\n- `templates目录`里面就是我们最后要用到的项目模版文件，里面的内容是一个完整的前端项目，可以自定义。\n- `index.js`是开发脚手架的主要逻辑文件。\n\n## 开始开发\n然后编辑index.js文件：\n\n```js\nvar path = require('path');\nvar chalk = require('chalk');    //不同颜色的info\nvar util = require('util');\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');    //yeoman弹出框\nvar path = require('path');\nvar Reactpackage = yeoman.Base.extend({\n    info: function() {\n        this.log(chalk.green(\n            'I am going to build your app!'\n        ));\n    },\n    generateBasic: function() {  //按照自己的templates目录自定义\n        this.directory('src', 'src');    //拷贝目录\n        this.directory('data', 'data');\n        this.copy('package.json', 'package.json');   //拷贝文件\n        this.copy('index.html', 'index.html');\n        this.copy('README.md', 'README.md');\n        this.copy('webpack.config.js', 'webpack.config.js');\n    },\n    generateClient: function() {\n        this.sourceRoot(path.join(__dirname, 'templates'));\n        this.destinationPath('./');\n    },\n    install: function() {      //安装依赖\n        this.installDependencies({\n            skipInstall: this.options['skip-install']\n        });\n    },\n    end: function() {\n        this.log(yosay(\n            'Your app has been created successfully!'\n        ));\n    }\n});\nmodule.exports = Reactpackage;\n```\n\n上面这个文件就是主要逻辑部分了。至于具体的语法，可以参考这篇文章。[快速搭建基于yeoman快速编写脚手架工具](http://www.07net01.com/2016/01/1179066.html)\n\n## 上传\n开发完成之后，我们就可以将`generator-reactpackage`这个项目上传到npm官网。步骤如下：\n\n```js\nnpm adduser  //如果没有账号，用此命令注册\nnpm login   //如果有账号，用此命令登陆\nnpm publish --access=public     //上传到npm官网\n```\n\n上传成功后会提示：\n\n```js\n+ generator-reactpackage@0.0.4\n```\n\n然后你可以访问[http://yeoman.io/generators/](http://yeoman.io/generators/)这里去搜索一下自己的包，有没有上传成功，比如搜索`reactpackage`就会出现我上传的脚手架。如下图：\n\n![](https://img.alicdn.com/tps/TB1OtpiNXXXXXaKXVXXXXXXXXXX-1136-337.png)\n\n注意：\n- 上传到npm官网之前需要先将脚手架项目上传到github\n- 脚手架项目的package.json文件一定要尽可能详细，比如git主页，readme文件链接等等\n\n如果你能搜到自己上传的脚手架了，OK，开发基于yeoman的脚手架工具就到这里结束了，你可以随时随地使用自己的脚手架快速生成项目模板了。有兴趣的同学可以去看看我编写的[generator-reactpackage](https://github.com/luckykun/generator-reactpackage)源码，喜欢的同学顺便来个star～～哈哈，感谢～\n\n# 使用脚手架（generator-reactpackage）\n首先确保自己安装了nodejs，然后全局安装yeoman\n\n```js\nnpm install -g yo\n```\n\n然后直接安装脚手架\n\n```js\nnpm install -g generator-reactpackage\n```\n\n在合适的地方新建一个文件夹，在文件夹下运行：\n\n```js\nyo reactpackage\n```\n\n然后就会在此目录下生成以下目录结构：\n\n```\n├── data\n│   └── test.json\n├── src\n│   ├── components\n│   │   └── App.js\n│   ├── images\n│   │   └── yeoman.png\n│   ├── styles\n│   │   └── app.scss\n│   ├── vendor\n│   │   └── jquery.js\n│   ├── views\n│   │   └── home.html\n├── node_modules\n├── index.html\n├── package.json\n└── webpack.config.js\n```\n\n细心的同学可能已经发现，其实这里生成的内容就是我们脚手架中定义的`templates目录`下的内容。\n\n然后使用以下命令：\n\n```js\nnpm run dev    //项目开发过程使用，启动服务，实时刷新\nnpm run build    //开发完成之后打包文件（js、css分开打包）\n```\n\n注意：\n- 本项目默认监听端口是8888，所以在浏览器输入 [http://localhost:8888](http://localhost:8888) 就能看到效果了\n- 如果执行上述命令提示错误：`Error: getaddrinfo ENOTFOUND localhost`，在host文件里面添加`127.0.0.1 localhost`即可\n- 监听端口和实时刷新的功能都能在`webpack.config.js`文件中修改配置\n- 如果项目运行正常，会看到如下效果：\n\n  ![](https://img.alicdn.com/tps/TB1VKFhNXXXXXXCaXXXXXXXXXXX-884-217.png)\n\n# 结语\n可以看到，定义一个自己常用的脚手架骑士挺简单的，还有更多的功能有待探索。`generator-reactpackage`是一个基于webpack+react+es6开发的项目模版，有需要用到这个模版的同学就赶快安装用起来吧。\n\n另外，它的源码已经上传到github上，喜欢[generator-reactpackage](https://github.com/luckykun/generator-reactpackage)的同学顺便给个star，多谢～～～\n\n\n--------------------------------------------------------------------------------\n","slug":"yeoman-reactpackage","published":1,"updated":"2016-10-12T15:08:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdb9000lu13gv5nijrss","content":"<hr>\n<p>自从前后端开始分离之后，前端项目工程化也显得越来越重要了，之前写过一篇搭建基于<code>Angular+Requirejs+Grunt</code>的前端项目教程，有兴趣的可以<a href=\"http://luckykun.com/work/2016-05-02/grunt-angular.html\" target=\"_blank\" rel=\"external\">点这里去看</a></p>\n<p>但是有些项目可以使用这种方式，但有些却不太适合，或者我们就是想要去尝试新的框架。比如最近我就尝试着使用了<code>webpack+react+es6</code>的方式开发项目，感觉很不错，然后很多项目都用了这种方式。所以为了不需要每次开发的时候都从头开始新建文件，就想着能不能弄个工具，使用命令能够快速的生成这样一套跑的通的项目模版，正好，有个工具叫<code>yeoman</code>。</p>\n<a id=\"more\"></a>\n<p>本篇文章看点：</p>\n<ol>\n<li>教你使用<code>yeoman</code>快速开发自己的脚手架。</li>\n<li>介绍作者编写的<code>generator-reactpackage</code>脚手架模版，此项目的开发基于<code>webpack+react+es6</code>，项目功能包含：<ul>\n<li>启动本地服务，默认监听端口8888</li>\n<li>css文件能自动补全css3属性的前缀</li>\n<li>包含路由功能(react-router)</li>\n<li>使用命令<code>npm run dev</code>启动服务，修改保存文件的时候浏览器会自动刷新</li>\n<li>如果不想要实时刷新的功能，将webpack.config.js文件的devServer配置改为inline: false</li>\n<li>使用<code>npm run build</code>打包文件，js和css分开打包，并且默认会压缩文件</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"开发脚手架\"><a href=\"#开发脚手架\" class=\"headerlink\" title=\"开发脚手架\"></a>开发脚手架</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>安装或者更新一下你的node和npm</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g n  <span class=\"comment\">//首先安装n模块</span></div><div class=\"line\">n stable   <span class=\"comment\">//升级node.js到最新稳定版</span></div><div class=\"line\">n <span class=\"number\">5.0</span><span class=\"number\">.0</span>   <span class=\"comment\">//或者指定版本升级</span></div><div class=\"line\">node -v   <span class=\"comment\">//检查更新是否成功</span></div></pre></td></tr></table></figure>\n<p>然后安装yeoman</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g yo</div></pre></td></tr></table></figure>\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><p>新建一个名为<code>generator-xxx</code>（yeoman脚手架命名规范）的文件夹，我这里叫<code>generator-reactpackage</code>。然后在目录下执行<code>npm init</code>创建package.json文件。修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"generator-reactpackage\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.4\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"基于ract+webpack的项目目录快速生成器\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://github.com/luckykun/generator-reactpackage.git\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"keywords\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"yeoman-generator\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"luckykun\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">  <span class=\"string\">\"bugs\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://github.com/luckykun/generator-reactpackage/issues\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"homepage\"</span>: <span class=\"string\">\"https://github.com/luckykun/generator-reactpackage\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"chai\"</span>: <span class=\"string\">\"^3.3.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"chalk\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"fs-extra\"</span>: <span class=\"string\">\"^0.24.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"string\">\"^2.3.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"yeoman-generator\"</span>: <span class=\"string\">\"^0.24.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"yosay\"</span>: <span class=\"string\">\"^1.0.5\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：package.json的信息一定要尽可能完整，不然可能上传不到<a href=\"http://yeoman.io/generators/\" target=\"_blank\" rel=\"external\">generator-lists</a></p>\n<p>然后在此目录下新建<code>generators-&gt;app-&gt;index.js</code>，<code>generators-app-templates</code>，如下图所示：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1_c8XNXXXXXcnaXXXXXXXXXXX-245-625.png\" alt=\"\"></p>\n<ul>\n<li><code>generator-reactpackage</code>是整个npm包的项目文件夹。</li>\n<li><code>templates目录</code>里面就是我们最后要用到的项目模版文件，里面的内容是一个完整的前端项目，可以自定义。</li>\n<li><code>index.js</code>是开发脚手架的主要逻辑文件。</li>\n</ul>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><p>然后编辑index.js文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>);    <span class=\"comment\">//不同颜色的info</span></div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> yeoman = <span class=\"built_in\">require</span>(<span class=\"string\">'yeoman-generator'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> yosay = <span class=\"built_in\">require</span>(<span class=\"string\">'yosay'</span>);    <span class=\"comment\">//yeoman弹出框</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Reactpackage = yeoman.Base.extend(&#123;</div><div class=\"line\">    info: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log(chalk.green(</div><div class=\"line\">            <span class=\"string\">'I am going to build your app!'</span></div><div class=\"line\">        ));</div><div class=\"line\">    &#125;,</div><div class=\"line\">    generateBasic: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//按照自己的templates目录自定义</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.directory(<span class=\"string\">'src'</span>, <span class=\"string\">'src'</span>);    <span class=\"comment\">//拷贝目录</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.directory(<span class=\"string\">'data'</span>, <span class=\"string\">'data'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'package.json'</span>, <span class=\"string\">'package.json'</span>);   <span class=\"comment\">//拷贝文件</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'index.html'</span>, <span class=\"string\">'index.html'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'README.md'</span>, <span class=\"string\">'README.md'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'webpack.config.js'</span>, <span class=\"string\">'webpack.config.js'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    generateClient: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sourceRoot(path.join(__dirname, <span class=\"string\">'templates'</span>));</div><div class=\"line\">        <span class=\"keyword\">this</span>.destinationPath(<span class=\"string\">'./'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    install: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;      <span class=\"comment\">//安装依赖</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.installDependencies(&#123;</div><div class=\"line\">            skipInstall: <span class=\"keyword\">this</span>.options[<span class=\"string\">'skip-install'</span>]</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    end: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log(yosay(</div><div class=\"line\">            <span class=\"string\">'Your app has been created successfully!'</span></div><div class=\"line\">        ));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Reactpackage;</div></pre></td></tr></table></figure>\n<p>上面这个文件就是主要逻辑部分了。至于具体的语法，可以参考这篇文章。<a href=\"http://www.07net01.com/2016/01/1179066.html\" target=\"_blank\" rel=\"external\">快速搭建基于yeoman快速编写脚手架工具</a></p>\n<h2 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h2><p>开发完成之后，我们就可以将<code>generator-reactpackage</code>这个项目上传到npm官网。步骤如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm adduser  <span class=\"comment\">//如果没有账号，用此命令注册</span></div><div class=\"line\">npm login   <span class=\"comment\">//如果有账号，用此命令登陆</span></div><div class=\"line\">npm publish --access=public     <span class=\"comment\">//上传到npm官网</span></div></pre></td></tr></table></figure>\n<p>上传成功后会提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">+ generator-reactpackage@<span class=\"number\">0.0</span><span class=\"number\">.4</span></div></pre></td></tr></table></figure>\n<p>然后你可以访问<a href=\"http://yeoman.io/generators/\" target=\"_blank\" rel=\"external\">http://yeoman.io/generators/</a>这里去搜索一下自己的包，有没有上传成功，比如搜索<code>reactpackage</code>就会出现我上传的脚手架。如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1OtpiNXXXXXaKXVXXXXXXXXXX-1136-337.png\" alt=\"\"></p>\n<p>注意：</p>\n<ul>\n<li>上传到npm官网之前需要先将脚手架项目上传到github</li>\n<li>脚手架项目的package.json文件一定要尽可能详细，比如git主页，readme文件链接等等</li>\n</ul>\n<p>如果你能搜到自己上传的脚手架了，OK，开发基于yeoman的脚手架工具就到这里结束了，你可以随时随地使用自己的脚手架快速生成项目模板了。有兴趣的同学可以去看看我编写的<a href=\"https://github.com/luckykun/generator-reactpackage\" target=\"_blank\" rel=\"external\">generator-reactpackage</a>源码，喜欢的同学顺便来个star～～哈哈，感谢～</p>\n<h1 id=\"使用脚手架（generator-reactpackage）\"><a href=\"#使用脚手架（generator-reactpackage）\" class=\"headerlink\" title=\"使用脚手架（generator-reactpackage）\"></a>使用脚手架（generator-reactpackage）</h1><p>首先确保自己安装了nodejs，然后全局安装yeoman</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g yo</div></pre></td></tr></table></figure>\n<p>然后直接安装脚手架</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g generator-reactpackage</div></pre></td></tr></table></figure>\n<p>在合适的地方新建一个文件夹，在文件夹下运行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">yo reactpackage</div></pre></td></tr></table></figure>\n<p>然后就会在此目录下生成以下目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── data</div><div class=\"line\">│   └── test.json</div><div class=\"line\">├── src</div><div class=\"line\">│   ├── components</div><div class=\"line\">│   │   └── App.js</div><div class=\"line\">│   ├── images</div><div class=\"line\">│   │   └── yeoman.png</div><div class=\"line\">│   ├── styles</div><div class=\"line\">│   │   └── app.scss</div><div class=\"line\">│   ├── vendor</div><div class=\"line\">│   │   └── jquery.js</div><div class=\"line\">│   ├── views</div><div class=\"line\">│   │   └── home.html</div><div class=\"line\">├── node_modules</div><div class=\"line\">├── index.html</div><div class=\"line\">├── package.json</div><div class=\"line\">└── webpack.config.js</div></pre></td></tr></table></figure>\n<p>细心的同学可能已经发现，其实这里生成的内容就是我们脚手架中定义的<code>templates目录</code>下的内容。</p>\n<p>然后使用以下命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm run dev    <span class=\"comment\">//项目开发过程使用，启动服务，实时刷新</span></div><div class=\"line\">npm run build    <span class=\"comment\">//开发完成之后打包文件（js、css分开打包）</span></div></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>本项目默认监听端口是8888，所以在浏览器输入 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"external\">http://localhost:8888</a> 就能看到效果了</li>\n<li>如果执行上述命令提示错误：<code>Error: getaddrinfo ENOTFOUND localhost</code>，在host文件里面添加<code>127.0.0.1 localhost</code>即可</li>\n<li>监听端口和实时刷新的功能都能在<code>webpack.config.js</code>文件中修改配置</li>\n<li><p>如果项目运行正常，会看到如下效果：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1VKFhNXXXXXXCaXXXXXXXXXXX-884-217.png\" alt=\"\"></p>\n</li>\n</ul>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可以看到，定义一个自己常用的脚手架骑士挺简单的，还有更多的功能有待探索。<code>generator-reactpackage</code>是一个基于webpack+react+es6开发的项目模版，有需要用到这个模版的同学就赶快安装用起来吧。</p>\n<p>另外，它的源码已经上传到github上，喜欢<a href=\"https://github.com/luckykun/generator-reactpackage\" target=\"_blank\" rel=\"external\">generator-reactpackage</a>的同学顺便给个star，多谢～～～</p>\n<hr>\n","excerpt":"<hr>\n<p>自从前后端开始分离之后，前端项目工程化也显得越来越重要了，之前写过一篇搭建基于<code>Angular+Requirejs+Grunt</code>的前端项目教程，有兴趣的可以<a href=\"http://luckykun.com/work/2016-05-02/grunt-angular.html\">点这里去看</a></p>\n<p>但是有些项目可以使用这种方式，但有些却不太适合，或者我们就是想要去尝试新的框架。比如最近我就尝试着使用了<code>webpack+react+es6</code>的方式开发项目，感觉很不错，然后很多项目都用了这种方式。所以为了不需要每次开发的时候都从头开始新建文件，就想着能不能弄个工具，使用命令能够快速的生成这样一套跑的通的项目模版，正好，有个工具叫<code>yeoman</code>。</p>","more":"<p>本篇文章看点：</p>\n<ol>\n<li>教你使用<code>yeoman</code>快速开发自己的脚手架。</li>\n<li>介绍作者编写的<code>generator-reactpackage</code>脚手架模版，此项目的开发基于<code>webpack+react+es6</code>，项目功能包含：<ul>\n<li>启动本地服务，默认监听端口8888</li>\n<li>css文件能自动补全css3属性的前缀</li>\n<li>包含路由功能(react-router)</li>\n<li>使用命令<code>npm run dev</code>启动服务，修改保存文件的时候浏览器会自动刷新</li>\n<li>如果不想要实时刷新的功能，将webpack.config.js文件的devServer配置改为inline: false</li>\n<li>使用<code>npm run build</code>打包文件，js和css分开打包，并且默认会压缩文件</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"开发脚手架\"><a href=\"#开发脚手架\" class=\"headerlink\" title=\"开发脚手架\"></a>开发脚手架</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>安装或者更新一下你的node和npm</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g n  <span class=\"comment\">//首先安装n模块</span></div><div class=\"line\">n stable   <span class=\"comment\">//升级node.js到最新稳定版</span></div><div class=\"line\">n <span class=\"number\">5.0</span><span class=\"number\">.0</span>   <span class=\"comment\">//或者指定版本升级</span></div><div class=\"line\">node -v   <span class=\"comment\">//检查更新是否成功</span></div></pre></td></tr></table></figure>\n<p>然后安装yeoman</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g yo</div></pre></td></tr></table></figure>\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><p>新建一个名为<code>generator-xxx</code>（yeoman脚手架命名规范）的文件夹，我这里叫<code>generator-reactpackage</code>。然后在目录下执行<code>npm init</code>创建package.json文件。修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"generator-reactpackage\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.4\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"基于ract+webpack的项目目录快速生成器\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://github.com/luckykun/generator-reactpackage.git\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"keywords\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"yeoman-generator\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"luckykun\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">  <span class=\"string\">\"bugs\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://github.com/luckykun/generator-reactpackage/issues\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"homepage\"</span>: <span class=\"string\">\"https://github.com/luckykun/generator-reactpackage\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"chai\"</span>: <span class=\"string\">\"^3.3.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"chalk\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"fs-extra\"</span>: <span class=\"string\">\"^0.24.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"string\">\"^2.3.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"yeoman-generator\"</span>: <span class=\"string\">\"^0.24.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"yosay\"</span>: <span class=\"string\">\"^1.0.5\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：package.json的信息一定要尽可能完整，不然可能上传不到<a href=\"http://yeoman.io/generators/\">generator-lists</a></p>\n<p>然后在此目录下新建<code>generators-&gt;app-&gt;index.js</code>，<code>generators-app-templates</code>，如下图所示：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1_c8XNXXXXXcnaXXXXXXXXXXX-245-625.png\" alt=\"\"></p>\n<ul>\n<li><code>generator-reactpackage</code>是整个npm包的项目文件夹。</li>\n<li><code>templates目录</code>里面就是我们最后要用到的项目模版文件，里面的内容是一个完整的前端项目，可以自定义。</li>\n<li><code>index.js</code>是开发脚手架的主要逻辑文件。</li>\n</ul>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><p>然后编辑index.js文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>);    <span class=\"comment\">//不同颜色的info</span></div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> yeoman = <span class=\"built_in\">require</span>(<span class=\"string\">'yeoman-generator'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> yosay = <span class=\"built_in\">require</span>(<span class=\"string\">'yosay'</span>);    <span class=\"comment\">//yeoman弹出框</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Reactpackage = yeoman.Base.extend(&#123;</div><div class=\"line\">    info: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log(chalk.green(</div><div class=\"line\">            <span class=\"string\">'I am going to build your app!'</span></div><div class=\"line\">        ));</div><div class=\"line\">    &#125;,</div><div class=\"line\">    generateBasic: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//按照自己的templates目录自定义</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.directory(<span class=\"string\">'src'</span>, <span class=\"string\">'src'</span>);    <span class=\"comment\">//拷贝目录</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.directory(<span class=\"string\">'data'</span>, <span class=\"string\">'data'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'package.json'</span>, <span class=\"string\">'package.json'</span>);   <span class=\"comment\">//拷贝文件</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'index.html'</span>, <span class=\"string\">'index.html'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'README.md'</span>, <span class=\"string\">'README.md'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.copy(<span class=\"string\">'webpack.config.js'</span>, <span class=\"string\">'webpack.config.js'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    generateClient: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sourceRoot(path.join(__dirname, <span class=\"string\">'templates'</span>));</div><div class=\"line\">        <span class=\"keyword\">this</span>.destinationPath(<span class=\"string\">'./'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    install: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;      <span class=\"comment\">//安装依赖</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.installDependencies(&#123;</div><div class=\"line\">            skipInstall: <span class=\"keyword\">this</span>.options[<span class=\"string\">'skip-install'</span>]</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    end: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log(yosay(</div><div class=\"line\">            <span class=\"string\">'Your app has been created successfully!'</span></div><div class=\"line\">        ));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Reactpackage;</div></pre></td></tr></table></figure>\n<p>上面这个文件就是主要逻辑部分了。至于具体的语法，可以参考这篇文章。<a href=\"http://www.07net01.com/2016/01/1179066.html\">快速搭建基于yeoman快速编写脚手架工具</a></p>\n<h2 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h2><p>开发完成之后，我们就可以将<code>generator-reactpackage</code>这个项目上传到npm官网。步骤如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm adduser  <span class=\"comment\">//如果没有账号，用此命令注册</span></div><div class=\"line\">npm login   <span class=\"comment\">//如果有账号，用此命令登陆</span></div><div class=\"line\">npm publish --access=public     <span class=\"comment\">//上传到npm官网</span></div></pre></td></tr></table></figure>\n<p>上传成功后会提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">+ generator-reactpackage@<span class=\"number\">0.0</span><span class=\"number\">.4</span></div></pre></td></tr></table></figure>\n<p>然后你可以访问<a href=\"http://yeoman.io/generators/\">http://yeoman.io/generators/</a>这里去搜索一下自己的包，有没有上传成功，比如搜索<code>reactpackage</code>就会出现我上传的脚手架。如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1OtpiNXXXXXaKXVXXXXXXXXXX-1136-337.png\" alt=\"\"></p>\n<p>注意：</p>\n<ul>\n<li>上传到npm官网之前需要先将脚手架项目上传到github</li>\n<li>脚手架项目的package.json文件一定要尽可能详细，比如git主页，readme文件链接等等</li>\n</ul>\n<p>如果你能搜到自己上传的脚手架了，OK，开发基于yeoman的脚手架工具就到这里结束了，你可以随时随地使用自己的脚手架快速生成项目模板了。有兴趣的同学可以去看看我编写的<a href=\"https://github.com/luckykun/generator-reactpackage\">generator-reactpackage</a>源码，喜欢的同学顺便来个star～～哈哈，感谢～</p>\n<h1 id=\"使用脚手架（generator-reactpackage）\"><a href=\"#使用脚手架（generator-reactpackage）\" class=\"headerlink\" title=\"使用脚手架（generator-reactpackage）\"></a>使用脚手架（generator-reactpackage）</h1><p>首先确保自己安装了nodejs，然后全局安装yeoman</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g yo</div></pre></td></tr></table></figure>\n<p>然后直接安装脚手架</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g generator-reactpackage</div></pre></td></tr></table></figure>\n<p>在合适的地方新建一个文件夹，在文件夹下运行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">yo reactpackage</div></pre></td></tr></table></figure>\n<p>然后就会在此目录下生成以下目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">├── data</div><div class=\"line\">│   └── test.json</div><div class=\"line\">├── src</div><div class=\"line\">│   ├── components</div><div class=\"line\">│   │   └── App.js</div><div class=\"line\">│   ├── images</div><div class=\"line\">│   │   └── yeoman.png</div><div class=\"line\">│   ├── styles</div><div class=\"line\">│   │   └── app.scss</div><div class=\"line\">│   ├── vendor</div><div class=\"line\">│   │   └── jquery.js</div><div class=\"line\">│   ├── views</div><div class=\"line\">│   │   └── home.html</div><div class=\"line\">├── node_modules</div><div class=\"line\">├── index.html</div><div class=\"line\">├── package.json</div><div class=\"line\">└── webpack.config.js</div></pre></td></tr></table></figure>\n<p>细心的同学可能已经发现，其实这里生成的内容就是我们脚手架中定义的<code>templates目录</code>下的内容。</p>\n<p>然后使用以下命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm run dev    <span class=\"comment\">//项目开发过程使用，启动服务，实时刷新</span></div><div class=\"line\">npm run build    <span class=\"comment\">//开发完成之后打包文件（js、css分开打包）</span></div></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>本项目默认监听端口是8888，所以在浏览器输入 <a href=\"http://localhost:8888\">http://localhost:8888</a> 就能看到效果了</li>\n<li>如果执行上述命令提示错误：<code>Error: getaddrinfo ENOTFOUND localhost</code>，在host文件里面添加<code>127.0.0.1 localhost</code>即可</li>\n<li>监听端口和实时刷新的功能都能在<code>webpack.config.js</code>文件中修改配置</li>\n<li><p>如果项目运行正常，会看到如下效果：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1VKFhNXXXXXXCaXXXXXXXXXXX-884-217.png\" alt=\"\"></p>\n</li>\n</ul>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可以看到，定义一个自己常用的脚手架骑士挺简单的，还有更多的功能有待探索。<code>generator-reactpackage</code>是一个基于webpack+react+es6开发的项目模版，有需要用到这个模版的同学就赶快安装用起来吧。</p>\n<p>另外，它的源码已经上传到github上，喜欢<a href=\"https://github.com/luckykun/generator-reactpackage\">generator-reactpackage</a>的同学顺便给个star，多谢～～～</p>\n<hr>"},{"title":"h5+canvas实现酷炫的小游戏","date":"2016-05-29T01:41:43.000Z","toc":true,"_content":"\n-----------------\n\n最近除了做业务，也在尝试学习h5和移动端，在这个过程中，学到了很多，利用h5和canvas做了一个爱心鱼的小游戏。源码在github上，down下来直接就能够运行。要是觉得还行，就给个star吧！[源码地址点这里](https://github.com/luckykun/tinyHeart)\n\n下面我就做游戏的步骤来分享总结一下用到h5和canvas的API和一些常见的数学函数。推荐你先去玩一玩游戏，才能更好的明白这些逻辑。[点这里去玩一下](http://luckykun.com/work/2016-05-30/tiny-heart-demo.html)\n\n\n\n<!--more-->\n\n# 前言\n首先，一个游戏最重要的就是动画，怎么让元素动起来呢？先来看一句话：\n\n> 元素的位置移动，就形成了动画。\n\n一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。OK，先来介绍`requestAnimationFrame`这个函数。\n\n我们都知道，隔一段时间重新渲染，可以用到`setTimeout` 和`setInterval`这两个函数，那这里为什么不用呢？\n\n我来简单举个例子吧：\n- setInterval(myFun, 1);  意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而1ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现`丢帧`的问题，而如果时间设置太长，就会出现`视觉卡顿`的问题。\n- requestAnimationFrame(myFun); 如果我们这样写，又是什么意思呢？意思是根据`一定的时间间隔`，会自动执行myFun函数来进行绘制。这个\"一定的时间间隔\"就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。\n\n动画解决了，那么用什么来绘制每一帧的页面呢？这时就要用到h5的神奇----`canvas`了，所以canvas画布的API非常重要。\n\n## html文件\n\n```html\n    <div class=\"page\">\n        <div class=\"content\" id = \"main\">\n            <canvas id = \"canvas1\" width=\"800\" height=\"600\">\n            </canvas>\n            <canvas id = \"canvas2\" width=\"800\" height=\"600\">\n            </canvas>\n        </div>\n    </div>\n```\n\n- 定义两个画布，分别在画布上绘制相应的物体；\n- canvas2 上绘制，背景、海葵、果实；\n- canvas1 上绘制，大鱼、小鱼、显示文字、圆圈特效；\n\n## js文件\n\n```js\n    function init(){\n        can1 = document.getElementById('canvas1');     //画布\n        ctx1 = can1.getContext('2d');   //画笔\n        can2 = document.getElementById('canvas2');\n        ctx2 = can2.getContext('2d');   //下面的canvas\n    }\n    function gameloop(){\n        requestAnimFrame(gameLoop);\n        //绘制物体...\n    }\n    var requestAnimFrame = (function() {\n        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n        function(callback, element) {\n            return window.setTimeout(callback, 1000 / 60);\n        };\n})();\n```\n\n- init函数初始化一些变量，比如海葵对象，大鱼、小鱼对象等等。\n- gameloop函数用于绘制每一帧的页面。下面所介绍的所有绘制函数都是在这里执行。\n- requestAnimFrame函数是为了兼容所有浏览器。\n\n下面我们就开始绘制游戏中出现的东西，顺便看看都用到了哪些有趣的API函数。go！go！go！\n\n# 绘制背景和海葵\n背景是一张图，而海葵是一个类，它有x坐标，y坐标，个数等等属性，有初始化init和draw方法。\n\n```js\n    drawImage(image, x, y, width, height)\n    ctx2.save();\n    ctx2.globalAlpha = 0.7;\n    ctx2.lineWidth = 20;\n    ctx2.lineCap = 'round';\n    ctx2.strokeStyle = '#3b154e';\n    ctx2.beginPath();\n    ctx2.moveTo(this.rootx[i], canHei);     //起始点\n    ctx2.lineTo(this.rootx[i], canHei - 220,);  //结束点    ctx2.stroke();\n    ctx2.restore();\n```\n\n- ctx2.drawImage(image, x, y, width, height)    //x,y代表坐标，width和height代表宽高\n- ctx2.save();   //定义作用空间\n- ctx2.globalAlpha = 0.7;      //定义线的透明度\n- ctx2.lineWidth = 20;       //  宽度\n- ctx2.lineCap = 'round';     // 圆角\n- ctx2.strokeStyle = '#3b154e';   //定义绘制线条的颜色\n- ctx2.beginPath();    //开始路径\n- ctx2.moveTo(x,y);     //线的起点，x,y代表坐标（坐标原点在左上角）\n- ctx2.lineTo(x,y);    // 线条从起点连接到这个点\n- ctx2.stroke();       // 开始绘制线条\n- ctx2.restore();      //作用空间结束\n\n# 海葵产生果实\n果实也是一个类，他的属性有：坐标、类型（黄色和蓝色）、大小、状态（显示还是隐藏）、速度（向上漂浮的速度）等等属性；他的方法有：初始化init、出生born和绘制draw。\n\ndraw方法：\n\n```js\n    for(var i =0;i< this.num; i++){\n        if(this.alive[i]){\n            //find an ane, grow, fly up...\n            if(this.size[i] <= 16){   //长大状态\n                this.grow[i] = false;\n                this.size[i] += this.speed[i] * diffframetime * 0.8;\n            }else{   //已经长大,向上漂浮\n                this.grow[i] = true;\n                this.y[i] -= this.speed[i] * 5 * diffframetime;\n            }\n            var pic = this.orange;\n            if(this.type[i] == 'blue')   pic = this.blue;\n            ctx2.drawImage(pic, this.x[i] - this.size[i] * 0.5, this.y[i] - this.size[i] * 0.5, this.size[i], this.size[i]);\n            if(this.y[i] < 8){\n                this.alive[i] = false;\n            }\n        }\n    }\n```\n\nborn方法：随机找到一个海葵的坐标，在海葵的坐标上出生一个果实。\n\n# 绘制大鱼和小鱼\n大鱼和小鱼都是一个类，它的属性有：坐标、旋转角度、尾巴摆动时间间隔、眨眼睛时间间隔、身体图片数组....等等\n\n先把大鱼绘制出来，用canvas的drawImage方法。\n\n比较难的是大鱼的动画，大鱼会随着鼠标移动而移动的动画，这里定义了两个函数：\n\n```js\nfunction lerpAngle(a, b, t) {     //计算每一帧旋转的角度\n    var d = b - a;\n    if (d > Math.PI) d = d - 2 * Math.PI;\n    if (d < -Math.PI) d = d + 2 * Math.PI;\n    return a + d * t;\n}\nfunction lerpDistance(aim, cur, ratio) {   //aim：目标 cur：当前 ratio：百分比  计算每一帧趋近的距离\n    var delta = cur - aim;\n    return aim + delta * ratio\n}\nthis.momTailTimer += diffframetime;\nif(this.momTailTimer > 50){\n    this.momTailIndex = (this.momTailIndex + 1) % 8;      //根据时间间隔改变尾巴图片\n    this.momTailTimer %= 50;\n}\n```\n\n- lerpDistance 是计算每一帧大鱼趋紧到鼠标的距离。\n- lerpAngle  用来计算大鱼每一帧向鼠标旋转的角度。 定义这两个函数，让大鱼动起来比较平滑。\n\n获得了一个角度之后，怎么让大鱼旋转起来呢？这里又需要用到几个API了。\n- ctx1.save();  //建议每次绘制都使用save和restore，可以避免定义样式，发生冲突。\n- ctx1.translate(this.x, this.y);      //把原点变成(this.x , this.y);\n- ctx1.rotate(this.angle);     //根据原点顺时针旋转一个角度\n\n绘制小鱼跟大鱼是一样的，不做详述。但是需要注意的是绘制小鱼的时候有个判断，当小鱼的颜色变白的时候，游戏结束。\n\n```js\nthis.babyBodyTimer += diffframetime;\nif(this.babyBodyTimer > 550){   //身体图片变化的计数器 > 550ms\n    this.babyBodyIndex += 1;     //身体图片变淡\n    this.babyBodyTimer %= 550;\n    scoreOb.strength = ((20 - this.babyBodyIndex)/2).toFixed(0);\n    if(this.babyBodyIndex > 19){   //如果身体变成白色，game over；\n        this.babyBodyIndex = 19;\n        scoreOb.gameOver = true;\n        can1.style.cursor = \"pointer\";\n    }\n}\n```\n\n# 大鱼吃果实\n大鱼吃果实是根据距离来判断定的，如果大鱼和果实的距离小于30，则让果实消失，并且出现白色圆环，并且分值有一定的变化。\n\n```js\n    jzk.momEatFruit = function(){     //判断果实和大鱼之间的距离，小于30说明被吃掉\n        for(var i = 0;i < fruitOb.num; i++ ){\n            if(fruitOb.alive[i] && fruitOb.grow[i]){\n                var len = calLength2(fruitOb.x[i], fruitOb.y[i], momOb.x, momOb.y);\n                if(len < 30){\n                    fruitOb.dead(i);    //如果距离小于30，则被吃掉\n                    waveOb.born(i);     //吃掉的时候，产生圆圈\n                    scoreOb.fruitNum ++;    //吃到的果实数量＋1\n                    momOb.momBodyIndex = momOb.momBodyIndex == 7 ? momOb.momBodyIndex : (momOb.momBodyIndex + 1);      //大鱼的身体颜色红\n                    if(fruitOb.type[i] == 'blue'){\n                        scoreOb.doubleNum ++;  //吃到蓝色果实，倍数＋1\n                    }\n                }\n            }\n        }\n    }\n```\n\n其中有一个calLength2函数，使用来计算两个点之间的距离的。\n\n```js\nfunction calLength2(x1, y1, x2, y2) {    //计算两个点之间的距离，，， 先求平方和，再开平方\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n```\n\n大鱼吃到果实的时候，会产生一个白色的圆圈，这个效果怎么实现呢？\n\n首先，我们定义一个waveObject类，它的属性有：坐标、数量、半径、使用状态。它的方法有：初始化、绘制和出生。\n\n我们来看一下绘制圆圈的方法：\n\n```js\nfor(var i = 0;i< this.num; i++){\n    if(this.status[i]){     //如果圆圈是使用状态，则绘制圆圈\n        this.r[i] += diffframetime * 0.04;\n        if(this.r[i] > 60){\n            this.status[i] = false;\n            return false;\n        }\n        var alpha = 1 - this.r[i] / 60;\n        ctx1.strokeStyle = \"rgba(255, 255, 255, \"+ alpha +\")\";\n        ctx1.beginPath();\n        ctx1.arc(this.x[i], this.y[i], this.r[i], 0, 2 * Math.PI);   //画圆，\n        ctx1.stroke();\n    }\n}\n```\n\n一帧一帧的画每一个圆，圆的半径逐渐增大，透明度逐渐减小，直到半径大于60的时候，把状态设为false，让其回归物体池中。\n\n这里又用到了一个新的方法：ctx1.arc(x,y,r,deg);   //画圆，x,y是中心圆点，r是半径，deg是角度，360度就是一个整圆。\n\n再来看一下出生的方法：\n\n```js\nfor(var i = 0; i< this.num; i++){\n    if(!this.status[i]){\n        this.status[i] = true;   //把圆圈状态设为使用状态\n        this.x[i] = fruitOb.x[index];\n        this.y[i] = fruitOb.y[index];\n        this.r[i] = 10;\n        return false;   //找到一个未使用的圆圈，就结束。\n    }\n}\n```\n\n圆圈出生的坐标就是被吃果实的坐标。\n\n# 大鱼喂小鱼\n大鱼喂小鱼同上，不再详述，这里喂小鱼之后，大鱼身体变白，小鱼随果实数量相应增多，另外需要注意的是，此时产生圆圈的坐标是小鱼的坐标。\n\n# 游戏分值计算\n定义一个数据类，它的属性有：吃到的果实数量、倍数、总分、力量值、游戏状态（是否结束）等；方法有：初始化、绘制分数。\n\n这里我们需要在画布上绘制文字，又用到了新的API：\n- ctx1.save();\n- ctx1.font = '40px verdana';   定义文字的大小和字体；\n- ctx1.shadowBlur = 10;    定义文字的阴影宽度\n- ctx1.shadowColor = \"white\";   定义文字阴影的颜色；\n- ctx1.fillStyle = \"rgba(255, 255, 255, \"+ this.alpha +\")\";  定义文字的颜色（rgba,a代表透明度）\n- ctx1.fillText(\"GAME OVER\", canWid _ 0.5, canHei _ 0.5 - 25);   绘制文字，第一个参数是字符串，支持表达式，后两个参数是坐标值。\n- ctx1.font = '25px verdana';\n- ctx1.fillText(\"CLICK TO RESTART\", canWid _ 0.5, canHei _ 0.5 + 25);\n- ctx1.restore();\n\n# 总结\n好啦，整个游戏的制作过程就分享完了，做的过程中有遇到过很多问题，不过都一一解决了，加深了很多以前模糊的概念，也学到了很多新的知识，比如使用rgba()来一起控制颜色和透明度，以前还真没用到过。\n\n这个游戏本身功能比较简单，但是动画还算比较酷炫。这也算是一个比较基本的动画基础框架了，而比较不容易理解的地方也有很多，比如求趋近的角度函数`lerpAngle(a,b,c)`，还有`Math.atan2()`这个函数，等等。 欢迎大家提出bug或者改进建议～～～\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/tiny-heart-study.md","raw":"---\ntitle: h5+canvas实现酷炫的小游戏\ndate: 2016-05-29T09:41:43.000Z\ncategories: 工作\ntags:\n  - 教程\n  - html5\n  - canvas\ntoc: true\n---\n\n-----------------\n\n最近除了做业务，也在尝试学习h5和移动端，在这个过程中，学到了很多，利用h5和canvas做了一个爱心鱼的小游戏。源码在github上，down下来直接就能够运行。要是觉得还行，就给个star吧！[源码地址点这里](https://github.com/luckykun/tinyHeart)\n\n下面我就做游戏的步骤来分享总结一下用到h5和canvas的API和一些常见的数学函数。推荐你先去玩一玩游戏，才能更好的明白这些逻辑。[点这里去玩一下](http://luckykun.com/work/2016-05-30/tiny-heart-demo.html)\n\n\n\n<!--more-->\n\n# 前言\n首先，一个游戏最重要的就是动画，怎么让元素动起来呢？先来看一句话：\n\n> 元素的位置移动，就形成了动画。\n\n一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。OK，先来介绍`requestAnimationFrame`这个函数。\n\n我们都知道，隔一段时间重新渲染，可以用到`setTimeout` 和`setInterval`这两个函数，那这里为什么不用呢？\n\n我来简单举个例子吧：\n- setInterval(myFun, 1);  意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而1ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现`丢帧`的问题，而如果时间设置太长，就会出现`视觉卡顿`的问题。\n- requestAnimationFrame(myFun); 如果我们这样写，又是什么意思呢？意思是根据`一定的时间间隔`，会自动执行myFun函数来进行绘制。这个\"一定的时间间隔\"就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。\n\n动画解决了，那么用什么来绘制每一帧的页面呢？这时就要用到h5的神奇----`canvas`了，所以canvas画布的API非常重要。\n\n## html文件\n\n```html\n    <div class=\"page\">\n        <div class=\"content\" id = \"main\">\n            <canvas id = \"canvas1\" width=\"800\" height=\"600\">\n            </canvas>\n            <canvas id = \"canvas2\" width=\"800\" height=\"600\">\n            </canvas>\n        </div>\n    </div>\n```\n\n- 定义两个画布，分别在画布上绘制相应的物体；\n- canvas2 上绘制，背景、海葵、果实；\n- canvas1 上绘制，大鱼、小鱼、显示文字、圆圈特效；\n\n## js文件\n\n```js\n    function init(){\n        can1 = document.getElementById('canvas1');     //画布\n        ctx1 = can1.getContext('2d');   //画笔\n        can2 = document.getElementById('canvas2');\n        ctx2 = can2.getContext('2d');   //下面的canvas\n    }\n    function gameloop(){\n        requestAnimFrame(gameLoop);\n        //绘制物体...\n    }\n    var requestAnimFrame = (function() {\n        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n        function(callback, element) {\n            return window.setTimeout(callback, 1000 / 60);\n        };\n})();\n```\n\n- init函数初始化一些变量，比如海葵对象，大鱼、小鱼对象等等。\n- gameloop函数用于绘制每一帧的页面。下面所介绍的所有绘制函数都是在这里执行。\n- requestAnimFrame函数是为了兼容所有浏览器。\n\n下面我们就开始绘制游戏中出现的东西，顺便看看都用到了哪些有趣的API函数。go！go！go！\n\n# 绘制背景和海葵\n背景是一张图，而海葵是一个类，它有x坐标，y坐标，个数等等属性，有初始化init和draw方法。\n\n```js\n    drawImage(image, x, y, width, height)\n    ctx2.save();\n    ctx2.globalAlpha = 0.7;\n    ctx2.lineWidth = 20;\n    ctx2.lineCap = 'round';\n    ctx2.strokeStyle = '#3b154e';\n    ctx2.beginPath();\n    ctx2.moveTo(this.rootx[i], canHei);     //起始点\n    ctx2.lineTo(this.rootx[i], canHei - 220,);  //结束点    ctx2.stroke();\n    ctx2.restore();\n```\n\n- ctx2.drawImage(image, x, y, width, height)    //x,y代表坐标，width和height代表宽高\n- ctx2.save();   //定义作用空间\n- ctx2.globalAlpha = 0.7;      //定义线的透明度\n- ctx2.lineWidth = 20;       //  宽度\n- ctx2.lineCap = 'round';     // 圆角\n- ctx2.strokeStyle = '#3b154e';   //定义绘制线条的颜色\n- ctx2.beginPath();    //开始路径\n- ctx2.moveTo(x,y);     //线的起点，x,y代表坐标（坐标原点在左上角）\n- ctx2.lineTo(x,y);    // 线条从起点连接到这个点\n- ctx2.stroke();       // 开始绘制线条\n- ctx2.restore();      //作用空间结束\n\n# 海葵产生果实\n果实也是一个类，他的属性有：坐标、类型（黄色和蓝色）、大小、状态（显示还是隐藏）、速度（向上漂浮的速度）等等属性；他的方法有：初始化init、出生born和绘制draw。\n\ndraw方法：\n\n```js\n    for(var i =0;i< this.num; i++){\n        if(this.alive[i]){\n            //find an ane, grow, fly up...\n            if(this.size[i] <= 16){   //长大状态\n                this.grow[i] = false;\n                this.size[i] += this.speed[i] * diffframetime * 0.8;\n            }else{   //已经长大,向上漂浮\n                this.grow[i] = true;\n                this.y[i] -= this.speed[i] * 5 * diffframetime;\n            }\n            var pic = this.orange;\n            if(this.type[i] == 'blue')   pic = this.blue;\n            ctx2.drawImage(pic, this.x[i] - this.size[i] * 0.5, this.y[i] - this.size[i] * 0.5, this.size[i], this.size[i]);\n            if(this.y[i] < 8){\n                this.alive[i] = false;\n            }\n        }\n    }\n```\n\nborn方法：随机找到一个海葵的坐标，在海葵的坐标上出生一个果实。\n\n# 绘制大鱼和小鱼\n大鱼和小鱼都是一个类，它的属性有：坐标、旋转角度、尾巴摆动时间间隔、眨眼睛时间间隔、身体图片数组....等等\n\n先把大鱼绘制出来，用canvas的drawImage方法。\n\n比较难的是大鱼的动画，大鱼会随着鼠标移动而移动的动画，这里定义了两个函数：\n\n```js\nfunction lerpAngle(a, b, t) {     //计算每一帧旋转的角度\n    var d = b - a;\n    if (d > Math.PI) d = d - 2 * Math.PI;\n    if (d < -Math.PI) d = d + 2 * Math.PI;\n    return a + d * t;\n}\nfunction lerpDistance(aim, cur, ratio) {   //aim：目标 cur：当前 ratio：百分比  计算每一帧趋近的距离\n    var delta = cur - aim;\n    return aim + delta * ratio\n}\nthis.momTailTimer += diffframetime;\nif(this.momTailTimer > 50){\n    this.momTailIndex = (this.momTailIndex + 1) % 8;      //根据时间间隔改变尾巴图片\n    this.momTailTimer %= 50;\n}\n```\n\n- lerpDistance 是计算每一帧大鱼趋紧到鼠标的距离。\n- lerpAngle  用来计算大鱼每一帧向鼠标旋转的角度。 定义这两个函数，让大鱼动起来比较平滑。\n\n获得了一个角度之后，怎么让大鱼旋转起来呢？这里又需要用到几个API了。\n- ctx1.save();  //建议每次绘制都使用save和restore，可以避免定义样式，发生冲突。\n- ctx1.translate(this.x, this.y);      //把原点变成(this.x , this.y);\n- ctx1.rotate(this.angle);     //根据原点顺时针旋转一个角度\n\n绘制小鱼跟大鱼是一样的，不做详述。但是需要注意的是绘制小鱼的时候有个判断，当小鱼的颜色变白的时候，游戏结束。\n\n```js\nthis.babyBodyTimer += diffframetime;\nif(this.babyBodyTimer > 550){   //身体图片变化的计数器 > 550ms\n    this.babyBodyIndex += 1;     //身体图片变淡\n    this.babyBodyTimer %= 550;\n    scoreOb.strength = ((20 - this.babyBodyIndex)/2).toFixed(0);\n    if(this.babyBodyIndex > 19){   //如果身体变成白色，game over；\n        this.babyBodyIndex = 19;\n        scoreOb.gameOver = true;\n        can1.style.cursor = \"pointer\";\n    }\n}\n```\n\n# 大鱼吃果实\n大鱼吃果实是根据距离来判断定的，如果大鱼和果实的距离小于30，则让果实消失，并且出现白色圆环，并且分值有一定的变化。\n\n```js\n    jzk.momEatFruit = function(){     //判断果实和大鱼之间的距离，小于30说明被吃掉\n        for(var i = 0;i < fruitOb.num; i++ ){\n            if(fruitOb.alive[i] && fruitOb.grow[i]){\n                var len = calLength2(fruitOb.x[i], fruitOb.y[i], momOb.x, momOb.y);\n                if(len < 30){\n                    fruitOb.dead(i);    //如果距离小于30，则被吃掉\n                    waveOb.born(i);     //吃掉的时候，产生圆圈\n                    scoreOb.fruitNum ++;    //吃到的果实数量＋1\n                    momOb.momBodyIndex = momOb.momBodyIndex == 7 ? momOb.momBodyIndex : (momOb.momBodyIndex + 1);      //大鱼的身体颜色红\n                    if(fruitOb.type[i] == 'blue'){\n                        scoreOb.doubleNum ++;  //吃到蓝色果实，倍数＋1\n                    }\n                }\n            }\n        }\n    }\n```\n\n其中有一个calLength2函数，使用来计算两个点之间的距离的。\n\n```js\nfunction calLength2(x1, y1, x2, y2) {    //计算两个点之间的距离，，， 先求平方和，再开平方\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n```\n\n大鱼吃到果实的时候，会产生一个白色的圆圈，这个效果怎么实现呢？\n\n首先，我们定义一个waveObject类，它的属性有：坐标、数量、半径、使用状态。它的方法有：初始化、绘制和出生。\n\n我们来看一下绘制圆圈的方法：\n\n```js\nfor(var i = 0;i< this.num; i++){\n    if(this.status[i]){     //如果圆圈是使用状态，则绘制圆圈\n        this.r[i] += diffframetime * 0.04;\n        if(this.r[i] > 60){\n            this.status[i] = false;\n            return false;\n        }\n        var alpha = 1 - this.r[i] / 60;\n        ctx1.strokeStyle = \"rgba(255, 255, 255, \"+ alpha +\")\";\n        ctx1.beginPath();\n        ctx1.arc(this.x[i], this.y[i], this.r[i], 0, 2 * Math.PI);   //画圆，\n        ctx1.stroke();\n    }\n}\n```\n\n一帧一帧的画每一个圆，圆的半径逐渐增大，透明度逐渐减小，直到半径大于60的时候，把状态设为false，让其回归物体池中。\n\n这里又用到了一个新的方法：ctx1.arc(x,y,r,deg);   //画圆，x,y是中心圆点，r是半径，deg是角度，360度就是一个整圆。\n\n再来看一下出生的方法：\n\n```js\nfor(var i = 0; i< this.num; i++){\n    if(!this.status[i]){\n        this.status[i] = true;   //把圆圈状态设为使用状态\n        this.x[i] = fruitOb.x[index];\n        this.y[i] = fruitOb.y[index];\n        this.r[i] = 10;\n        return false;   //找到一个未使用的圆圈，就结束。\n    }\n}\n```\n\n圆圈出生的坐标就是被吃果实的坐标。\n\n# 大鱼喂小鱼\n大鱼喂小鱼同上，不再详述，这里喂小鱼之后，大鱼身体变白，小鱼随果实数量相应增多，另外需要注意的是，此时产生圆圈的坐标是小鱼的坐标。\n\n# 游戏分值计算\n定义一个数据类，它的属性有：吃到的果实数量、倍数、总分、力量值、游戏状态（是否结束）等；方法有：初始化、绘制分数。\n\n这里我们需要在画布上绘制文字，又用到了新的API：\n- ctx1.save();\n- ctx1.font = '40px verdana';   定义文字的大小和字体；\n- ctx1.shadowBlur = 10;    定义文字的阴影宽度\n- ctx1.shadowColor = \"white\";   定义文字阴影的颜色；\n- ctx1.fillStyle = \"rgba(255, 255, 255, \"+ this.alpha +\")\";  定义文字的颜色（rgba,a代表透明度）\n- ctx1.fillText(\"GAME OVER\", canWid _ 0.5, canHei _ 0.5 - 25);   绘制文字，第一个参数是字符串，支持表达式，后两个参数是坐标值。\n- ctx1.font = '25px verdana';\n- ctx1.fillText(\"CLICK TO RESTART\", canWid _ 0.5, canHei _ 0.5 + 25);\n- ctx1.restore();\n\n# 总结\n好啦，整个游戏的制作过程就分享完了，做的过程中有遇到过很多问题，不过都一一解决了，加深了很多以前模糊的概念，也学到了很多新的知识，比如使用rgba()来一起控制颜色和透明度，以前还真没用到过。\n\n这个游戏本身功能比较简单，但是动画还算比较酷炫。这也算是一个比较基本的动画基础框架了，而比较不容易理解的地方也有很多，比如求趋近的角度函数`lerpAngle(a,b,c)`，还有`Math.atan2()`这个函数，等等。 欢迎大家提出bug或者改进建议～～～\n\n\n--------------------------------------------------------------------------------\n","slug":"tiny-heart-study","published":1,"updated":"2016-10-11T16:30:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdbb000mu13grftkqs21","content":"<hr>\n<p>最近除了做业务，也在尝试学习h5和移动端，在这个过程中，学到了很多，利用h5和canvas做了一个爱心鱼的小游戏。源码在github上，down下来直接就能够运行。要是觉得还行，就给个star吧！<a href=\"https://github.com/luckykun/tinyHeart\" target=\"_blank\" rel=\"external\">源码地址点这里</a></p>\n<p>下面我就做游戏的步骤来分享总结一下用到h5和canvas的API和一些常见的数学函数。推荐你先去玩一玩游戏，才能更好的明白这些逻辑。<a href=\"http://luckykun.com/work/2016-05-30/tiny-heart-demo.html\" target=\"_blank\" rel=\"external\">点这里去玩一下</a></p>\n<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>首先，一个游戏最重要的就是动画，怎么让元素动起来呢？先来看一句话：</p>\n<blockquote>\n<p>元素的位置移动，就形成了动画。</p>\n</blockquote>\n<p>一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。OK，先来介绍<code>requestAnimationFrame</code>这个函数。</p>\n<p>我们都知道，隔一段时间重新渲染，可以用到<code>setTimeout</code> 和<code>setInterval</code>这两个函数，那这里为什么不用呢？</p>\n<p>我来简单举个例子吧：</p>\n<ul>\n<li>setInterval(myFun, 1);  意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而1ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现<code>丢帧</code>的问题，而如果时间设置太长，就会出现<code>视觉卡顿</code>的问题。</li>\n<li>requestAnimationFrame(myFun); 如果我们这样写，又是什么意思呢？意思是根据<code>一定的时间间隔</code>，会自动执行myFun函数来进行绘制。这个”一定的时间间隔”就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。</li>\n</ul>\n<p>动画解决了，那么用什么来绘制每一帧的页面呢？这时就要用到h5的神奇—-<code>canvas</code>了，所以canvas画布的API非常重要。</p>\n<h2 id=\"html文件\"><a href=\"#html文件\" class=\"headerlink\" title=\"html文件\"></a>html文件</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span> = <span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span> = <span class=\"string\">\"canvas1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"600\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span> = <span class=\"string\">\"canvas2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"600\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>定义两个画布，分别在画布上绘制相应的物体；</li>\n<li>canvas2 上绘制，背景、海葵、果实；</li>\n<li>canvas1 上绘制，大鱼、小鱼、显示文字、圆圈特效；</li>\n</ul>\n<h2 id=\"js文件\"><a href=\"#js文件\" class=\"headerlink\" title=\"js文件\"></a>js文件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        can1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas1'</span>);     <span class=\"comment\">//画布</span></div><div class=\"line\">        ctx1 = can1.getContext(<span class=\"string\">'2d'</span>);   <span class=\"comment\">//画笔</span></div><div class=\"line\">        can2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas2'</span>);</div><div class=\"line\">        ctx2 = can2.getContext(<span class=\"string\">'2d'</span>);   <span class=\"comment\">//下面的canvas</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gameloop</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        requestAnimFrame(gameLoop);</div><div class=\"line\">        <span class=\"comment\">//绘制物体...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> requestAnimFrame = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.requestAnimationFrame || <span class=\"built_in\">window</span>.webkitRequestAnimationFrame || <span class=\"built_in\">window</span>.mozRequestAnimationFrame || <span class=\"built_in\">window</span>.oRequestAnimationFrame || <span class=\"built_in\">window</span>.msRequestAnimationFrame ||</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, element</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<ul>\n<li>init函数初始化一些变量，比如海葵对象，大鱼、小鱼对象等等。</li>\n<li>gameloop函数用于绘制每一帧的页面。下面所介绍的所有绘制函数都是在这里执行。</li>\n<li>requestAnimFrame函数是为了兼容所有浏览器。</li>\n</ul>\n<p>下面我们就开始绘制游戏中出现的东西，顺便看看都用到了哪些有趣的API函数。go！go！go！</p>\n<h1 id=\"绘制背景和海葵\"><a href=\"#绘制背景和海葵\" class=\"headerlink\" title=\"绘制背景和海葵\"></a>绘制背景和海葵</h1><p>背景是一张图，而海葵是一个类，它有x坐标，y坐标，个数等等属性，有初始化init和draw方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">drawImage(image, x, y, width, height)</div><div class=\"line\">ctx2.save();</div><div class=\"line\">ctx2.globalAlpha = <span class=\"number\">0.7</span>;</div><div class=\"line\">ctx2.lineWidth = <span class=\"number\">20</span>;</div><div class=\"line\">ctx2.lineCap = <span class=\"string\">'round'</span>;</div><div class=\"line\">ctx2.strokeStyle = <span class=\"string\">'#3b154e'</span>;</div><div class=\"line\">ctx2.beginPath();</div><div class=\"line\">ctx2.moveTo(<span class=\"keyword\">this</span>.rootx[i], canHei);     <span class=\"comment\">//起始点</span></div><div class=\"line\">ctx2.lineTo(<span class=\"keyword\">this</span>.rootx[i], canHei - <span class=\"number\">220</span>,);  <span class=\"comment\">//结束点    ctx2.stroke();</span></div><div class=\"line\">ctx2.restore();</div></pre></td></tr></table></figure>\n<ul>\n<li>ctx2.drawImage(image, x, y, width, height)    //x,y代表坐标，width和height代表宽高</li>\n<li>ctx2.save();   //定义作用空间</li>\n<li>ctx2.globalAlpha = 0.7;      //定义线的透明度</li>\n<li>ctx2.lineWidth = 20;       //  宽度</li>\n<li>ctx2.lineCap = ‘round’;     // 圆角</li>\n<li>ctx2.strokeStyle = ‘#3b154e’;   //定义绘制线条的颜色</li>\n<li>ctx2.beginPath();    //开始路径</li>\n<li>ctx2.moveTo(x,y);     //线的起点，x,y代表坐标（坐标原点在左上角）</li>\n<li>ctx2.lineTo(x,y);    // 线条从起点连接到这个点</li>\n<li>ctx2.stroke();       // 开始绘制线条</li>\n<li>ctx2.restore();      //作用空间结束</li>\n</ul>\n<h1 id=\"海葵产生果实\"><a href=\"#海葵产生果实\" class=\"headerlink\" title=\"海葵产生果实\"></a>海葵产生果实</h1><p>果实也是一个类，他的属性有：坐标、类型（黄色和蓝色）、大小、状态（显示还是隐藏）、速度（向上漂浮的速度）等等属性；他的方法有：初始化init、出生born和绘制draw。</p>\n<p>draw方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt; <span class=\"keyword\">this</span>.num; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.alive[i])&#123;</div><div class=\"line\">        <span class=\"comment\">//find an ane, grow, fly up...</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.size[i] &lt;= <span class=\"number\">16</span>)&#123;   <span class=\"comment\">//长大状态</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.grow[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.size[i] += <span class=\"keyword\">this</span>.speed[i] * diffframetime * <span class=\"number\">0.8</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//已经长大,向上漂浮</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.grow[i] = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.y[i] -= <span class=\"keyword\">this</span>.speed[i] * <span class=\"number\">5</span> * diffframetime;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> pic = <span class=\"keyword\">this</span>.orange;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.type[i] == <span class=\"string\">'blue'</span>)   pic = <span class=\"keyword\">this</span>.blue;</div><div class=\"line\">        ctx2.drawImage(pic, <span class=\"keyword\">this</span>.x[i] - <span class=\"keyword\">this</span>.size[i] * <span class=\"number\">0.5</span>, <span class=\"keyword\">this</span>.y[i] - <span class=\"keyword\">this</span>.size[i] * <span class=\"number\">0.5</span>, <span class=\"keyword\">this</span>.size[i], <span class=\"keyword\">this</span>.size[i]);</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.y[i] &lt; <span class=\"number\">8</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.alive[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>born方法：随机找到一个海葵的坐标，在海葵的坐标上出生一个果实。</p>\n<h1 id=\"绘制大鱼和小鱼\"><a href=\"#绘制大鱼和小鱼\" class=\"headerlink\" title=\"绘制大鱼和小鱼\"></a>绘制大鱼和小鱼</h1><p>大鱼和小鱼都是一个类，它的属性有：坐标、旋转角度、尾巴摆动时间间隔、眨眼睛时间间隔、身体图片数组….等等</p>\n<p>先把大鱼绘制出来，用canvas的drawImage方法。</p>\n<p>比较难的是大鱼的动画，大鱼会随着鼠标移动而移动的动画，这里定义了两个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lerpAngle</span>(<span class=\"params\">a, b, t</span>) </span>&#123;     <span class=\"comment\">//计算每一帧旋转的角度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> d = b - a;</div><div class=\"line\">    <span class=\"keyword\">if</span> (d &gt; <span class=\"built_in\">Math</span>.PI) d = d - <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI;</div><div class=\"line\">    <span class=\"keyword\">if</span> (d &lt; -<span class=\"built_in\">Math</span>.PI) d = d + <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + d * t;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lerpDistance</span>(<span class=\"params\">aim, cur, ratio</span>) </span>&#123;   <span class=\"comment\">//aim：目标 cur：当前 ratio：百分比  计算每一帧趋近的距离</span></div><div class=\"line\">    <span class=\"keyword\">var</span> delta = cur - aim;</div><div class=\"line\">    <span class=\"keyword\">return</span> aim + delta * ratio</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">this</span>.momTailTimer += diffframetime;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.momTailTimer &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.momTailIndex = (<span class=\"keyword\">this</span>.momTailIndex + <span class=\"number\">1</span>) % <span class=\"number\">8</span>;      <span class=\"comment\">//根据时间间隔改变尾巴图片</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.momTailTimer %= <span class=\"number\">50</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>lerpDistance 是计算每一帧大鱼趋紧到鼠标的距离。</li>\n<li>lerpAngle  用来计算大鱼每一帧向鼠标旋转的角度。 定义这两个函数，让大鱼动起来比较平滑。</li>\n</ul>\n<p>获得了一个角度之后，怎么让大鱼旋转起来呢？这里又需要用到几个API了。</p>\n<ul>\n<li>ctx1.save();  //建议每次绘制都使用save和restore，可以避免定义样式，发生冲突。</li>\n<li>ctx1.translate(this.x, this.y);      //把原点变成(this.x , this.y);</li>\n<li>ctx1.rotate(this.angle);     //根据原点顺时针旋转一个角度</li>\n</ul>\n<p>绘制小鱼跟大鱼是一样的，不做详述。但是需要注意的是绘制小鱼的时候有个判断，当小鱼的颜色变白的时候，游戏结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.babyBodyTimer += diffframetime;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.babyBodyTimer &gt; <span class=\"number\">550</span>)&#123;   <span class=\"comment\">//身体图片变化的计数器 &gt; 550ms</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.babyBodyIndex += <span class=\"number\">1</span>;     <span class=\"comment\">//身体图片变淡</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.babyBodyTimer %= <span class=\"number\">550</span>;</div><div class=\"line\">    scoreOb.strength = ((<span class=\"number\">20</span> - <span class=\"keyword\">this</span>.babyBodyIndex)/<span class=\"number\">2</span>).toFixed(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.babyBodyIndex &gt; <span class=\"number\">19</span>)&#123;   <span class=\"comment\">//如果身体变成白色，game over；</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.babyBodyIndex = <span class=\"number\">19</span>;</div><div class=\"line\">        scoreOb.gameOver = <span class=\"literal\">true</span>;</div><div class=\"line\">        can1.style.cursor = <span class=\"string\">\"pointer\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"大鱼吃果实\"><a href=\"#大鱼吃果实\" class=\"headerlink\" title=\"大鱼吃果实\"></a>大鱼吃果实</h1><p>大鱼吃果实是根据距离来判断定的，如果大鱼和果实的距离小于30，则让果实消失，并且出现白色圆环，并且分值有一定的变化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">jzk.momEatFruit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     <span class=\"comment\">//判断果实和大鱼之间的距离，小于30说明被吃掉</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; fruitOb.num; i++ )&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(fruitOb.alive[i] &amp;&amp; fruitOb.grow[i])&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> len = calLength2(fruitOb.x[i], fruitOb.y[i], momOb.x, momOb.y);</div><div class=\"line\">            <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">30</span>)&#123;</div><div class=\"line\">                fruitOb.dead(i);    <span class=\"comment\">//如果距离小于30，则被吃掉</span></div><div class=\"line\">                waveOb.born(i);     <span class=\"comment\">//吃掉的时候，产生圆圈</span></div><div class=\"line\">                scoreOb.fruitNum ++;    <span class=\"comment\">//吃到的果实数量＋1</span></div><div class=\"line\">                momOb.momBodyIndex = momOb.momBodyIndex == <span class=\"number\">7</span> ? momOb.momBodyIndex : (momOb.momBodyIndex + <span class=\"number\">1</span>);      <span class=\"comment\">//大鱼的身体颜色红</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(fruitOb.type[i] == <span class=\"string\">'blue'</span>)&#123;</div><div class=\"line\">                    scoreOb.doubleNum ++;  <span class=\"comment\">//吃到蓝色果实，倍数＋1</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中有一个calLength2函数，使用来计算两个点之间的距离的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calLength2</span>(<span class=\"params\">x1, y1, x2, y2</span>) </span>&#123;    <span class=\"comment\">//计算两个点之间的距离，，， 先求平方和，再开平方</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">Math</span>.pow(x1 - x2, <span class=\"number\">2</span>) + <span class=\"built_in\">Math</span>.pow(y1 - y2, <span class=\"number\">2</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大鱼吃到果实的时候，会产生一个白色的圆圈，这个效果怎么实现呢？</p>\n<p>首先，我们定义一个waveObject类，它的属性有：坐标、数量、半径、使用状态。它的方法有：初始化、绘制和出生。</p>\n<p>我们来看一下绘制圆圈的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt; <span class=\"keyword\">this</span>.num; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.status[i])&#123;     <span class=\"comment\">//如果圆圈是使用状态，则绘制圆圈</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.r[i] += diffframetime * <span class=\"number\">0.04</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.r[i] &gt; <span class=\"number\">60</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.status[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> alpha = <span class=\"number\">1</span> - <span class=\"keyword\">this</span>.r[i] / <span class=\"number\">60</span>;</div><div class=\"line\">        ctx1.strokeStyle = <span class=\"string\">\"rgba(255, 255, 255, \"</span>+ alpha +<span class=\"string\">\")\"</span>;</div><div class=\"line\">        ctx1.beginPath();</div><div class=\"line\">        ctx1.arc(<span class=\"keyword\">this</span>.x[i], <span class=\"keyword\">this</span>.y[i], <span class=\"keyword\">this</span>.r[i], <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);   <span class=\"comment\">//画圆，</span></div><div class=\"line\">        ctx1.stroke();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一帧一帧的画每一个圆，圆的半径逐渐增大，透明度逐渐减小，直到半径大于60的时候，把状态设为false，让其回归物体池中。</p>\n<p>这里又用到了一个新的方法：ctx1.arc(x,y,r,deg);   //画圆，x,y是中心圆点，r是半径，deg是角度，360度就是一个整圆。</p>\n<p>再来看一下出生的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"keyword\">this</span>.num; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.status[i])&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.status[i] = <span class=\"literal\">true</span>;   <span class=\"comment\">//把圆圈状态设为使用状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.x[i] = fruitOb.x[index];</div><div class=\"line\">        <span class=\"keyword\">this</span>.y[i] = fruitOb.y[index];</div><div class=\"line\">        <span class=\"keyword\">this</span>.r[i] = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   <span class=\"comment\">//找到一个未使用的圆圈，就结束。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>圆圈出生的坐标就是被吃果实的坐标。</p>\n<h1 id=\"大鱼喂小鱼\"><a href=\"#大鱼喂小鱼\" class=\"headerlink\" title=\"大鱼喂小鱼\"></a>大鱼喂小鱼</h1><p>大鱼喂小鱼同上，不再详述，这里喂小鱼之后，大鱼身体变白，小鱼随果实数量相应增多，另外需要注意的是，此时产生圆圈的坐标是小鱼的坐标。</p>\n<h1 id=\"游戏分值计算\"><a href=\"#游戏分值计算\" class=\"headerlink\" title=\"游戏分值计算\"></a>游戏分值计算</h1><p>定义一个数据类，它的属性有：吃到的果实数量、倍数、总分、力量值、游戏状态（是否结束）等；方法有：初始化、绘制分数。</p>\n<p>这里我们需要在画布上绘制文字，又用到了新的API：</p>\n<ul>\n<li>ctx1.save();</li>\n<li>ctx1.font = ‘40px verdana’;   定义文字的大小和字体；</li>\n<li>ctx1.shadowBlur = 10;    定义文字的阴影宽度</li>\n<li>ctx1.shadowColor = “white”;   定义文字阴影的颜色；</li>\n<li>ctx1.fillStyle = “rgba(255, 255, 255, “+ this.alpha +”)”;  定义文字的颜色（rgba,a代表透明度）</li>\n<li>ctx1.fillText(“GAME OVER”, canWid <em> 0.5, canHei </em> 0.5 - 25);   绘制文字，第一个参数是字符串，支持表达式，后两个参数是坐标值。</li>\n<li>ctx1.font = ‘25px verdana’;</li>\n<li>ctx1.fillText(“CLICK TO RESTART”, canWid <em> 0.5, canHei </em> 0.5 + 25);</li>\n<li>ctx1.restore();</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>好啦，整个游戏的制作过程就分享完了，做的过程中有遇到过很多问题，不过都一一解决了，加深了很多以前模糊的概念，也学到了很多新的知识，比如使用rgba()来一起控制颜色和透明度，以前还真没用到过。</p>\n<p>这个游戏本身功能比较简单，但是动画还算比较酷炫。这也算是一个比较基本的动画基础框架了，而比较不容易理解的地方也有很多，比如求趋近的角度函数<code>lerpAngle(a,b,c)</code>，还有<code>Math.atan2()</code>这个函数，等等。 欢迎大家提出bug或者改进建议～～～</p>\n<hr>\n","excerpt":"<hr>\n<p>最近除了做业务，也在尝试学习h5和移动端，在这个过程中，学到了很多，利用h5和canvas做了一个爱心鱼的小游戏。源码在github上，down下来直接就能够运行。要是觉得还行，就给个star吧！<a href=\"https://github.com/luckykun/tinyHeart\">源码地址点这里</a></p>\n<p>下面我就做游戏的步骤来分享总结一下用到h5和canvas的API和一些常见的数学函数。推荐你先去玩一玩游戏，才能更好的明白这些逻辑。<a href=\"http://luckykun.com/work/2016-05-30/tiny-heart-demo.html\">点这里去玩一下</a></p>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>首先，一个游戏最重要的就是动画，怎么让元素动起来呢？先来看一句话：</p>\n<blockquote>\n<p>元素的位置移动，就形成了动画。</p>\n</blockquote>\n<p>一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。OK，先来介绍<code>requestAnimationFrame</code>这个函数。</p>\n<p>我们都知道，隔一段时间重新渲染，可以用到<code>setTimeout</code> 和<code>setInterval</code>这两个函数，那这里为什么不用呢？</p>\n<p>我来简单举个例子吧：</p>\n<ul>\n<li>setInterval(myFun, 1);  意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而1ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现<code>丢帧</code>的问题，而如果时间设置太长，就会出现<code>视觉卡顿</code>的问题。</li>\n<li>requestAnimationFrame(myFun); 如果我们这样写，又是什么意思呢？意思是根据<code>一定的时间间隔</code>，会自动执行myFun函数来进行绘制。这个”一定的时间间隔”就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。</li>\n</ul>\n<p>动画解决了，那么用什么来绘制每一帧的页面呢？这时就要用到h5的神奇—-<code>canvas</code>了，所以canvas画布的API非常重要。</p>\n<h2 id=\"html文件\"><a href=\"#html文件\" class=\"headerlink\" title=\"html文件\"></a>html文件</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span> = <span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span> = <span class=\"string\">\"canvas1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"600\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span> = <span class=\"string\">\"canvas2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"600\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>定义两个画布，分别在画布上绘制相应的物体；</li>\n<li>canvas2 上绘制，背景、海葵、果实；</li>\n<li>canvas1 上绘制，大鱼、小鱼、显示文字、圆圈特效；</li>\n</ul>\n<h2 id=\"js文件\"><a href=\"#js文件\" class=\"headerlink\" title=\"js文件\"></a>js文件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        can1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas1'</span>);     <span class=\"comment\">//画布</span></div><div class=\"line\">        ctx1 = can1.getContext(<span class=\"string\">'2d'</span>);   <span class=\"comment\">//画笔</span></div><div class=\"line\">        can2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas2'</span>);</div><div class=\"line\">        ctx2 = can2.getContext(<span class=\"string\">'2d'</span>);   <span class=\"comment\">//下面的canvas</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gameloop</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        requestAnimFrame(gameLoop);</div><div class=\"line\">        <span class=\"comment\">//绘制物体...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> requestAnimFrame = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.requestAnimationFrame || <span class=\"built_in\">window</span>.webkitRequestAnimationFrame || <span class=\"built_in\">window</span>.mozRequestAnimationFrame || <span class=\"built_in\">window</span>.oRequestAnimationFrame || <span class=\"built_in\">window</span>.msRequestAnimationFrame ||</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, element</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<ul>\n<li>init函数初始化一些变量，比如海葵对象，大鱼、小鱼对象等等。</li>\n<li>gameloop函数用于绘制每一帧的页面。下面所介绍的所有绘制函数都是在这里执行。</li>\n<li>requestAnimFrame函数是为了兼容所有浏览器。</li>\n</ul>\n<p>下面我们就开始绘制游戏中出现的东西，顺便看看都用到了哪些有趣的API函数。go！go！go！</p>\n<h1 id=\"绘制背景和海葵\"><a href=\"#绘制背景和海葵\" class=\"headerlink\" title=\"绘制背景和海葵\"></a>绘制背景和海葵</h1><p>背景是一张图，而海葵是一个类，它有x坐标，y坐标，个数等等属性，有初始化init和draw方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">drawImage(image, x, y, width, height)</div><div class=\"line\">ctx2.save();</div><div class=\"line\">ctx2.globalAlpha = <span class=\"number\">0.7</span>;</div><div class=\"line\">ctx2.lineWidth = <span class=\"number\">20</span>;</div><div class=\"line\">ctx2.lineCap = <span class=\"string\">'round'</span>;</div><div class=\"line\">ctx2.strokeStyle = <span class=\"string\">'#3b154e'</span>;</div><div class=\"line\">ctx2.beginPath();</div><div class=\"line\">ctx2.moveTo(<span class=\"keyword\">this</span>.rootx[i], canHei);     <span class=\"comment\">//起始点</span></div><div class=\"line\">ctx2.lineTo(<span class=\"keyword\">this</span>.rootx[i], canHei - <span class=\"number\">220</span>,);  <span class=\"comment\">//结束点    ctx2.stroke();</span></div><div class=\"line\">ctx2.restore();</div></pre></td></tr></table></figure>\n<ul>\n<li>ctx2.drawImage(image, x, y, width, height)    //x,y代表坐标，width和height代表宽高</li>\n<li>ctx2.save();   //定义作用空间</li>\n<li>ctx2.globalAlpha = 0.7;      //定义线的透明度</li>\n<li>ctx2.lineWidth = 20;       //  宽度</li>\n<li>ctx2.lineCap = ‘round’;     // 圆角</li>\n<li>ctx2.strokeStyle = ‘#3b154e’;   //定义绘制线条的颜色</li>\n<li>ctx2.beginPath();    //开始路径</li>\n<li>ctx2.moveTo(x,y);     //线的起点，x,y代表坐标（坐标原点在左上角）</li>\n<li>ctx2.lineTo(x,y);    // 线条从起点连接到这个点</li>\n<li>ctx2.stroke();       // 开始绘制线条</li>\n<li>ctx2.restore();      //作用空间结束</li>\n</ul>\n<h1 id=\"海葵产生果实\"><a href=\"#海葵产生果实\" class=\"headerlink\" title=\"海葵产生果实\"></a>海葵产生果实</h1><p>果实也是一个类，他的属性有：坐标、类型（黄色和蓝色）、大小、状态（显示还是隐藏）、速度（向上漂浮的速度）等等属性；他的方法有：初始化init、出生born和绘制draw。</p>\n<p>draw方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt; <span class=\"keyword\">this</span>.num; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.alive[i])&#123;</div><div class=\"line\">        <span class=\"comment\">//find an ane, grow, fly up...</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.size[i] &lt;= <span class=\"number\">16</span>)&#123;   <span class=\"comment\">//长大状态</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.grow[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.size[i] += <span class=\"keyword\">this</span>.speed[i] * diffframetime * <span class=\"number\">0.8</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//已经长大,向上漂浮</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.grow[i] = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.y[i] -= <span class=\"keyword\">this</span>.speed[i] * <span class=\"number\">5</span> * diffframetime;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> pic = <span class=\"keyword\">this</span>.orange;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.type[i] == <span class=\"string\">'blue'</span>)   pic = <span class=\"keyword\">this</span>.blue;</div><div class=\"line\">        ctx2.drawImage(pic, <span class=\"keyword\">this</span>.x[i] - <span class=\"keyword\">this</span>.size[i] * <span class=\"number\">0.5</span>, <span class=\"keyword\">this</span>.y[i] - <span class=\"keyword\">this</span>.size[i] * <span class=\"number\">0.5</span>, <span class=\"keyword\">this</span>.size[i], <span class=\"keyword\">this</span>.size[i]);</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.y[i] &lt; <span class=\"number\">8</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.alive[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>born方法：随机找到一个海葵的坐标，在海葵的坐标上出生一个果实。</p>\n<h1 id=\"绘制大鱼和小鱼\"><a href=\"#绘制大鱼和小鱼\" class=\"headerlink\" title=\"绘制大鱼和小鱼\"></a>绘制大鱼和小鱼</h1><p>大鱼和小鱼都是一个类，它的属性有：坐标、旋转角度、尾巴摆动时间间隔、眨眼睛时间间隔、身体图片数组….等等</p>\n<p>先把大鱼绘制出来，用canvas的drawImage方法。</p>\n<p>比较难的是大鱼的动画，大鱼会随着鼠标移动而移动的动画，这里定义了两个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lerpAngle</span>(<span class=\"params\">a, b, t</span>) </span>&#123;     <span class=\"comment\">//计算每一帧旋转的角度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> d = b - a;</div><div class=\"line\">    <span class=\"keyword\">if</span> (d &gt; <span class=\"built_in\">Math</span>.PI) d = d - <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI;</div><div class=\"line\">    <span class=\"keyword\">if</span> (d &lt; -<span class=\"built_in\">Math</span>.PI) d = d + <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + d * t;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lerpDistance</span>(<span class=\"params\">aim, cur, ratio</span>) </span>&#123;   <span class=\"comment\">//aim：目标 cur：当前 ratio：百分比  计算每一帧趋近的距离</span></div><div class=\"line\">    <span class=\"keyword\">var</span> delta = cur - aim;</div><div class=\"line\">    <span class=\"keyword\">return</span> aim + delta * ratio</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">this</span>.momTailTimer += diffframetime;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.momTailTimer &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.momTailIndex = (<span class=\"keyword\">this</span>.momTailIndex + <span class=\"number\">1</span>) % <span class=\"number\">8</span>;      <span class=\"comment\">//根据时间间隔改变尾巴图片</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.momTailTimer %= <span class=\"number\">50</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>lerpDistance 是计算每一帧大鱼趋紧到鼠标的距离。</li>\n<li>lerpAngle  用来计算大鱼每一帧向鼠标旋转的角度。 定义这两个函数，让大鱼动起来比较平滑。</li>\n</ul>\n<p>获得了一个角度之后，怎么让大鱼旋转起来呢？这里又需要用到几个API了。</p>\n<ul>\n<li>ctx1.save();  //建议每次绘制都使用save和restore，可以避免定义样式，发生冲突。</li>\n<li>ctx1.translate(this.x, this.y);      //把原点变成(this.x , this.y);</li>\n<li>ctx1.rotate(this.angle);     //根据原点顺时针旋转一个角度</li>\n</ul>\n<p>绘制小鱼跟大鱼是一样的，不做详述。但是需要注意的是绘制小鱼的时候有个判断，当小鱼的颜色变白的时候，游戏结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.babyBodyTimer += diffframetime;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.babyBodyTimer &gt; <span class=\"number\">550</span>)&#123;   <span class=\"comment\">//身体图片变化的计数器 &gt; 550ms</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.babyBodyIndex += <span class=\"number\">1</span>;     <span class=\"comment\">//身体图片变淡</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.babyBodyTimer %= <span class=\"number\">550</span>;</div><div class=\"line\">    scoreOb.strength = ((<span class=\"number\">20</span> - <span class=\"keyword\">this</span>.babyBodyIndex)/<span class=\"number\">2</span>).toFixed(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.babyBodyIndex &gt; <span class=\"number\">19</span>)&#123;   <span class=\"comment\">//如果身体变成白色，game over；</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.babyBodyIndex = <span class=\"number\">19</span>;</div><div class=\"line\">        scoreOb.gameOver = <span class=\"literal\">true</span>;</div><div class=\"line\">        can1.style.cursor = <span class=\"string\">\"pointer\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"大鱼吃果实\"><a href=\"#大鱼吃果实\" class=\"headerlink\" title=\"大鱼吃果实\"></a>大鱼吃果实</h1><p>大鱼吃果实是根据距离来判断定的，如果大鱼和果实的距离小于30，则让果实消失，并且出现白色圆环，并且分值有一定的变化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">jzk.momEatFruit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     <span class=\"comment\">//判断果实和大鱼之间的距离，小于30说明被吃掉</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; fruitOb.num; i++ )&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(fruitOb.alive[i] &amp;&amp; fruitOb.grow[i])&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> len = calLength2(fruitOb.x[i], fruitOb.y[i], momOb.x, momOb.y);</div><div class=\"line\">            <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">30</span>)&#123;</div><div class=\"line\">                fruitOb.dead(i);    <span class=\"comment\">//如果距离小于30，则被吃掉</span></div><div class=\"line\">                waveOb.born(i);     <span class=\"comment\">//吃掉的时候，产生圆圈</span></div><div class=\"line\">                scoreOb.fruitNum ++;    <span class=\"comment\">//吃到的果实数量＋1</span></div><div class=\"line\">                momOb.momBodyIndex = momOb.momBodyIndex == <span class=\"number\">7</span> ? momOb.momBodyIndex : (momOb.momBodyIndex + <span class=\"number\">1</span>);      <span class=\"comment\">//大鱼的身体颜色红</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(fruitOb.type[i] == <span class=\"string\">'blue'</span>)&#123;</div><div class=\"line\">                    scoreOb.doubleNum ++;  <span class=\"comment\">//吃到蓝色果实，倍数＋1</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中有一个calLength2函数，使用来计算两个点之间的距离的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calLength2</span>(<span class=\"params\">x1, y1, x2, y2</span>) </span>&#123;    <span class=\"comment\">//计算两个点之间的距离，，， 先求平方和，再开平方</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">Math</span>.pow(x1 - x2, <span class=\"number\">2</span>) + <span class=\"built_in\">Math</span>.pow(y1 - y2, <span class=\"number\">2</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大鱼吃到果实的时候，会产生一个白色的圆圈，这个效果怎么实现呢？</p>\n<p>首先，我们定义一个waveObject类，它的属性有：坐标、数量、半径、使用状态。它的方法有：初始化、绘制和出生。</p>\n<p>我们来看一下绘制圆圈的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt; <span class=\"keyword\">this</span>.num; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.status[i])&#123;     <span class=\"comment\">//如果圆圈是使用状态，则绘制圆圈</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.r[i] += diffframetime * <span class=\"number\">0.04</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.r[i] &gt; <span class=\"number\">60</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.status[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> alpha = <span class=\"number\">1</span> - <span class=\"keyword\">this</span>.r[i] / <span class=\"number\">60</span>;</div><div class=\"line\">        ctx1.strokeStyle = <span class=\"string\">\"rgba(255, 255, 255, \"</span>+ alpha +<span class=\"string\">\")\"</span>;</div><div class=\"line\">        ctx1.beginPath();</div><div class=\"line\">        ctx1.arc(<span class=\"keyword\">this</span>.x[i], <span class=\"keyword\">this</span>.y[i], <span class=\"keyword\">this</span>.r[i], <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);   <span class=\"comment\">//画圆，</span></div><div class=\"line\">        ctx1.stroke();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一帧一帧的画每一个圆，圆的半径逐渐增大，透明度逐渐减小，直到半径大于60的时候，把状态设为false，让其回归物体池中。</p>\n<p>这里又用到了一个新的方法：ctx1.arc(x,y,r,deg);   //画圆，x,y是中心圆点，r是半径，deg是角度，360度就是一个整圆。</p>\n<p>再来看一下出生的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"keyword\">this</span>.num; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.status[i])&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.status[i] = <span class=\"literal\">true</span>;   <span class=\"comment\">//把圆圈状态设为使用状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.x[i] = fruitOb.x[index];</div><div class=\"line\">        <span class=\"keyword\">this</span>.y[i] = fruitOb.y[index];</div><div class=\"line\">        <span class=\"keyword\">this</span>.r[i] = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   <span class=\"comment\">//找到一个未使用的圆圈，就结束。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>圆圈出生的坐标就是被吃果实的坐标。</p>\n<h1 id=\"大鱼喂小鱼\"><a href=\"#大鱼喂小鱼\" class=\"headerlink\" title=\"大鱼喂小鱼\"></a>大鱼喂小鱼</h1><p>大鱼喂小鱼同上，不再详述，这里喂小鱼之后，大鱼身体变白，小鱼随果实数量相应增多，另外需要注意的是，此时产生圆圈的坐标是小鱼的坐标。</p>\n<h1 id=\"游戏分值计算\"><a href=\"#游戏分值计算\" class=\"headerlink\" title=\"游戏分值计算\"></a>游戏分值计算</h1><p>定义一个数据类，它的属性有：吃到的果实数量、倍数、总分、力量值、游戏状态（是否结束）等；方法有：初始化、绘制分数。</p>\n<p>这里我们需要在画布上绘制文字，又用到了新的API：</p>\n<ul>\n<li>ctx1.save();</li>\n<li>ctx1.font = ‘40px verdana’;   定义文字的大小和字体；</li>\n<li>ctx1.shadowBlur = 10;    定义文字的阴影宽度</li>\n<li>ctx1.shadowColor = “white”;   定义文字阴影的颜色；</li>\n<li>ctx1.fillStyle = “rgba(255, 255, 255, “+ this.alpha +”)”;  定义文字的颜色（rgba,a代表透明度）</li>\n<li>ctx1.fillText(“GAME OVER”, canWid <em> 0.5, canHei </em> 0.5 - 25);   绘制文字，第一个参数是字符串，支持表达式，后两个参数是坐标值。</li>\n<li>ctx1.font = ‘25px verdana’;</li>\n<li>ctx1.fillText(“CLICK TO RESTART”, canWid <em> 0.5, canHei </em> 0.5 + 25);</li>\n<li>ctx1.restore();</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>好啦，整个游戏的制作过程就分享完了，做的过程中有遇到过很多问题，不过都一一解决了，加深了很多以前模糊的概念，也学到了很多新的知识，比如使用rgba()来一起控制颜色和透明度，以前还真没用到过。</p>\n<p>这个游戏本身功能比较简单，但是动画还算比较酷炫。这也算是一个比较基本的动画基础框架了，而比较不容易理解的地方也有很多，比如求趋近的角度函数<code>lerpAngle(a,b,c)</code>，还有<code>Math.atan2()</code>这个函数，等等。 欢迎大家提出bug或者改进建议～～～</p>\n<hr>"},{"title":"React入门最好的实例－TodoList","date":"2016-05-23T14:11:51.000Z","toc":true,"_content":"\n--------------------------------------------------------------------------------\n\n\n> React 的核心思想是：封装组件，各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。\n\n\n最近前端界闹的沸沸扬扬的技术当属`react`了，加上项目需要等等原因，自己也决定花些时间来好好认识下这个东西。然后学习的时候顺便花时间写了一个demo：`react-todos`， 为了提起兴趣，你可以先[点这里去看react-todo](http://luckykun.com/work/2016-05-08/react-todo-demo.html)\n\n首先react值得拍手称赞的是它所有的开发都基于`组件（component）`，然后组件和组件之间通过props传递方法，每个组件都有一个`状态（state）`，当某个方法改变了这个状态值时，整个组件就会`重绘`，从而达到刷新。另外，说到重绘就要提到`虚拟dom`了，就是用js模拟dom结构，等整个组件的dom更新完毕，才渲染到页面，简单来说只更新了相比之前改变了的部分，而不是全部刷新，所以效率很高。\n<!--more-->\n\n# 项目初始化\n大家先新建一个项目文件夹，在里面建一个项目信息的文件`package.json`:\n\n```js\n{\n    \"name\": \"react-todos\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    },\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"dependencies\": {\n        \"react\": \"^0.13.3\",\n        \"sass\": \"^0.5.0\"\n    },\n    \"devDependencies\": {\n        \"babel-core\": \"^5.5.8\",\n        \"babel-loader\": \"^5.1.4\",\n        \"css-loader\": \"^0.14.5\",\n        \"file-loader\": \"^0.8.4\",\n        \"jsx-loader\": \"^0.13.2\",\n        \"node-libs-browser\": \"^0.5.2\",\n        \"node-sass\": \"^3.2.0\",\n        \"sass-loader\": \"^1.0.2\",\n        \"style-loader\": \"^0.12.3\",\n        \"url-loader\": \"^0.5.6\",\n        \"webpack\": \"^1.9.11\"\n    }\n}\n```\n\n建好之后，运行命令：\n\n```js\nnpm install\n```\n\n安装项目依赖的所有模块。安装好之后，另外还有一点，项目数据是存储在本地浏览器的，所以我找到一个小模块用来操作localStorage，它的原理就是，通过将数据格式化成JSON字符串进行存储，使用的时候就解析JSON字符串。他的代码[点这里看localDb](https://github.com/luckykun/react-demo/tree/master/node_modules/localDb)可以看到，你可以复制一份，放在node_modules的文件夹内。\n\n# webpack配置\n项目使用的技术方案是：`webpack＋react＋es6`。关于es6的文章，我之前简单的介绍过，可以[点这里去看es6](http://luckykun.com/work/2016-05-10/es6-feature.html)，关于webpack的学习，我这里不详述了，看以后有时间再出篇文章吧。在项目文件夹下新建一个`webpack.config.js`：\n\n```js\n'use strict';\nmodule.exports = {\n    entry: [\n        \"./src/entry.js\"\n    ],\n    output: {\n        path: './out/',\n        filename: \"bundle.js\"\n    },\n    externals: {\n        'react': 'React'\n    },\n    module: {\n        loaders: [\n            { test: /\\.js$/, loader: \"jsx!babel\", include: /src/},\n            { test: /\\.css$/, loader: \"style!css\"},\n            { test: /\\.scss$/, loader: \"style!css!sass\"},\n            { test: /\\.(png|jpg)$/, loader: 'url?limit=8192'}\n        ]\n    }\n};\n```\n\n上面的文件可以看到：入口文件是在src文件夹里的entry.js，然后输出文件放在out文件夹的bundle.js里。externals属性是告诉webpack当遇到require('react')的时候，不去处理并且默认为全局的React变量。这样子，我们就需要在index.html单独用src去加载js。最后看看配置的loaders：\n- 因为我们js文件会使用jsx和es6的语法，所以使用`jsx-loader`和`babel-loader`来编译js文件。\n- scss文件使用`sass-loader`编译成css文件。\n- 写的时候可以省略-loader，多个loader使用`!`连接。\n\n# 项目目录\n先来看一下项目的目录结构，最重要的就是src目录：\n- `index.html`是项目的入口页面。\n- `components`文件夹存放项目拆分出来的各个组件文件。\n- `vendor`文件夹存放项目依赖的框架，这里只有react。\n\n# index.html和entry.js\n先来看index.html：\n\n```js\n<body>\n    <header>\n        <h1 class=\"todo-title\">React-Todos</h1>\n    </header>\n    <div class=\"container todo-container\">\n        <div id=\"app\"></div>\n    </div>\n    <script src=\"./src/vendor/react.min.js\"></script>\n    <script src=\"./out/bundle.js\"></script>\n</body>\n```\n\nentry.js :\n\n```js\n'use strict';\nrequire('./styles/main.scss');    // 引入样式表\nrequire('./components/App');     // 引入组件\n```\n\nwebpack会将入口文件进行合并和整理，最后输出一个bundle.js，所以所有的逻辑都在这个js文件中，因此在index.html中，只需要引入react框架和bundle.js就好了。\n\n# 分析组件\n这个todo的项目，我们可以分为三个部分：头部，中间部分，尾部。那我们就来逐一的分析一下这些组件：\n\n## App\n\n```js\n'use strict';\nimport React from 'react';\nimport LocalDb from 'localDb';\nimport TodoHeader from './TodoHeader.js';\nimport TodoMain from './TodoMain.js';\nimport TodoFooter from './TodoFooter.js'\n//es6写法\nclass App extends React.Component { //定义组件，继承父类\n    constructor() { //定义App类的构造函数\n        super(); //调用父类的构造函数\n        this.db = new LocalDb('ReactDemo');\n        this.state = { //定义组件状态\n            todos: this.db.get('todos') || [],\n            isAllChecked: false\n        };\n    }\n    // 判断是否所有任务的状态都完成，同步底部的全选框\n    allChecked() {\n        let isAllChecked = false;\n        if (this.state.todos.every(todo => todo.isDone)) {\n            isAllChecked = true;\n        }\n        this.setState({   //改变状态，组件重绘\n            todos: this.state.todos,\n            isAllChecked: isAllChecked\n        });\n    }\n    // 添加任务，是传递给Header组件的方法\n    addTodo(todoItem){\n        this.state.todos.push(todoItem);  //todo列表\n        this.db.set('todos', this.state.todos);\n        this.allChecked();\n    }\n    // 删除当前的任务，传递给TodoItem的方法\n    deleteTodo(index){\n        this.state.todos.splice(index, 1);\n        this.setState({todos: this.state.todos});  //改变状态\n        this.db.set('todos', this.state.todos);\n    }\n    // 清除已完成的任务，传递给Footer组件的方法\n    clearDone(){\n        let todos = this.state.todos.filter(todo => !todo.isDone);   //过滤掉数组中todo.isDone为true的item。\n        this.setState({\n            todos: todos,\n            isAllChecked: false\n        });\n        this.db.set('todos', todos);\n    }\n    // 改变任务状态，传递给TodoItem和Footer组件的方法\n    changeTodoState(index, isDone, isChangeAll=false){   //初始化isChangeAll为false\n        if(isChangeAll){     //全部操作\n            this.setState({\n                todos: this.state.todos.map((todo) => {\n                    todo.isDone = isDone;\n                    return todo;\n                }),\n                isAllChecked: isDone\n            });\n        }else{   //操作其中一个todo\n            this.state.todos[index].isDone = isDone;\n            this.allChecked();\n        }\n        this.db.set('todos', this.state.todos);\n    }\n    //组件渲染方法\n    render() {\n        let info = {\n            isAllChecked: this.state.isAllChecked,\n            todoCount: this.state.todos.length || 0,\n            todoDoneCount: (this.state.todos && this.state.todos.filter((todo) => todo.isDone)).length || 0\n        };\n        return (\n            <div className=\"todo-wrap\">\n                <TodoHeader addTodo={this.addTodo.bind(this)} />\n                <TodoMain todos={this.state.todos} deleteTodo={this.deleteTodo.bind(this)} changeTodoState={this.changeTodoState.bind(this)} />\n                <TodoFooter {...info} changeTodoState={this.changeTodoState.bind(this)} clearDone={this.clearDone.bind(this)} />\n            </div>\n        );\n    }\n}\nReact.render(<App/>, document.getElementById('app'));\n```\n\n我们知道React的主流思想就是，所有的state状态和方法都是由父组件控制，然后通过props传递给子组件，形成一个单方向的数据链路，保持各组件的状态一致。所以我们在这个父组件App上，看的东西稍微有点多。一点点来看：\n- 它采用es6的语法来创建了一个`继承React.Components的App类`。\n- 然后在构造函数里定义了自己的`状态state`。\n- 然后定义了很多方法，后面通过`props传递给子组件`。\n- 最后定义组件自己的渲染方法`render`。\n\n### App状态\n\n```js\nthis.state = { //定义组件状态\n    todos: this.db.get('todos') || [],\n    isAllChecked: false\n};\n```\n\n在App组件的构造函数里，我们初始化了组件的state，分别有两个，一个是todos的列表，一个是所有的todos是否全选的状态。在渲染的时候，我们会把状态传递到子组件中，如果子组件的某一个方法让状态发生了改变，那么整个组件就会进行重绘。\n\n### App的方法\n\n```js\n// 判断是否所有任务的状态都完成，同步底部的全选框\nallChecked() {}\n// 添加任务，是传递给Header组件的方法\naddTodo(todoItem) {}\n// 删除当前的任务，传递给TodoItem的方法\ndeleteTodo(index) {}\n// 清除已完成的任务，传递给Footer组件的方法\nclearDone() {}\n// 改变任务状态，传递给TodoItem和Footer组件的方法\nchangeTodoState(index, isDone, isChangeAll=false) {}\n//组件渲染方法\nrender() {\n    let info = {\n        isAllChecked: this.state.isAllChecked,\n        todoCount: this.state.todos.length || 0,\n        todoDoneCount: (this.state.todos && this.state.todos.filter((todo) => todo.isDone)).length || 0\n    };\n    return (\n        <div className=\"todo-wrap\">\n            <TodoHeader addTodo={this.addTodo.bind(this)} />\n            <TodoMain todos={this.state.todos} deleteTodo={this.deleteTodo.bind(this)} changeTodoState={this.changeTodoState.bind(this)} />\n            <TodoFooter {...info} changeTodoState={this.changeTodoState.bind(this)} clearDone={this.clearDone.bind(this)} />\n        </div>\n    );\n}\n```\n\n从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。上面的`TodoHeader`是用来输入任务的地方，中间的`TodoMain`是用来展示任务列表的, 下面的`TodoFooter`提供一些特殊的方法，比如全选、删除等。\n\n另外，上面省去function创建函数的方法，是es6的一种语法，关于es6，我之前总结过一篇文章[点这里去看es6](http://luckykun.com/work/2016-05-10/es6-feature.html)。\n\nApp组件定义的方法，会在渲染的时候传递给子组件，比如TodoHeader组件：\n\n```js\n<TodoHeader addTodo={this.addTodo.bind(this)} />\n```\n\n说明：\n- 通过props传递子组件需要的值和方法。\n- 传递方法时一定要bind(this)，不然内部this会指向不正确。\n- 子组件的标签使用的时候一定要使用`/`闭合起来。\n- ES6语法，spread操作符让代码简洁很多，如上述代码中的TodoFooter:\n\n  ```js\n    <TodoFooter {...info} />\n    //如果不使用spread操作符，就要这样写：\n    <TodoFooter isAllchecked={info.isAllChecked} todoCount={info.todoCount}     todoDoneCount={info.todoDoneCount}>\n  ```\n\n### 渲染App\n\n```js\nReact.render(<App/>, document.getElementById('app'));\n```\n\n把上面的App组件的内容渲染到id为'app'的dom元素里。\n\n然后我们再简单看一下分解出来的三个组件：`TodoHeader`, `TodoMain`, `TodoFooter`。\n\n## TodoHeader组件\n\n```js\nclass TodoHeader extends React.Component {\n    // 绑定键盘回车事件，添加新任务\n    handlerKeyUp(e) {\n        if(e.keyCode == 13) {\n            let value = e.target.value;\n            if(!value) return false;\n            let newTodoItem = {\n                text: value,\n                isDone: false\n            };\n            e.target.value = '';\n            this.props.addTodo(newTodoItem);   //使用props调用App组件传过来的方法。\n        }\n    }\n    render() {\n        return (\n            <div className=\"todo-header\">\n                <input onKeyUp={this.handlerKeyUp.bind(this)} type=\"text\" placeholder=\"请输入你的任务名称，按回车键确认\"/>\n            </div>\n        )\n    }\n}\nexport default TodoHeader;   //ES6语法，导出模块，上文提到的es6文章中有讲解\n```\n\nTodoHeader组件的创建方法和App组件的创建方法一样，内部方法就少了很多了，这里就定义了一个监听键盘的方法，绑定到了输入框的keyUp事件上，敲击回车键的时候就会调用父组件传过来的`addTodo()方法`。\n\n## TodoMain组件\n\n```js\nclass TodoMain extends React.Component {\n    render() {\n        if(this.props.todos.length == 0) {\n            return (\n                <div className=\"todo-empty\">恭喜您，目前没有待办任务！</div>\n            )\n        } else {\n            return (\n                <ul className=\"todo-main\">\n                    {\n                        this.props.todos.map((todo, index) => {\n                            //{...this.props} 用来传递TodoMain的todos属性和delete、change方法。\n                            return <TodoItem text={todo.text} isDone={todo.isDone} index={index} {...this.props}/>\n                        })\n                    }\n                </ul>\n            )\n        }\n    }\n}\n```\n\nTodoMain组件主要是为了把传递过来的todos列表遍历显示出来，而每一个list又是一个TodoItem组件。这里又用到了spread操作符`{...this.props}`，代码中也做了注释，可以洗洗品味一下。\n\n## TodoItem组件\n\n```js\nclass TodoItem extends React.Component {\n    //改变任务是否已完成的状态\n    handlerChange() {\n        let isDone = !this.props.isDone;\n        this.props.changeTodoState(this.props.index, isDone);\n    }\n    // 鼠标移入事件\n    handlerMouseOver() {\n        React.findDOMNode(this).style.background = '#eee';\n        React.findDOMNode(this.refs.delButton).style.display = 'inline-block';\n    }\n    handlerMouseOut() {\n        React.findDOMNode(this).style.background = '#fff';\n        React.findDOMNode(this.refs.delButton).style.display = 'none';\n    }\n    // 删除当前任务\n    handlerDelete(){\n        this.props.deleteTodo(this.props.index);\n    }\n    render() {\n        let className = this.props.isDone ? 'task-done' : '';\n        return (\n            <li onMouseOver={this.handlerMouseOver.bind(this)} onMouseOut={this.handlerMouseOut.bind(this)}>\n                <label>\n                <input type=\"checkbox\" checked={this.props.isDone} onChange={this.handlerChange.bind(this)} />\n                <span className={className}>{this.props.text}</span>\n                </label>\n                <button ref=\"delButton\" className=\"btn btn-danger\" onClick={this.handlerDelete.bind(this)}>删除</button>\n            </li>\n        )\n    }\n}\n```\n\nTodoItem有这四个方法，我们主要看看新出现的几点：\n- `React.findDOMNode(this)`可以获取当前这个组件标签。\n- 在元素中定义`ref=xxx`属性，就可以通过`React.findDOMNode(this.refs.xxx)`获取到这个元素。\n- 给元素定义class类名的时候要使用`className`。\n\n## TodoFooter组件\n\n```js\nclass TodoFooter extends React.Component {\n    //改变任务是否已完成的状态\n    handlerSelectAll(e) {\n        this.props.changeTodoState(null, e.target.checked, true);    // true表示全部操作。\n    }\n    //删除全部已完成的任务\n    handlerDeleteDone() {\n        this.props.clearDone();\n    }\n    render() {\n        return (\n            <div className=\"todo-footer\">\n            <label>\n                <input type=\"checkbox\" checked={this.props.isAllChecked} onChange={this.handlerSelectAll.bind(this)} />全选\n            </label>\n            <span><span className=\"text-success\">已完成{this.props.todoDoneCount}</span> / 全部{this.props.todoCount}</span>\n            <button className=\"btn btn-danger\" onClick={this.handlerDeleteDone.bind(this)}>清除已完成任务</button>\n            </div>\n        )\n    }\n}\n```\n\ntodoFooter组件主要用来批量更改状态和清除已完成的任务，还要显示任务完成情况，所以代码很简单了。\n\n# 总结\n\n\n`webpack 命令行的几种基本命令: `\n\n```js\n$ webpack // 最基本的启动webpack方法\n$ webpack -w // 提供watch方法，实时进行打包更新\n$ webpack -p // 对打包后的文件进行压缩，提供production\n$ webpack -p -w // 对打包后的文件进行压缩，并且实时监听\n$ webpack -d // 提供source map，方便调试。\n```\n\n回过头来再看看这个demo的实现过程，react组件化的思想让我们编写代码的时候思维清晰，便于阅读。我们通过父组件来控制状态，并通过props传递，来保证组件内的状态一致，并且我们可以清晰的看到某一个方法该由谁来维护。这是一种全新的前端编码体验，相信以后会成为主流。\n\n另外，我们看到代码中，html直接嵌到js中了，这就是React提出的一种叫JSX的语法。其实入门react本身还是很简单，只是很多人看到JSX和ES6的语法，就打了退堂鼓了，因为我们被代码分离\"洗脑\"太久了。其实，它们就好像是一堵墙，要是我们畏惧这个障碍止步不前，那么只能停留在原地，如果我们骨气勇气爬上去，才发现react的风景真的很优美！\n\n\n\n# 参考资料\n\n- [http://www.reqianduan.com/2297.html](http://www.reqianduan.com/2297.html)\n- [http://wiki.jikexueyuan.com/project/react-tutorial/](http://wiki.jikexueyuan.com/project/react-tutorial/)\n- [http://gank.io/post/564151c1f1df1210001c9161](http://gank.io/post/564151c1f1df1210001c9161)\n\n\n--------------------------------------------------------------------------------\n","source":"_posts/react-todo-study.md","raw":"---\ntitle: React入门最好的实例－TodoList\ndate: 2016-05-23T22:11:51.000Z\ncategories: 工作\ntags:\n  - react\n  - es6\n  - 教程\ntoc: true\n---\n\n--------------------------------------------------------------------------------\n\n\n> React 的核心思想是：封装组件，各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。\n\n\n最近前端界闹的沸沸扬扬的技术当属`react`了，加上项目需要等等原因，自己也决定花些时间来好好认识下这个东西。然后学习的时候顺便花时间写了一个demo：`react-todos`， 为了提起兴趣，你可以先[点这里去看react-todo](http://luckykun.com/work/2016-05-08/react-todo-demo.html)\n\n首先react值得拍手称赞的是它所有的开发都基于`组件（component）`，然后组件和组件之间通过props传递方法，每个组件都有一个`状态（state）`，当某个方法改变了这个状态值时，整个组件就会`重绘`，从而达到刷新。另外，说到重绘就要提到`虚拟dom`了，就是用js模拟dom结构，等整个组件的dom更新完毕，才渲染到页面，简单来说只更新了相比之前改变了的部分，而不是全部刷新，所以效率很高。\n<!--more-->\n\n# 项目初始化\n大家先新建一个项目文件夹，在里面建一个项目信息的文件`package.json`:\n\n```js\n{\n    \"name\": \"react-todos\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    },\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"dependencies\": {\n        \"react\": \"^0.13.3\",\n        \"sass\": \"^0.5.0\"\n    },\n    \"devDependencies\": {\n        \"babel-core\": \"^5.5.8\",\n        \"babel-loader\": \"^5.1.4\",\n        \"css-loader\": \"^0.14.5\",\n        \"file-loader\": \"^0.8.4\",\n        \"jsx-loader\": \"^0.13.2\",\n        \"node-libs-browser\": \"^0.5.2\",\n        \"node-sass\": \"^3.2.0\",\n        \"sass-loader\": \"^1.0.2\",\n        \"style-loader\": \"^0.12.3\",\n        \"url-loader\": \"^0.5.6\",\n        \"webpack\": \"^1.9.11\"\n    }\n}\n```\n\n建好之后，运行命令：\n\n```js\nnpm install\n```\n\n安装项目依赖的所有模块。安装好之后，另外还有一点，项目数据是存储在本地浏览器的，所以我找到一个小模块用来操作localStorage，它的原理就是，通过将数据格式化成JSON字符串进行存储，使用的时候就解析JSON字符串。他的代码[点这里看localDb](https://github.com/luckykun/react-demo/tree/master/node_modules/localDb)可以看到，你可以复制一份，放在node_modules的文件夹内。\n\n# webpack配置\n项目使用的技术方案是：`webpack＋react＋es6`。关于es6的文章，我之前简单的介绍过，可以[点这里去看es6](http://luckykun.com/work/2016-05-10/es6-feature.html)，关于webpack的学习，我这里不详述了，看以后有时间再出篇文章吧。在项目文件夹下新建一个`webpack.config.js`：\n\n```js\n'use strict';\nmodule.exports = {\n    entry: [\n        \"./src/entry.js\"\n    ],\n    output: {\n        path: './out/',\n        filename: \"bundle.js\"\n    },\n    externals: {\n        'react': 'React'\n    },\n    module: {\n        loaders: [\n            { test: /\\.js$/, loader: \"jsx!babel\", include: /src/},\n            { test: /\\.css$/, loader: \"style!css\"},\n            { test: /\\.scss$/, loader: \"style!css!sass\"},\n            { test: /\\.(png|jpg)$/, loader: 'url?limit=8192'}\n        ]\n    }\n};\n```\n\n上面的文件可以看到：入口文件是在src文件夹里的entry.js，然后输出文件放在out文件夹的bundle.js里。externals属性是告诉webpack当遇到require('react')的时候，不去处理并且默认为全局的React变量。这样子，我们就需要在index.html单独用src去加载js。最后看看配置的loaders：\n- 因为我们js文件会使用jsx和es6的语法，所以使用`jsx-loader`和`babel-loader`来编译js文件。\n- scss文件使用`sass-loader`编译成css文件。\n- 写的时候可以省略-loader，多个loader使用`!`连接。\n\n# 项目目录\n先来看一下项目的目录结构，最重要的就是src目录：\n- `index.html`是项目的入口页面。\n- `components`文件夹存放项目拆分出来的各个组件文件。\n- `vendor`文件夹存放项目依赖的框架，这里只有react。\n\n# index.html和entry.js\n先来看index.html：\n\n```js\n<body>\n    <header>\n        <h1 class=\"todo-title\">React-Todos</h1>\n    </header>\n    <div class=\"container todo-container\">\n        <div id=\"app\"></div>\n    </div>\n    <script src=\"./src/vendor/react.min.js\"></script>\n    <script src=\"./out/bundle.js\"></script>\n</body>\n```\n\nentry.js :\n\n```js\n'use strict';\nrequire('./styles/main.scss');    // 引入样式表\nrequire('./components/App');     // 引入组件\n```\n\nwebpack会将入口文件进行合并和整理，最后输出一个bundle.js，所以所有的逻辑都在这个js文件中，因此在index.html中，只需要引入react框架和bundle.js就好了。\n\n# 分析组件\n这个todo的项目，我们可以分为三个部分：头部，中间部分，尾部。那我们就来逐一的分析一下这些组件：\n\n## App\n\n```js\n'use strict';\nimport React from 'react';\nimport LocalDb from 'localDb';\nimport TodoHeader from './TodoHeader.js';\nimport TodoMain from './TodoMain.js';\nimport TodoFooter from './TodoFooter.js'\n//es6写法\nclass App extends React.Component { //定义组件，继承父类\n    constructor() { //定义App类的构造函数\n        super(); //调用父类的构造函数\n        this.db = new LocalDb('ReactDemo');\n        this.state = { //定义组件状态\n            todos: this.db.get('todos') || [],\n            isAllChecked: false\n        };\n    }\n    // 判断是否所有任务的状态都完成，同步底部的全选框\n    allChecked() {\n        let isAllChecked = false;\n        if (this.state.todos.every(todo => todo.isDone)) {\n            isAllChecked = true;\n        }\n        this.setState({   //改变状态，组件重绘\n            todos: this.state.todos,\n            isAllChecked: isAllChecked\n        });\n    }\n    // 添加任务，是传递给Header组件的方法\n    addTodo(todoItem){\n        this.state.todos.push(todoItem);  //todo列表\n        this.db.set('todos', this.state.todos);\n        this.allChecked();\n    }\n    // 删除当前的任务，传递给TodoItem的方法\n    deleteTodo(index){\n        this.state.todos.splice(index, 1);\n        this.setState({todos: this.state.todos});  //改变状态\n        this.db.set('todos', this.state.todos);\n    }\n    // 清除已完成的任务，传递给Footer组件的方法\n    clearDone(){\n        let todos = this.state.todos.filter(todo => !todo.isDone);   //过滤掉数组中todo.isDone为true的item。\n        this.setState({\n            todos: todos,\n            isAllChecked: false\n        });\n        this.db.set('todos', todos);\n    }\n    // 改变任务状态，传递给TodoItem和Footer组件的方法\n    changeTodoState(index, isDone, isChangeAll=false){   //初始化isChangeAll为false\n        if(isChangeAll){     //全部操作\n            this.setState({\n                todos: this.state.todos.map((todo) => {\n                    todo.isDone = isDone;\n                    return todo;\n                }),\n                isAllChecked: isDone\n            });\n        }else{   //操作其中一个todo\n            this.state.todos[index].isDone = isDone;\n            this.allChecked();\n        }\n        this.db.set('todos', this.state.todos);\n    }\n    //组件渲染方法\n    render() {\n        let info = {\n            isAllChecked: this.state.isAllChecked,\n            todoCount: this.state.todos.length || 0,\n            todoDoneCount: (this.state.todos && this.state.todos.filter((todo) => todo.isDone)).length || 0\n        };\n        return (\n            <div className=\"todo-wrap\">\n                <TodoHeader addTodo={this.addTodo.bind(this)} />\n                <TodoMain todos={this.state.todos} deleteTodo={this.deleteTodo.bind(this)} changeTodoState={this.changeTodoState.bind(this)} />\n                <TodoFooter {...info} changeTodoState={this.changeTodoState.bind(this)} clearDone={this.clearDone.bind(this)} />\n            </div>\n        );\n    }\n}\nReact.render(<App/>, document.getElementById('app'));\n```\n\n我们知道React的主流思想就是，所有的state状态和方法都是由父组件控制，然后通过props传递给子组件，形成一个单方向的数据链路，保持各组件的状态一致。所以我们在这个父组件App上，看的东西稍微有点多。一点点来看：\n- 它采用es6的语法来创建了一个`继承React.Components的App类`。\n- 然后在构造函数里定义了自己的`状态state`。\n- 然后定义了很多方法，后面通过`props传递给子组件`。\n- 最后定义组件自己的渲染方法`render`。\n\n### App状态\n\n```js\nthis.state = { //定义组件状态\n    todos: this.db.get('todos') || [],\n    isAllChecked: false\n};\n```\n\n在App组件的构造函数里，我们初始化了组件的state，分别有两个，一个是todos的列表，一个是所有的todos是否全选的状态。在渲染的时候，我们会把状态传递到子组件中，如果子组件的某一个方法让状态发生了改变，那么整个组件就会进行重绘。\n\n### App的方法\n\n```js\n// 判断是否所有任务的状态都完成，同步底部的全选框\nallChecked() {}\n// 添加任务，是传递给Header组件的方法\naddTodo(todoItem) {}\n// 删除当前的任务，传递给TodoItem的方法\ndeleteTodo(index) {}\n// 清除已完成的任务，传递给Footer组件的方法\nclearDone() {}\n// 改变任务状态，传递给TodoItem和Footer组件的方法\nchangeTodoState(index, isDone, isChangeAll=false) {}\n//组件渲染方法\nrender() {\n    let info = {\n        isAllChecked: this.state.isAllChecked,\n        todoCount: this.state.todos.length || 0,\n        todoDoneCount: (this.state.todos && this.state.todos.filter((todo) => todo.isDone)).length || 0\n    };\n    return (\n        <div className=\"todo-wrap\">\n            <TodoHeader addTodo={this.addTodo.bind(this)} />\n            <TodoMain todos={this.state.todos} deleteTodo={this.deleteTodo.bind(this)} changeTodoState={this.changeTodoState.bind(this)} />\n            <TodoFooter {...info} changeTodoState={this.changeTodoState.bind(this)} clearDone={this.clearDone.bind(this)} />\n        </div>\n    );\n}\n```\n\n从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。上面的`TodoHeader`是用来输入任务的地方，中间的`TodoMain`是用来展示任务列表的, 下面的`TodoFooter`提供一些特殊的方法，比如全选、删除等。\n\n另外，上面省去function创建函数的方法，是es6的一种语法，关于es6，我之前总结过一篇文章[点这里去看es6](http://luckykun.com/work/2016-05-10/es6-feature.html)。\n\nApp组件定义的方法，会在渲染的时候传递给子组件，比如TodoHeader组件：\n\n```js\n<TodoHeader addTodo={this.addTodo.bind(this)} />\n```\n\n说明：\n- 通过props传递子组件需要的值和方法。\n- 传递方法时一定要bind(this)，不然内部this会指向不正确。\n- 子组件的标签使用的时候一定要使用`/`闭合起来。\n- ES6语法，spread操作符让代码简洁很多，如上述代码中的TodoFooter:\n\n  ```js\n    <TodoFooter {...info} />\n    //如果不使用spread操作符，就要这样写：\n    <TodoFooter isAllchecked={info.isAllChecked} todoCount={info.todoCount}     todoDoneCount={info.todoDoneCount}>\n  ```\n\n### 渲染App\n\n```js\nReact.render(<App/>, document.getElementById('app'));\n```\n\n把上面的App组件的内容渲染到id为'app'的dom元素里。\n\n然后我们再简单看一下分解出来的三个组件：`TodoHeader`, `TodoMain`, `TodoFooter`。\n\n## TodoHeader组件\n\n```js\nclass TodoHeader extends React.Component {\n    // 绑定键盘回车事件，添加新任务\n    handlerKeyUp(e) {\n        if(e.keyCode == 13) {\n            let value = e.target.value;\n            if(!value) return false;\n            let newTodoItem = {\n                text: value,\n                isDone: false\n            };\n            e.target.value = '';\n            this.props.addTodo(newTodoItem);   //使用props调用App组件传过来的方法。\n        }\n    }\n    render() {\n        return (\n            <div className=\"todo-header\">\n                <input onKeyUp={this.handlerKeyUp.bind(this)} type=\"text\" placeholder=\"请输入你的任务名称，按回车键确认\"/>\n            </div>\n        )\n    }\n}\nexport default TodoHeader;   //ES6语法，导出模块，上文提到的es6文章中有讲解\n```\n\nTodoHeader组件的创建方法和App组件的创建方法一样，内部方法就少了很多了，这里就定义了一个监听键盘的方法，绑定到了输入框的keyUp事件上，敲击回车键的时候就会调用父组件传过来的`addTodo()方法`。\n\n## TodoMain组件\n\n```js\nclass TodoMain extends React.Component {\n    render() {\n        if(this.props.todos.length == 0) {\n            return (\n                <div className=\"todo-empty\">恭喜您，目前没有待办任务！</div>\n            )\n        } else {\n            return (\n                <ul className=\"todo-main\">\n                    {\n                        this.props.todos.map((todo, index) => {\n                            //{...this.props} 用来传递TodoMain的todos属性和delete、change方法。\n                            return <TodoItem text={todo.text} isDone={todo.isDone} index={index} {...this.props}/>\n                        })\n                    }\n                </ul>\n            )\n        }\n    }\n}\n```\n\nTodoMain组件主要是为了把传递过来的todos列表遍历显示出来，而每一个list又是一个TodoItem组件。这里又用到了spread操作符`{...this.props}`，代码中也做了注释，可以洗洗品味一下。\n\n## TodoItem组件\n\n```js\nclass TodoItem extends React.Component {\n    //改变任务是否已完成的状态\n    handlerChange() {\n        let isDone = !this.props.isDone;\n        this.props.changeTodoState(this.props.index, isDone);\n    }\n    // 鼠标移入事件\n    handlerMouseOver() {\n        React.findDOMNode(this).style.background = '#eee';\n        React.findDOMNode(this.refs.delButton).style.display = 'inline-block';\n    }\n    handlerMouseOut() {\n        React.findDOMNode(this).style.background = '#fff';\n        React.findDOMNode(this.refs.delButton).style.display = 'none';\n    }\n    // 删除当前任务\n    handlerDelete(){\n        this.props.deleteTodo(this.props.index);\n    }\n    render() {\n        let className = this.props.isDone ? 'task-done' : '';\n        return (\n            <li onMouseOver={this.handlerMouseOver.bind(this)} onMouseOut={this.handlerMouseOut.bind(this)}>\n                <label>\n                <input type=\"checkbox\" checked={this.props.isDone} onChange={this.handlerChange.bind(this)} />\n                <span className={className}>{this.props.text}</span>\n                </label>\n                <button ref=\"delButton\" className=\"btn btn-danger\" onClick={this.handlerDelete.bind(this)}>删除</button>\n            </li>\n        )\n    }\n}\n```\n\nTodoItem有这四个方法，我们主要看看新出现的几点：\n- `React.findDOMNode(this)`可以获取当前这个组件标签。\n- 在元素中定义`ref=xxx`属性，就可以通过`React.findDOMNode(this.refs.xxx)`获取到这个元素。\n- 给元素定义class类名的时候要使用`className`。\n\n## TodoFooter组件\n\n```js\nclass TodoFooter extends React.Component {\n    //改变任务是否已完成的状态\n    handlerSelectAll(e) {\n        this.props.changeTodoState(null, e.target.checked, true);    // true表示全部操作。\n    }\n    //删除全部已完成的任务\n    handlerDeleteDone() {\n        this.props.clearDone();\n    }\n    render() {\n        return (\n            <div className=\"todo-footer\">\n            <label>\n                <input type=\"checkbox\" checked={this.props.isAllChecked} onChange={this.handlerSelectAll.bind(this)} />全选\n            </label>\n            <span><span className=\"text-success\">已完成{this.props.todoDoneCount}</span> / 全部{this.props.todoCount}</span>\n            <button className=\"btn btn-danger\" onClick={this.handlerDeleteDone.bind(this)}>清除已完成任务</button>\n            </div>\n        )\n    }\n}\n```\n\ntodoFooter组件主要用来批量更改状态和清除已完成的任务，还要显示任务完成情况，所以代码很简单了。\n\n# 总结\n\n\n`webpack 命令行的几种基本命令: `\n\n```js\n$ webpack // 最基本的启动webpack方法\n$ webpack -w // 提供watch方法，实时进行打包更新\n$ webpack -p // 对打包后的文件进行压缩，提供production\n$ webpack -p -w // 对打包后的文件进行压缩，并且实时监听\n$ webpack -d // 提供source map，方便调试。\n```\n\n回过头来再看看这个demo的实现过程，react组件化的思想让我们编写代码的时候思维清晰，便于阅读。我们通过父组件来控制状态，并通过props传递，来保证组件内的状态一致，并且我们可以清晰的看到某一个方法该由谁来维护。这是一种全新的前端编码体验，相信以后会成为主流。\n\n另外，我们看到代码中，html直接嵌到js中了，这就是React提出的一种叫JSX的语法。其实入门react本身还是很简单，只是很多人看到JSX和ES6的语法，就打了退堂鼓了，因为我们被代码分离\"洗脑\"太久了。其实，它们就好像是一堵墙，要是我们畏惧这个障碍止步不前，那么只能停留在原地，如果我们骨气勇气爬上去，才发现react的风景真的很优美！\n\n\n\n# 参考资料\n\n- [http://www.reqianduan.com/2297.html](http://www.reqianduan.com/2297.html)\n- [http://wiki.jikexueyuan.com/project/react-tutorial/](http://wiki.jikexueyuan.com/project/react-tutorial/)\n- [http://gank.io/post/564151c1f1df1210001c9161](http://gank.io/post/564151c1f1df1210001c9161)\n\n\n--------------------------------------------------------------------------------\n","slug":"react-todo-study","published":1,"updated":"2016-10-11T16:29:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciul9pdbd000nu13g42jotawl","content":"<hr>\n<blockquote>\n<p>React 的核心思想是：封装组件，各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。</p>\n</blockquote>\n<p>最近前端界闹的沸沸扬扬的技术当属<code>react</code>了，加上项目需要等等原因，自己也决定花些时间来好好认识下这个东西。然后学习的时候顺便花时间写了一个demo：<code>react-todos</code>， 为了提起兴趣，你可以先<a href=\"http://luckykun.com/work/2016-05-08/react-todo-demo.html\" target=\"_blank\" rel=\"external\">点这里去看react-todo</a></p>\n<p>首先react值得拍手称赞的是它所有的开发都基于<code>组件（component）</code>，然后组件和组件之间通过props传递方法，每个组件都有一个<code>状态（state）</code>，当某个方法改变了这个状态值时，整个组件就会<code>重绘</code>，从而达到刷新。另外，说到重绘就要提到<code>虚拟dom</code>了，就是用js模拟dom结构，等整个组件的dom更新完毕，才渲染到页面，简单来说只更新了相比之前改变了的部分，而不是全部刷新，所以效率很高。<br><a id=\"more\"></a></p>\n<h1 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h1><p>大家先新建一个项目文件夹，在里面建一个项目信息的文件<code>package.json</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"react-todos\"</span>,</div><div class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">    <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^0.13.3\"</span>,</div><div class=\"line\">        <span class=\"string\">\"sass\"</span>: <span class=\"string\">\"^0.5.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^5.5.8\"</span>,</div><div class=\"line\">        <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^5.1.4\"</span>,</div><div class=\"line\">        <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.14.5\"</span>,</div><div class=\"line\">        <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^0.8.4\"</span>,</div><div class=\"line\">        <span class=\"string\">\"jsx-loader\"</span>: <span class=\"string\">\"^0.13.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"node-libs-browser\"</span>: <span class=\"string\">\"^0.5.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"node-sass\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"sass-loader\"</span>: <span class=\"string\">\"^1.0.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.12.3\"</span>,</div><div class=\"line\">        <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^0.5.6\"</span>,</div><div class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.9.11\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>建好之后，运行命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>安装项目依赖的所有模块。安装好之后，另外还有一点，项目数据是存储在本地浏览器的，所以我找到一个小模块用来操作localStorage，它的原理就是，通过将数据格式化成JSON字符串进行存储，使用的时候就解析JSON字符串。他的代码<a href=\"https://github.com/luckykun/react-demo/tree/master/node_modules/localDb\" target=\"_blank\" rel=\"external\">点这里看localDb</a>可以看到，你可以复制一份，放在node_modules的文件夹内。</p>\n<h1 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h1><p>项目使用的技术方案是：<code>webpack＋react＋es6</code>。关于es6的文章，我之前简单的介绍过，可以<a href=\"http://luckykun.com/work/2016-05-10/es6-feature.html\" target=\"_blank\" rel=\"external\">点这里去看es6</a>，关于webpack的学习，我这里不详述了，看以后有时间再出篇文章吧。在项目文件夹下新建一个<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    entry: [</div><div class=\"line\">        <span class=\"string\">\"./src/entry.js\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: <span class=\"string\">'./out/'</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    externals: &#123;</div><div class=\"line\">        <span class=\"string\">'react'</span>: <span class=\"string\">'React'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">\"jsx!babel\"</span>, include: <span class=\"regexp\">/src/</span>&#125;,</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: <span class=\"string\">\"style!css\"</span>&#125;,</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.scss$/</span>, loader: <span class=\"string\">\"style!css!sass\"</span>&#125;,</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.(png|jpg)$/</span>, loader: <span class=\"string\">'url?limit=8192'</span>&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面的文件可以看到：入口文件是在src文件夹里的entry.js，然后输出文件放在out文件夹的bundle.js里。externals属性是告诉webpack当遇到require(‘react’)的时候，不去处理并且默认为全局的React变量。这样子，我们就需要在index.html单独用src去加载js。最后看看配置的loaders：</p>\n<ul>\n<li>因为我们js文件会使用jsx和es6的语法，所以使用<code>jsx-loader</code>和<code>babel-loader</code>来编译js文件。</li>\n<li>scss文件使用<code>sass-loader</code>编译成css文件。</li>\n<li>写的时候可以省略-loader，多个loader使用<code>!</code>连接。</li>\n</ul>\n<h1 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h1><p>先来看一下项目的目录结构，最重要的就是src目录：</p>\n<ul>\n<li><code>index.html</code>是项目的入口页面。</li>\n<li><code>components</code>文件夹存放项目拆分出来的各个组件文件。</li>\n<li><code>vendor</code>文件夹存放项目依赖的框架，这里只有react。</li>\n</ul>\n<h1 id=\"index-html和entry-js\"><a href=\"#index-html和entry-js\" class=\"headerlink\" title=\"index.html和entry.js\"></a>index.html和entry.js</h1><p>先来看index.html：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;header&gt;</div><div class=\"line\">        &lt;h1 class=\"todo-title\"&gt;React-Todos&lt;/h1&gt;</div><div class=\"line\">    &lt;/header&gt;</div><div class=\"line\">    &lt;div class=\"container todo-container\"&gt;</div><div class=\"line\">        &lt;div id=\"app\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;script src=\"./src/vendor/react.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"./out/bundle.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<p>entry.js :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./styles/main.scss'</span>);    <span class=\"comment\">// 引入样式表</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./components/App'</span>);     <span class=\"comment\">// 引入组件</span></div></pre></td></tr></table></figure>\n<p>webpack会将入口文件进行合并和整理，最后输出一个bundle.js，所以所有的逻辑都在这个js文件中，因此在index.html中，只需要引入react框架和bundle.js就好了。</p>\n<h1 id=\"分析组件\"><a href=\"#分析组件\" class=\"headerlink\" title=\"分析组件\"></a>分析组件</h1><p>这个todo的项目，我们可以分为三个部分：头部，中间部分，尾部。那我们就来逐一的分析一下这些组件：</p>\n<h2 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> LocalDb <span class=\"keyword\">from</span> <span class=\"string\">'localDb'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> TodoHeader <span class=\"keyword\">from</span> <span class=\"string\">'./TodoHeader.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> TodoMain <span class=\"keyword\">from</span> <span class=\"string\">'./TodoMain.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> TodoFooter <span class=\"keyword\">from</span> <span class=\"string\">'./TodoFooter.js'</span></div><div class=\"line\"><span class=\"comment\">//es6写法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123; <span class=\"comment\">//定义组件，继承父类</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123; <span class=\"comment\">//定义App类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">super</span>(); <span class=\"comment\">//调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.db = <span class=\"keyword\">new</span> LocalDb(<span class=\"string\">'ReactDemo'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123; <span class=\"comment\">//定义组件状态</span></div><div class=\"line\">            todos: <span class=\"keyword\">this</span>.db.get(<span class=\"string\">'todos'</span>) || [],</div><div class=\"line\">            isAllChecked: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 判断是否所有任务的状态都完成，同步底部的全选框</span></div><div class=\"line\">    allChecked() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> isAllChecked = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.todos.every(todo =&gt; todo.isDone)) &#123;</div><div class=\"line\">            isAllChecked = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;   <span class=\"comment\">//改变状态，组件重绘</span></div><div class=\"line\">            todos: <span class=\"keyword\">this</span>.state.todos,</div><div class=\"line\">            isAllChecked: isAllChecked</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 添加任务，是传递给Header组件的方法</span></div><div class=\"line\">    addTodo(todoItem)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.todos.push(todoItem);  <span class=\"comment\">//todo列表</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, <span class=\"keyword\">this</span>.state.todos);</div><div class=\"line\">        <span class=\"keyword\">this</span>.allChecked();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 删除当前的任务，传递给TodoItem的方法</span></div><div class=\"line\">    deleteTodo(index)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.todos.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;todos: <span class=\"keyword\">this</span>.state.todos&#125;);  <span class=\"comment\">//改变状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, <span class=\"keyword\">this</span>.state.todos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 清除已完成的任务，传递给Footer组件的方法</span></div><div class=\"line\">    clearDone()&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> todos = <span class=\"keyword\">this</span>.state.todos.filter(todo =&gt; !todo.isDone);   <span class=\"comment\">//过滤掉数组中todo.isDone为true的item。</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            todos: todos,</div><div class=\"line\">            isAllChecked: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, todos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 改变任务状态，传递给TodoItem和Footer组件的方法</span></div><div class=\"line\">    changeTodoState(index, isDone, isChangeAll=<span class=\"literal\">false</span>)&#123;   <span class=\"comment\">//初始化isChangeAll为false</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(isChangeAll)&#123;     <span class=\"comment\">//全部操作</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                todos: <span class=\"keyword\">this</span>.state.todos.map((todo) =&gt; &#123;</div><div class=\"line\">                    todo.isDone = isDone;</div><div class=\"line\">                    <span class=\"keyword\">return</span> todo;</div><div class=\"line\">                &#125;),</div><div class=\"line\">                isAllChecked: isDone</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//操作其中一个todo</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.state.todos[index].isDone = isDone;</div><div class=\"line\">            <span class=\"keyword\">this</span>.allChecked();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, <span class=\"keyword\">this</span>.state.todos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//组件渲染方法</span></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> info = &#123;</div><div class=\"line\">            isAllChecked: <span class=\"keyword\">this</span>.state.isAllChecked,</div><div class=\"line\">            todoCount: <span class=\"keyword\">this</span>.state.todos.length || <span class=\"number\">0</span>,</div><div class=\"line\">            todoDoneCount: (<span class=\"keyword\">this</span>.state.todos &amp;&amp; <span class=\"keyword\">this</span>.state.todos.filter((todo) =&gt; todo.isDone)).length || <span class=\"number\">0</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div className=\"todo-wrap\"&gt;</div><div class=\"line\">                &lt;TodoHeader addTodo=&#123;this.addTodo.bind(this)&#125; /&gt;</div><div class=\"line\">                &lt;TodoMain todos=&#123;this.state.todos&#125; deleteTodo=&#123;this.deleteTodo.bind(this)&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; /&gt;</div><div class=\"line\">                &lt;TodoFooter &#123;...info&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; clearDone=&#123;this.clearDone.bind(this)&#125; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">React.render(&lt;App/&gt;, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<p>我们知道React的主流思想就是，所有的state状态和方法都是由父组件控制，然后通过props传递给子组件，形成一个单方向的数据链路，保持各组件的状态一致。所以我们在这个父组件App上，看的东西稍微有点多。一点点来看：</p>\n<ul>\n<li>它采用es6的语法来创建了一个<code>继承React.Components的App类</code>。</li>\n<li>然后在构造函数里定义了自己的<code>状态state</code>。</li>\n<li>然后定义了很多方法，后面通过<code>props传递给子组件</code>。</li>\n<li>最后定义组件自己的渲染方法<code>render</code>。</li>\n</ul>\n<h3 id=\"App状态\"><a href=\"#App状态\" class=\"headerlink\" title=\"App状态\"></a>App状态</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.state = &#123; <span class=\"comment\">//定义组件状态</span></div><div class=\"line\">    todos: <span class=\"keyword\">this</span>.db.get(<span class=\"string\">'todos'</span>) || [],</div><div class=\"line\">    isAllChecked: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在App组件的构造函数里，我们初始化了组件的state，分别有两个，一个是todos的列表，一个是所有的todos是否全选的状态。在渲染的时候，我们会把状态传递到子组件中，如果子组件的某一个方法让状态发生了改变，那么整个组件就会进行重绘。</p>\n<h3 id=\"App的方法\"><a href=\"#App的方法\" class=\"headerlink\" title=\"App的方法\"></a>App的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断是否所有任务的状态都完成，同步底部的全选框</span></div><div class=\"line\">allChecked() &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 添加任务，是传递给Header组件的方法</span></div><div class=\"line\">addTodo(todoItem) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 删除当前的任务，传递给TodoItem的方法</span></div><div class=\"line\">deleteTodo(index) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 清除已完成的任务，传递给Footer组件的方法</span></div><div class=\"line\">clearDone() &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 改变任务状态，传递给TodoItem和Footer组件的方法</span></div><div class=\"line\">changeTodoState(index, isDone, isChangeAll=<span class=\"literal\">false</span>) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">//组件渲染方法</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> info = &#123;</div><div class=\"line\">        isAllChecked: <span class=\"keyword\">this</span>.state.isAllChecked,</div><div class=\"line\">        todoCount: <span class=\"keyword\">this</span>.state.todos.length || <span class=\"number\">0</span>,</div><div class=\"line\">        todoDoneCount: (<span class=\"keyword\">this</span>.state.todos &amp;&amp; <span class=\"keyword\">this</span>.state.todos.filter((todo) =&gt; todo.isDone)).length || <span class=\"number\">0</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        &lt;div className=\"todo-wrap\"&gt;</div><div class=\"line\">            &lt;TodoHeader addTodo=&#123;this.addTodo.bind(this)&#125; /&gt;</div><div class=\"line\">            &lt;TodoMain todos=&#123;this.state.todos&#125; deleteTodo=&#123;this.deleteTodo.bind(this)&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; /&gt;</div><div class=\"line\">            &lt;TodoFooter &#123;...info&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; clearDone=&#123;this.clearDone.bind(this)&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。上面的<code>TodoHeader</code>是用来输入任务的地方，中间的<code>TodoMain</code>是用来展示任务列表的, 下面的<code>TodoFooter</code>提供一些特殊的方法，比如全选、删除等。</p>\n<p>另外，上面省去function创建函数的方法，是es6的一种语法，关于es6，我之前总结过一篇文章<a href=\"http://luckykun.com/work/2016-05-10/es6-feature.html\" target=\"_blank\" rel=\"external\">点这里去看es6</a>。</p>\n<p>App组件定义的方法，会在渲染的时候传递给子组件，比如TodoHeader组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;TodoHeader addTodo=&#123;<span class=\"keyword\">this</span>.addTodo.bind(<span class=\"keyword\">this</span>)&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>通过props传递子组件需要的值和方法。</li>\n<li>传递方法时一定要bind(this)，不然内部this会指向不正确。</li>\n<li>子组件的标签使用的时候一定要使用<code>/</code>闭合起来。</li>\n<li><p>ES6语法，spread操作符让代码简洁很多，如上述代码中的TodoFooter:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;TodoFooter &#123;...info&#125; /&gt;</div><div class=\"line\"><span class=\"comment\">//如果不使用spread操作符，就要这样写：</span></div><div class=\"line\">&lt;TodoFooter isAllchecked=&#123;info.isAllChecked&#125; todoCount=&#123;info.todoCount&#125;     todoDoneCount=&#123;info.todoDoneCount&#125;&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"渲染App\"><a href=\"#渲染App\" class=\"headerlink\" title=\"渲染App\"></a>渲染App</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">React.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>));</div></pre></td></tr></table></figure>\n<p>把上面的App组件的内容渲染到id为’app’的dom元素里。</p>\n<p>然后我们再简单看一下分解出来的三个组件：<code>TodoHeader</code>, <code>TodoMain</code>, <code>TodoFooter</code>。</p>\n<h2 id=\"TodoHeader组件\"><a href=\"#TodoHeader组件\" class=\"headerlink\" title=\"TodoHeader组件\"></a>TodoHeader组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoHeader</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 绑定键盘回车事件，添加新任务</span></div><div class=\"line\">    handlerKeyUp(e) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> value = e.target.value;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!value) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">let</span> newTodoItem = &#123;</div><div class=\"line\">                text: value,</div><div class=\"line\">                isDone: <span class=\"literal\">false</span></div><div class=\"line\">            &#125;;</div><div class=\"line\">            e.target.value = <span class=\"string\">''</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.props.addTodo(newTodoItem);   <span class=\"comment\">//使用props调用App组件传过来的方法。</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-header\"</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onKeyUp</span>=<span class=\"string\">&#123;this.handlerKeyUp.bind(this)&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入你的任务名称，按回车键确认\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default TodoHeader;   //ES6语法，导出模块，上文提到的es6文章中有讲解</div></pre></td></tr></table></figure>\n<p>TodoHeader组件的创建方法和App组件的创建方法一样，内部方法就少了很多了，这里就定义了一个监听键盘的方法，绑定到了输入框的keyUp事件上，敲击回车键的时候就会调用父组件传过来的<code>addTodo()方法</code>。</p>\n<h2 id=\"TodoMain组件\"><a href=\"#TodoMain组件\" class=\"headerlink\" title=\"TodoMain组件\"></a>TodoMain组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoMain</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.props.todos.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (</div><div class=\"line\">                <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-empty\"</span>&gt;</span>恭喜您，目前没有待办任务！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">            )</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (</div><div class=\"line\">                <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-main\"</span>&gt;</span></span></div><div class=\"line\">                    &#123;</div><div class=\"line\">                        this.props.todos.map((todo, index) =&gt; &#123;</div><div class=\"line\">                            //&#123;...this.props&#125; 用来传递TodoMain的todos属性和delete、change方法。</div><div class=\"line\">                            return <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">text</span>=<span class=\"string\">&#123;todo.text&#125;</span> <span class=\"attr\">isDone</span>=<span class=\"string\">&#123;todo.isDone&#125;</span> <span class=\"attr\">index</span>=<span class=\"string\">&#123;index&#125;</span> &#123;<span class=\"attr\">...this.props</span>&#125;/&gt;</span></div><div class=\"line\">                        &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TodoMain组件主要是为了把传递过来的todos列表遍历显示出来，而每一个list又是一个TodoItem组件。这里又用到了spread操作符<code>{...this.props}</code>，代码中也做了注释，可以洗洗品味一下。</p>\n<h2 id=\"TodoItem组件\"><a href=\"#TodoItem组件\" class=\"headerlink\" title=\"TodoItem组件\"></a>TodoItem组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//改变任务是否已完成的状态</span></div><div class=\"line\">    handlerChange() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> isDone = !<span class=\"keyword\">this</span>.props.isDone;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.changeTodoState(<span class=\"keyword\">this</span>.props.index, isDone);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 鼠标移入事件</span></div><div class=\"line\">    handlerMouseOver() &#123;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>).style.background = <span class=\"string\">'#eee'</span>;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>.refs.delButton).style.display = <span class=\"string\">'inline-block'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    handlerMouseOut() &#123;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>).style.background = <span class=\"string\">'#fff'</span>;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>.refs.delButton).style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 删除当前任务</span></div><div class=\"line\">    handlerDelete()&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.deleteTodo(<span class=\"keyword\">this</span>.props.index);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> className = <span class=\"keyword\">this</span>.props.isDone ? <span class=\"string\">'task-done'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">onMouseOver</span>=<span class=\"string\">&#123;this.handlerMouseOver.bind(this)&#125;</span> <span class=\"attr\">onMouseOut</span>=<span class=\"string\">&#123;this.handlerMouseOut.bind(this)&#125;</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">&#123;this.props.isDone&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handlerChange.bind(this)&#125;</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;className&#125;</span>&gt;</span>&#123;this.props.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"delButton\"</span> <span class=\"attr\">className</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handlerDelete.bind(this)&#125;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TodoItem有这四个方法，我们主要看看新出现的几点：</p>\n<ul>\n<li><code>React.findDOMNode(this)</code>可以获取当前这个组件标签。</li>\n<li>在元素中定义<code>ref=xxx</code>属性，就可以通过<code>React.findDOMNode(this.refs.xxx)</code>获取到这个元素。</li>\n<li>给元素定义class类名的时候要使用<code>className</code>。</li>\n</ul>\n<h2 id=\"TodoFooter组件\"><a href=\"#TodoFooter组件\" class=\"headerlink\" title=\"TodoFooter组件\"></a>TodoFooter组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoFooter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//改变任务是否已完成的状态</span></div><div class=\"line\">    handlerSelectAll(e) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.changeTodoState(<span class=\"literal\">null</span>, e.target.checked, <span class=\"literal\">true</span>);    <span class=\"comment\">// true表示全部操作。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//删除全部已完成的任务</span></div><div class=\"line\">    handlerDeleteDone() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.clearDone();</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-footer\"</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">&#123;this.props.isAllChecked&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handlerSelectAll.bind(this)&#125;</span> /&gt;</span>全选</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">\"text-success\"</span>&gt;</span>已完成&#123;this.props.todoDoneCount&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> / 全部&#123;this.props.todoCount&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handlerDeleteDone.bind(this)&#125;</span>&gt;</span>清除已完成任务<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>todoFooter组件主要用来批量更改状态和清除已完成的任务，还要显示任务完成情况，所以代码很简单了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><code>webpack 命令行的几种基本命令:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ webpack <span class=\"comment\">// 最基本的启动webpack方法</span></div><div class=\"line\">$ webpack -w <span class=\"comment\">// 提供watch方法，实时进行打包更新</span></div><div class=\"line\">$ webpack -p <span class=\"comment\">// 对打包后的文件进行压缩，提供production</span></div><div class=\"line\">$ webpack -p -w <span class=\"comment\">// 对打包后的文件进行压缩，并且实时监听</span></div><div class=\"line\">$ webpack -d <span class=\"comment\">// 提供source map，方便调试。</span></div></pre></td></tr></table></figure>\n<p>回过头来再看看这个demo的实现过程，react组件化的思想让我们编写代码的时候思维清晰，便于阅读。我们通过父组件来控制状态，并通过props传递，来保证组件内的状态一致，并且我们可以清晰的看到某一个方法该由谁来维护。这是一种全新的前端编码体验，相信以后会成为主流。</p>\n<p>另外，我们看到代码中，html直接嵌到js中了，这就是React提出的一种叫JSX的语法。其实入门react本身还是很简单，只是很多人看到JSX和ES6的语法，就打了退堂鼓了，因为我们被代码分离”洗脑”太久了。其实，它们就好像是一堵墙，要是我们畏惧这个障碍止步不前，那么只能停留在原地，如果我们骨气勇气爬上去，才发现react的风景真的很优美！</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://www.reqianduan.com/2297.html\" target=\"_blank\" rel=\"external\">http://www.reqianduan.com/2297.html</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/react-tutorial/\" target=\"_blank\" rel=\"external\">http://wiki.jikexueyuan.com/project/react-tutorial/</a></li>\n<li><a href=\"http://gank.io/post/564151c1f1df1210001c9161\" target=\"_blank\" rel=\"external\">http://gank.io/post/564151c1f1df1210001c9161</a></li>\n</ul>\n<hr>\n","excerpt":"<hr>\n<blockquote>\n<p>React 的核心思想是：封装组件，各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。</p>\n</blockquote>\n<p>最近前端界闹的沸沸扬扬的技术当属<code>react</code>了，加上项目需要等等原因，自己也决定花些时间来好好认识下这个东西。然后学习的时候顺便花时间写了一个demo：<code>react-todos</code>， 为了提起兴趣，你可以先<a href=\"http://luckykun.com/work/2016-05-08/react-todo-demo.html\">点这里去看react-todo</a></p>\n<p>首先react值得拍手称赞的是它所有的开发都基于<code>组件（component）</code>，然后组件和组件之间通过props传递方法，每个组件都有一个<code>状态（state）</code>，当某个方法改变了这个状态值时，整个组件就会<code>重绘</code>，从而达到刷新。另外，说到重绘就要提到<code>虚拟dom</code>了，就是用js模拟dom结构，等整个组件的dom更新完毕，才渲染到页面，简单来说只更新了相比之前改变了的部分，而不是全部刷新，所以效率很高。<br>","more":"</p>\n<h1 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h1><p>大家先新建一个项目文件夹，在里面建一个项目信息的文件<code>package.json</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"react-todos\"</span>,</div><div class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">    <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^0.13.3\"</span>,</div><div class=\"line\">        <span class=\"string\">\"sass\"</span>: <span class=\"string\">\"^0.5.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^5.5.8\"</span>,</div><div class=\"line\">        <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^5.1.4\"</span>,</div><div class=\"line\">        <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.14.5\"</span>,</div><div class=\"line\">        <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^0.8.4\"</span>,</div><div class=\"line\">        <span class=\"string\">\"jsx-loader\"</span>: <span class=\"string\">\"^0.13.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"node-libs-browser\"</span>: <span class=\"string\">\"^0.5.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"node-sass\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"sass-loader\"</span>: <span class=\"string\">\"^1.0.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.12.3\"</span>,</div><div class=\"line\">        <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^0.5.6\"</span>,</div><div class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.9.11\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>建好之后，运行命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>安装项目依赖的所有模块。安装好之后，另外还有一点，项目数据是存储在本地浏览器的，所以我找到一个小模块用来操作localStorage，它的原理就是，通过将数据格式化成JSON字符串进行存储，使用的时候就解析JSON字符串。他的代码<a href=\"https://github.com/luckykun/react-demo/tree/master/node_modules/localDb\">点这里看localDb</a>可以看到，你可以复制一份，放在node_modules的文件夹内。</p>\n<h1 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h1><p>项目使用的技术方案是：<code>webpack＋react＋es6</code>。关于es6的文章，我之前简单的介绍过，可以<a href=\"http://luckykun.com/work/2016-05-10/es6-feature.html\">点这里去看es6</a>，关于webpack的学习，我这里不详述了，看以后有时间再出篇文章吧。在项目文件夹下新建一个<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    entry: [</div><div class=\"line\">        <span class=\"string\">\"./src/entry.js\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: <span class=\"string\">'./out/'</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    externals: &#123;</div><div class=\"line\">        <span class=\"string\">'react'</span>: <span class=\"string\">'React'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.js$/</span>, loader: <span class=\"string\">\"jsx!babel\"</span>, include: <span class=\"regexp\">/src/</span>&#125;,</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: <span class=\"string\">\"style!css\"</span>&#125;,</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.scss$/</span>, loader: <span class=\"string\">\"style!css!sass\"</span>&#125;,</div><div class=\"line\">            &#123; test: <span class=\"regexp\">/\\.(png|jpg)$/</span>, loader: <span class=\"string\">'url?limit=8192'</span>&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面的文件可以看到：入口文件是在src文件夹里的entry.js，然后输出文件放在out文件夹的bundle.js里。externals属性是告诉webpack当遇到require(‘react’)的时候，不去处理并且默认为全局的React变量。这样子，我们就需要在index.html单独用src去加载js。最后看看配置的loaders：</p>\n<ul>\n<li>因为我们js文件会使用jsx和es6的语法，所以使用<code>jsx-loader</code>和<code>babel-loader</code>来编译js文件。</li>\n<li>scss文件使用<code>sass-loader</code>编译成css文件。</li>\n<li>写的时候可以省略-loader，多个loader使用<code>!</code>连接。</li>\n</ul>\n<h1 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h1><p>先来看一下项目的目录结构，最重要的就是src目录：</p>\n<ul>\n<li><code>index.html</code>是项目的入口页面。</li>\n<li><code>components</code>文件夹存放项目拆分出来的各个组件文件。</li>\n<li><code>vendor</code>文件夹存放项目依赖的框架，这里只有react。</li>\n</ul>\n<h1 id=\"index-html和entry-js\"><a href=\"#index-html和entry-js\" class=\"headerlink\" title=\"index.html和entry.js\"></a>index.html和entry.js</h1><p>先来看index.html：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;header&gt;</div><div class=\"line\">        &lt;h1 class=\"todo-title\"&gt;React-Todos&lt;/h1&gt;</div><div class=\"line\">    &lt;/header&gt;</div><div class=\"line\">    &lt;div class=\"container todo-container\"&gt;</div><div class=\"line\">        &lt;div id=\"app\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;script src=\"./src/vendor/react.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"./out/bundle.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<p>entry.js :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./styles/main.scss'</span>);    <span class=\"comment\">// 引入样式表</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./components/App'</span>);     <span class=\"comment\">// 引入组件</span></div></pre></td></tr></table></figure>\n<p>webpack会将入口文件进行合并和整理，最后输出一个bundle.js，所以所有的逻辑都在这个js文件中，因此在index.html中，只需要引入react框架和bundle.js就好了。</p>\n<h1 id=\"分析组件\"><a href=\"#分析组件\" class=\"headerlink\" title=\"分析组件\"></a>分析组件</h1><p>这个todo的项目，我们可以分为三个部分：头部，中间部分，尾部。那我们就来逐一的分析一下这些组件：</p>\n<h2 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> LocalDb <span class=\"keyword\">from</span> <span class=\"string\">'localDb'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> TodoHeader <span class=\"keyword\">from</span> <span class=\"string\">'./TodoHeader.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> TodoMain <span class=\"keyword\">from</span> <span class=\"string\">'./TodoMain.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> TodoFooter <span class=\"keyword\">from</span> <span class=\"string\">'./TodoFooter.js'</span></div><div class=\"line\"><span class=\"comment\">//es6写法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123; <span class=\"comment\">//定义组件，继承父类</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123; <span class=\"comment\">//定义App类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">super</span>(); <span class=\"comment\">//调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.db = <span class=\"keyword\">new</span> LocalDb(<span class=\"string\">'ReactDemo'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123; <span class=\"comment\">//定义组件状态</span></div><div class=\"line\">            todos: <span class=\"keyword\">this</span>.db.get(<span class=\"string\">'todos'</span>) || [],</div><div class=\"line\">            isAllChecked: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 判断是否所有任务的状态都完成，同步底部的全选框</span></div><div class=\"line\">    allChecked() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> isAllChecked = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.todos.every(todo =&gt; todo.isDone)) &#123;</div><div class=\"line\">            isAllChecked = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;   <span class=\"comment\">//改变状态，组件重绘</span></div><div class=\"line\">            todos: <span class=\"keyword\">this</span>.state.todos,</div><div class=\"line\">            isAllChecked: isAllChecked</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 添加任务，是传递给Header组件的方法</span></div><div class=\"line\">    addTodo(todoItem)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.todos.push(todoItem);  <span class=\"comment\">//todo列表</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, <span class=\"keyword\">this</span>.state.todos);</div><div class=\"line\">        <span class=\"keyword\">this</span>.allChecked();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 删除当前的任务，传递给TodoItem的方法</span></div><div class=\"line\">    deleteTodo(index)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.todos.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;todos: <span class=\"keyword\">this</span>.state.todos&#125;);  <span class=\"comment\">//改变状态</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, <span class=\"keyword\">this</span>.state.todos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 清除已完成的任务，传递给Footer组件的方法</span></div><div class=\"line\">    clearDone()&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> todos = <span class=\"keyword\">this</span>.state.todos.filter(todo =&gt; !todo.isDone);   <span class=\"comment\">//过滤掉数组中todo.isDone为true的item。</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            todos: todos,</div><div class=\"line\">            isAllChecked: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, todos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 改变任务状态，传递给TodoItem和Footer组件的方法</span></div><div class=\"line\">    changeTodoState(index, isDone, isChangeAll=<span class=\"literal\">false</span>)&#123;   <span class=\"comment\">//初始化isChangeAll为false</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(isChangeAll)&#123;     <span class=\"comment\">//全部操作</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                todos: <span class=\"keyword\">this</span>.state.todos.map((todo) =&gt; &#123;</div><div class=\"line\">                    todo.isDone = isDone;</div><div class=\"line\">                    <span class=\"keyword\">return</span> todo;</div><div class=\"line\">                &#125;),</div><div class=\"line\">                isAllChecked: isDone</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;   <span class=\"comment\">//操作其中一个todo</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.state.todos[index].isDone = isDone;</div><div class=\"line\">            <span class=\"keyword\">this</span>.allChecked();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.db.set(<span class=\"string\">'todos'</span>, <span class=\"keyword\">this</span>.state.todos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//组件渲染方法</span></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> info = &#123;</div><div class=\"line\">            isAllChecked: <span class=\"keyword\">this</span>.state.isAllChecked,</div><div class=\"line\">            todoCount: <span class=\"keyword\">this</span>.state.todos.length || <span class=\"number\">0</span>,</div><div class=\"line\">            todoDoneCount: (<span class=\"keyword\">this</span>.state.todos &amp;&amp; <span class=\"keyword\">this</span>.state.todos.filter((todo) =&gt; todo.isDone)).length || <span class=\"number\">0</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div className=\"todo-wrap\"&gt;</div><div class=\"line\">                &lt;TodoHeader addTodo=&#123;this.addTodo.bind(this)&#125; /&gt;</div><div class=\"line\">                &lt;TodoMain todos=&#123;this.state.todos&#125; deleteTodo=&#123;this.deleteTodo.bind(this)&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; /&gt;</div><div class=\"line\">                &lt;TodoFooter &#123;...info&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; clearDone=&#123;this.clearDone.bind(this)&#125; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">React.render(&lt;App/&gt;, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<p>我们知道React的主流思想就是，所有的state状态和方法都是由父组件控制，然后通过props传递给子组件，形成一个单方向的数据链路，保持各组件的状态一致。所以我们在这个父组件App上，看的东西稍微有点多。一点点来看：</p>\n<ul>\n<li>它采用es6的语法来创建了一个<code>继承React.Components的App类</code>。</li>\n<li>然后在构造函数里定义了自己的<code>状态state</code>。</li>\n<li>然后定义了很多方法，后面通过<code>props传递给子组件</code>。</li>\n<li>最后定义组件自己的渲染方法<code>render</code>。</li>\n</ul>\n<h3 id=\"App状态\"><a href=\"#App状态\" class=\"headerlink\" title=\"App状态\"></a>App状态</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.state = &#123; <span class=\"comment\">//定义组件状态</span></div><div class=\"line\">    todos: <span class=\"keyword\">this</span>.db.get(<span class=\"string\">'todos'</span>) || [],</div><div class=\"line\">    isAllChecked: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在App组件的构造函数里，我们初始化了组件的state，分别有两个，一个是todos的列表，一个是所有的todos是否全选的状态。在渲染的时候，我们会把状态传递到子组件中，如果子组件的某一个方法让状态发生了改变，那么整个组件就会进行重绘。</p>\n<h3 id=\"App的方法\"><a href=\"#App的方法\" class=\"headerlink\" title=\"App的方法\"></a>App的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断是否所有任务的状态都完成，同步底部的全选框</span></div><div class=\"line\">allChecked() &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 添加任务，是传递给Header组件的方法</span></div><div class=\"line\">addTodo(todoItem) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 删除当前的任务，传递给TodoItem的方法</span></div><div class=\"line\">deleteTodo(index) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 清除已完成的任务，传递给Footer组件的方法</span></div><div class=\"line\">clearDone() &#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 改变任务状态，传递给TodoItem和Footer组件的方法</span></div><div class=\"line\">changeTodoState(index, isDone, isChangeAll=<span class=\"literal\">false</span>) &#123;&#125;</div><div class=\"line\"><span class=\"comment\">//组件渲染方法</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> info = &#123;</div><div class=\"line\">        isAllChecked: <span class=\"keyword\">this</span>.state.isAllChecked,</div><div class=\"line\">        todoCount: <span class=\"keyword\">this</span>.state.todos.length || <span class=\"number\">0</span>,</div><div class=\"line\">        todoDoneCount: (<span class=\"keyword\">this</span>.state.todos &amp;&amp; <span class=\"keyword\">this</span>.state.todos.filter((todo) =&gt; todo.isDone)).length || <span class=\"number\">0</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">        &lt;div className=\"todo-wrap\"&gt;</div><div class=\"line\">            &lt;TodoHeader addTodo=&#123;this.addTodo.bind(this)&#125; /&gt;</div><div class=\"line\">            &lt;TodoMain todos=&#123;this.state.todos&#125; deleteTodo=&#123;this.deleteTodo.bind(this)&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; /&gt;</div><div class=\"line\">            &lt;TodoFooter &#123;...info&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; clearDone=&#123;this.clearDone.bind(this)&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。上面的<code>TodoHeader</code>是用来输入任务的地方，中间的<code>TodoMain</code>是用来展示任务列表的, 下面的<code>TodoFooter</code>提供一些特殊的方法，比如全选、删除等。</p>\n<p>另外，上面省去function创建函数的方法，是es6的一种语法，关于es6，我之前总结过一篇文章<a href=\"http://luckykun.com/work/2016-05-10/es6-feature.html\">点这里去看es6</a>。</p>\n<p>App组件定义的方法，会在渲染的时候传递给子组件，比如TodoHeader组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;TodoHeader addTodo=&#123;<span class=\"keyword\">this</span>.addTodo.bind(<span class=\"keyword\">this</span>)&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>通过props传递子组件需要的值和方法。</li>\n<li>传递方法时一定要bind(this)，不然内部this会指向不正确。</li>\n<li>子组件的标签使用的时候一定要使用<code>/</code>闭合起来。</li>\n<li><p>ES6语法，spread操作符让代码简洁很多，如上述代码中的TodoFooter:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;TodoFooter &#123;...info&#125; /&gt;</div><div class=\"line\"><span class=\"comment\">//如果不使用spread操作符，就要这样写：</span></div><div class=\"line\">&lt;TodoFooter isAllchecked=&#123;info.isAllChecked&#125; todoCount=&#123;info.todoCount&#125;     todoDoneCount=&#123;info.todoDoneCount&#125;&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"渲染App\"><a href=\"#渲染App\" class=\"headerlink\" title=\"渲染App\"></a>渲染App</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">React.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>));</div></pre></td></tr></table></figure>\n<p>把上面的App组件的内容渲染到id为’app’的dom元素里。</p>\n<p>然后我们再简单看一下分解出来的三个组件：<code>TodoHeader</code>, <code>TodoMain</code>, <code>TodoFooter</code>。</p>\n<h2 id=\"TodoHeader组件\"><a href=\"#TodoHeader组件\" class=\"headerlink\" title=\"TodoHeader组件\"></a>TodoHeader组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoHeader</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 绑定键盘回车事件，添加新任务</span></div><div class=\"line\">    handlerKeyUp(e) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> value = e.target.value;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!value) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">let</span> newTodoItem = &#123;</div><div class=\"line\">                text: value,</div><div class=\"line\">                isDone: <span class=\"literal\">false</span></div><div class=\"line\">            &#125;;</div><div class=\"line\">            e.target.value = <span class=\"string\">''</span>;</div><div class=\"line\">            <span class=\"keyword\">this</span>.props.addTodo(newTodoItem);   <span class=\"comment\">//使用props调用App组件传过来的方法。</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-header\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onKeyUp</span>=<span class=\"string\">&#123;this.handlerKeyUp.bind(this)&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入你的任务名称，按回车键确认\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default TodoHeader;   //ES6语法，导出模块，上文提到的es6文章中有讲解</span></div></pre></td></tr></table></figure>\n<p>TodoHeader组件的创建方法和App组件的创建方法一样，内部方法就少了很多了，这里就定义了一个监听键盘的方法，绑定到了输入框的keyUp事件上，敲击回车键的时候就会调用父组件传过来的<code>addTodo()方法</code>。</p>\n<h2 id=\"TodoMain组件\"><a href=\"#TodoMain组件\" class=\"headerlink\" title=\"TodoMain组件\"></a>TodoMain组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoMain</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.props.todos.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (</div><div class=\"line\">                <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-empty\"</span>&gt;</span>恭喜您，目前没有待办任务！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">            )</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (</div><div class=\"line\">                <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-main\"</span>&gt;</span></div><div class=\"line\">                    &#123;</div><div class=\"line\">                        this.props.todos.map((todo, index) =&gt; &#123;</div><div class=\"line\">                            //&#123;...this.props&#125; 用来传递TodoMain的todos属性和delete、change方法。</div><div class=\"line\">                            return <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">text</span>=<span class=\"string\">&#123;todo.text&#125;</span> <span class=\"attr\">isDone</span>=<span class=\"string\">&#123;todo.isDone&#125;</span> <span class=\"attr\">index</span>=<span class=\"string\">&#123;index&#125;</span> &#123;<span class=\"attr\">...this.props</span>&#125;/&gt;</span></div><div class=\"line\">                        &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>TodoMain组件主要是为了把传递过来的todos列表遍历显示出来，而每一个list又是一个TodoItem组件。这里又用到了spread操作符<code>{...this.props}</code>，代码中也做了注释，可以洗洗品味一下。</p>\n<h2 id=\"TodoItem组件\"><a href=\"#TodoItem组件\" class=\"headerlink\" title=\"TodoItem组件\"></a>TodoItem组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//改变任务是否已完成的状态</span></div><div class=\"line\">    handlerChange() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> isDone = !<span class=\"keyword\">this</span>.props.isDone;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.changeTodoState(<span class=\"keyword\">this</span>.props.index, isDone);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 鼠标移入事件</span></div><div class=\"line\">    handlerMouseOver() &#123;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>).style.background = <span class=\"string\">'#eee'</span>;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>.refs.delButton).style.display = <span class=\"string\">'inline-block'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    handlerMouseOut() &#123;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>).style.background = <span class=\"string\">'#fff'</span>;</div><div class=\"line\">        React.findDOMNode(<span class=\"keyword\">this</span>.refs.delButton).style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 删除当前任务</span></div><div class=\"line\">    handlerDelete()&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.deleteTodo(<span class=\"keyword\">this</span>.props.index);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> className = <span class=\"keyword\">this</span>.props.isDone ? <span class=\"string\">'task-done'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">onMouseOver</span>=<span class=\"string\">&#123;this.handlerMouseOver.bind(this)&#125;</span> <span class=\"attr\">onMouseOut</span>=<span class=\"string\">&#123;this.handlerMouseOut.bind(this)&#125;</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">&#123;this.props.isDone&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handlerChange.bind(this)&#125;</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;className&#125;</span>&gt;</span>&#123;this.props.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"delButton\"</span> <span class=\"attr\">className</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handlerDelete.bind(this)&#125;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>TodoItem有这四个方法，我们主要看看新出现的几点：</p>\n<ul>\n<li><code>React.findDOMNode(this)</code>可以获取当前这个组件标签。</li>\n<li>在元素中定义<code>ref=xxx</code>属性，就可以通过<code>React.findDOMNode(this.refs.xxx)</code>获取到这个元素。</li>\n<li>给元素定义class类名的时候要使用<code>className</code>。</li>\n</ul>\n<h2 id=\"TodoFooter组件\"><a href=\"#TodoFooter组件\" class=\"headerlink\" title=\"TodoFooter组件\"></a>TodoFooter组件</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoFooter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//改变任务是否已完成的状态</span></div><div class=\"line\">    handlerSelectAll(e) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.changeTodoState(<span class=\"literal\">null</span>, e.target.checked, <span class=\"literal\">true</span>);    <span class=\"comment\">// true表示全部操作。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//删除全部已完成的任务</span></div><div class=\"line\">    handlerDeleteDone() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.clearDone();</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"todo-footer\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">&#123;this.props.isAllChecked&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handlerSelectAll.bind(this)&#125;</span> /&gt;</span>全选</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">\"text-success\"</span>&gt;</span>已完成&#123;this.props.todoDoneCount&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> / 全部&#123;this.props.todoCount&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handlerDeleteDone.bind(this)&#125;</span>&gt;</span>清除已完成任务<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>todoFooter组件主要用来批量更改状态和清除已完成的任务，还要显示任务完成情况，所以代码很简单了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><code>webpack 命令行的几种基本命令:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ webpack <span class=\"comment\">// 最基本的启动webpack方法</span></div><div class=\"line\">$ webpack -w <span class=\"comment\">// 提供watch方法，实时进行打包更新</span></div><div class=\"line\">$ webpack -p <span class=\"comment\">// 对打包后的文件进行压缩，提供production</span></div><div class=\"line\">$ webpack -p -w <span class=\"comment\">// 对打包后的文件进行压缩，并且实时监听</span></div><div class=\"line\">$ webpack -d <span class=\"comment\">// 提供source map，方便调试。</span></div></pre></td></tr></table></figure>\n<p>回过头来再看看这个demo的实现过程，react组件化的思想让我们编写代码的时候思维清晰，便于阅读。我们通过父组件来控制状态，并通过props传递，来保证组件内的状态一致，并且我们可以清晰的看到某一个方法该由谁来维护。这是一种全新的前端编码体验，相信以后会成为主流。</p>\n<p>另外，我们看到代码中，html直接嵌到js中了，这就是React提出的一种叫JSX的语法。其实入门react本身还是很简单，只是很多人看到JSX和ES6的语法，就打了退堂鼓了，因为我们被代码分离”洗脑”太久了。其实，它们就好像是一堵墙，要是我们畏惧这个障碍止步不前，那么只能停留在原地，如果我们骨气勇气爬上去，才发现react的风景真的很优美！</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://www.reqianduan.com/2297.html\">http://www.reqianduan.com/2297.html</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/react-tutorial/\">http://wiki.jikexueyuan.com/project/react-tutorial/</a></li>\n<li><a href=\"http://gank.io/post/564151c1f1df1210001c9161\">http://gank.io/post/564151c1f1df1210001c9161</a></li>\n</ul>\n<hr>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciul9pda40001u13g28jwrzju","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddo002nu13gc2w26jw5"},{"post_id":"ciul9pdab0003u13g1mak0lbd","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddp002pu13g0sow2cgm"},{"post_id":"ciul9pdae0005u13gnnhy0gmt","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddp002ru13gnhgl81wt"},{"post_id":"ciul9pdaj0007u13g27xjxsci","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddq002tu13gq9rqi3bp"},{"post_id":"ciul9pdal0008u13gulefub7c","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddq002vu13g5kcu897j"},{"post_id":"ciul9pdao0009u13guvme1t9d","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddq002xu13gofpmsar0"},{"post_id":"ciul9pdar000au13g49spl9lo","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddq002zu13gco3a96mz"},{"post_id":"ciul9pdas000bu13gvectikti","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddr0031u13gqrsjaji3"},{"post_id":"ciul9pdau000cu13gntvry495","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddr0033u13gk6l9en4l"},{"post_id":"ciul9pdav000du13gmup9mv7b","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddr0035u13gptzaxdiz"},{"post_id":"ciul9pdaw000eu13gfde2qtbp","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddr0037u13gdod912ic"},{"post_id":"ciul9pday000fu13gmm8gtvbu","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddr0039u13g0rxoj5ms"},{"post_id":"ciul9pdb0000gu13g5j9zkl54","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddr003bu13gofo0txdd"},{"post_id":"ciul9pdb2000hu13gu6p7bvlj","category_id":"ciul9pdco001du13gy03msnx5","_id":"ciul9pddt003du13g6k63g1de"},{"post_id":"ciul9pdb5000iu13gsdeftw9f","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddt003fu13gn7vao51p"},{"post_id":"ciul9pdb6000ju13g4m4uh743","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddt003hu13gp1cxkzu7"},{"post_id":"ciul9pdb8000ku13g39q5wa88","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddt003ju13guca2xs6b"},{"post_id":"ciul9pdb9000lu13gv5nijrss","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddu003lu13ge4ektjt8"},{"post_id":"ciul9pdbb000mu13grftkqs21","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddv003nu13gd7gro84r"},{"post_id":"ciul9pdbd000nu13g42jotawl","category_id":"ciul9pdc6000pu13gh3eyuomc","_id":"ciul9pddw003pu13gg9ght75d"}],"PostTag":[{"post_id":"ciul9pda40001u13g28jwrzju","tag_id":"ciul9pdbk000ou13gtf4pvut6","_id":"ciul9pddo002mu13grkmddz0y"},{"post_id":"ciul9pda40001u13g28jwrzju","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pddp002ou13gobjcj8k3"},{"post_id":"ciul9pda40001u13g28jwrzju","tag_id":"ciul9pdca000tu13gvv8lg9y2","_id":"ciul9pddp002qu13g0y7joyph"},{"post_id":"ciul9pdab0003u13g1mak0lbd","tag_id":"ciul9pdcc000vu13gkx9oisfx","_id":"ciul9pddq002su13gdnw8anr7"},{"post_id":"ciul9pdab0003u13g1mak0lbd","tag_id":"ciul9pdcd000xu13gkoqgo064","_id":"ciul9pddq002uu13gf4ni3ut5"},{"post_id":"ciul9pdae0005u13gnnhy0gmt","tag_id":"ciul9pdce000zu13girq8v6ru","_id":"ciul9pddq002wu13grdh2x0i1"},{"post_id":"ciul9pdaj0007u13g27xjxsci","tag_id":"ciul9pdcf0011u13g44h9mlpp","_id":"ciul9pddq002yu13g26wyxfyg"},{"post_id":"ciul9pdaj0007u13g27xjxsci","tag_id":"ciul9pdci0013u13g97w154pd","_id":"ciul9pddr0030u13grdtyvjma"},{"post_id":"ciul9pdal0008u13gulefub7c","tag_id":"ciul9pdcj0015u13gx8uul9uv","_id":"ciul9pddr0032u13goha7cjny"},{"post_id":"ciul9pdal0008u13gulefub7c","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pddr0034u13gdbyh6cmu"},{"post_id":"ciul9pdao0009u13guvme1t9d","tag_id":"ciul9pdcm0019u13g5h2eoiec","_id":"ciul9pddr0036u13goyjup67j"},{"post_id":"ciul9pdao0009u13guvme1t9d","tag_id":"ciul9pdcf0011u13g44h9mlpp","_id":"ciul9pddr0038u13gr6we8y3h"},{"post_id":"ciul9pdao0009u13guvme1t9d","tag_id":"ciul9pdco001eu13gd05i1ezz","_id":"ciul9pddr003au13g4i1ug2tq"},{"post_id":"ciul9pdao0009u13guvme1t9d","tag_id":"ciul9pdci0013u13g97w154pd","_id":"ciul9pdds003cu13gi5yl1e1s"},{"post_id":"ciul9pdar000au13g49spl9lo","tag_id":"ciul9pdcq001iu13g4v8d0mc3","_id":"ciul9pddt003eu13gc3bq90g9"},{"post_id":"ciul9pdar000au13g49spl9lo","tag_id":"ciul9pdcq001ku13gxh6rjzrh","_id":"ciul9pddt003gu13g5ckr9hu8"},{"post_id":"ciul9pdar000au13g49spl9lo","tag_id":"ciul9pdcr001mu13g3y4tdwm9","_id":"ciul9pddt003iu13gecpxnyjn"},{"post_id":"ciul9pdar000au13g49spl9lo","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pddu003ku13gl6yki9g3"},{"post_id":"ciul9pdas000bu13gvectikti","tag_id":"ciul9pdcx001qu13grtdn4cwq","_id":"ciul9pddu003mu13gp2b97tfe"},{"post_id":"ciul9pdas000bu13gvectikti","tag_id":"ciul9pdcf0011u13g44h9mlpp","_id":"ciul9pddw003ou13gzna50dj0"},{"post_id":"ciul9pdau000cu13gntvry495","tag_id":"ciul9pdcy001su13gzopyyyit","_id":"ciul9pddw003qu13gmzbtz38w"},{"post_id":"ciul9pdau000cu13gntvry495","tag_id":"ciul9pdcy001tu13gni2xttz7","_id":"ciul9pddw003ru13gb3rwqjps"},{"post_id":"ciul9pdau000cu13gntvry495","tag_id":"ciul9pdcz001uu13g6e33xdl7","_id":"ciul9pddx003su13gw0jk8ijh"},{"post_id":"ciul9pdav000du13gmup9mv7b","tag_id":"ciul9pdcj0015u13gx8uul9uv","_id":"ciul9pddx003tu13gtf6r9y0q"},{"post_id":"ciul9pdav000du13gmup9mv7b","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pddx003uu13gx9wc84hs"},{"post_id":"ciul9pdaw000eu13gfde2qtbp","tag_id":"ciul9pdbk000ou13gtf4pvut6","_id":"ciul9pddx003vu13g7webi68i"},{"post_id":"ciul9pdaw000eu13gfde2qtbp","tag_id":"ciul9pdd2001yu13gkb3atp1n","_id":"ciul9pddx003wu13gpzktvicj"},{"post_id":"ciul9pday000fu13gmm8gtvbu","tag_id":"ciul9pdcj0015u13gx8uul9uv","_id":"ciul9pddx003xu13g4iqk64fv"},{"post_id":"ciul9pday000fu13gmm8gtvbu","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pddx003yu13gr2vzpozd"},{"post_id":"ciul9pdb0000gu13g5j9zkl54","tag_id":"ciul9pdcy001su13gzopyyyit","_id":"ciul9pddx003zu13ghbm6pbf0"},{"post_id":"ciul9pdb0000gu13g5j9zkl54","tag_id":"ciul9pdbk000ou13gtf4pvut6","_id":"ciul9pddy0040u13godgpd3sr"},{"post_id":"ciul9pdb5000iu13gsdeftw9f","tag_id":"ciul9pdcy001su13gzopyyyit","_id":"ciul9pddy0041u13gmlqmuhss"},{"post_id":"ciul9pdb5000iu13gsdeftw9f","tag_id":"ciul9pdcd000xu13gkoqgo064","_id":"ciul9pddy0042u13gooa8w42s"},{"post_id":"ciul9pdb5000iu13gsdeftw9f","tag_id":"ciul9pdcc000vu13gkx9oisfx","_id":"ciul9pddy0043u13gguhsryzd"},{"post_id":"ciul9pdb6000ju13g4m4uh743","tag_id":"ciul9pdcy001su13gzopyyyit","_id":"ciul9pddy0044u13gb4bidwm4"},{"post_id":"ciul9pdb6000ju13g4m4uh743","tag_id":"ciul9pdd50027u13gc83hnvd6","_id":"ciul9pddy0045u13gn8symzd8"},{"post_id":"ciul9pdb8000ku13g39q5wa88","tag_id":"ciul9pdd70028u13gj6lys5rg","_id":"ciul9pddy0046u13gh9dlledw"},{"post_id":"ciul9pdb8000ku13g39q5wa88","tag_id":"ciul9pdcf0011u13g44h9mlpp","_id":"ciul9pddy0047u13gjs61n13k"},{"post_id":"ciul9pdb8000ku13g39q5wa88","tag_id":"ciul9pdcz001uu13g6e33xdl7","_id":"ciul9pddy0048u13gdyyh77p7"},{"post_id":"ciul9pdb9000lu13gv5nijrss","tag_id":"ciul9pdd7002bu13g721v5h0a","_id":"ciul9pddy0049u13gxgtthu11"},{"post_id":"ciul9pdb9000lu13gv5nijrss","tag_id":"ciul9pdd50027u13gc83hnvd6","_id":"ciul9pddy004au13g659nepv3"},{"post_id":"ciul9pdb9000lu13gv5nijrss","tag_id":"ciul9pdd8002du13g8jeng3dq","_id":"ciul9pde0004bu13gi5fchsk2"},{"post_id":"ciul9pdb9000lu13gv5nijrss","tag_id":"ciul9pdcr001mu13g3y4tdwm9","_id":"ciul9pde0004cu13gf4azfei1"},{"post_id":"ciul9pdb9000lu13gv5nijrss","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pde0004du13g3bf09n8a"},{"post_id":"ciul9pdbb000mu13grftkqs21","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pde0004eu13giewb8hvz"},{"post_id":"ciul9pdbb000mu13grftkqs21","tag_id":"ciul9pdcd000xu13gkoqgo064","_id":"ciul9pde0004fu13gmubbxqfl"},{"post_id":"ciul9pdbb000mu13grftkqs21","tag_id":"ciul9pdcc000vu13gkx9oisfx","_id":"ciul9pde0004gu13gbk9f698a"},{"post_id":"ciul9pdbd000nu13g42jotawl","tag_id":"ciul9pdd50027u13gc83hnvd6","_id":"ciul9pde0004hu13gdtt2jihk"},{"post_id":"ciul9pdbd000nu13g42jotawl","tag_id":"ciul9pdcx001qu13grtdn4cwq","_id":"ciul9pde0004iu13g1t0kge3g"},{"post_id":"ciul9pdbd000nu13g42jotawl","tag_id":"ciul9pdc8000qu13gk3kkgak6","_id":"ciul9pde0004ju13g762jdzo2"}],"Tag":[{"name":"CSS3","_id":"ciul9pdbk000ou13gtf4pvut6"},{"name":"教程","_id":"ciul9pdc8000qu13gk3kkgak6"},{"name":"3D效果","_id":"ciul9pdca000tu13gvv8lg9y2"},{"name":"canvas","_id":"ciul9pdcc000vu13gkx9oisfx"},{"name":"html5","_id":"ciul9pdcd000xu13gkoqgo064"},{"name":"编辑器","_id":"ciul9pdce000zu13girq8v6ru"},{"name":"javascript","_id":"ciul9pdcf0011u13g44h9mlpp"},{"name":"干货总结","_id":"ciul9pdci0013u13g97w154pd"},{"name":"hexo系列","_id":"ciul9pdcj0015u13gx8uul9uv"},{"name":"文件上传","_id":"ciul9pdcm0019u13g5h2eoiec"},{"name":"ajax","_id":"ciul9pdco001eu13gd05i1ezz"},{"name":"grunt","_id":"ciul9pdcq001iu13g4v8d0mc3"},{"name":"angular","_id":"ciul9pdcq001ku13gxh6rjzrh"},{"name":"构建","_id":"ciul9pdcr001mu13g3y4tdwm9"},{"name":"es6","_id":"ciul9pdcx001qu13grtdn4cwq"},{"name":"demo","_id":"ciul9pdcy001su13gzopyyyit"},{"name":"highcharts","_id":"ciul9pdcy001tu13gni2xttz7"},{"name":"插件","_id":"ciul9pdcz001uu13g6e33xdl7"},{"name":"实例","_id":"ciul9pdd2001yu13gkb3atp1n"},{"name":"react","_id":"ciul9pdd50027u13gc83hnvd6"},{"name":"微信分享","_id":"ciul9pdd70028u13gj6lys5rg"},{"name":"yeoman","_id":"ciul9pdd7002bu13g721v5h0a"},{"name":"webpack","_id":"ciul9pdd8002du13g8jeng3dq"}]}}