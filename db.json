{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/README.MDOWN","path":"README.MDOWN","modified":1,"renderable":1},{"_id":"themes/yilia/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/photo.js","path":"js/photo.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/title.png","path":"img/title.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img.png","path":"img.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1461160892632},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1461160892633},{"_id":"themes/yilia/_config.yml","hash":"4f78072e1cbb3518de26ca2d5eb371c1e35af4f7","modified":1461475700151},{"_id":"themes/yilia/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1461160892669},{"_id":"source/_posts/simomo01.md","hash":"7ca0790373bdc0a519985abd36ed3645cbf5e779","modified":1461427486155},{"_id":"source/_posts/grunt-angular.md","hash":"311f3dd4aa0109a9d7b3f257c21c0ee13edc9611","modified":1462200737550},{"_id":"source/_posts/heoll-hexo.md","hash":"617cd5eb07b6fa9e56d92ef4fef35f8b7343613b","modified":1461599339013},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1461160892569},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1461160293341},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1461160892582},{"_id":"themes/yilia/.git/index","hash":"d6fd6736edd574e8f913a3ebeca0b2199e4356de","modified":1461160892740},{"_id":"themes/yilia/.git/packed-refs","hash":"102a8556f68dca2b07b7ef5c523080d0dcbbe257","modified":1461160892560},{"_id":"source/photos/index.md","hash":"718efdc939f4af1268ac906745e3fda78935270a","modified":1462610843559},{"_id":"themes/yilia/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1461160892635},{"_id":"themes/yilia/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1461160892635},{"_id":"themes/yilia/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1461160892636},{"_id":"themes/yilia/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1461160892637},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1461160892636},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1461160892639},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1461160892640},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1461160892640},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1461160892666},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1461160892665},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1461160892666},{"_id":"themes/yilia/layout/layout.ejs","hash":"cc915db5f3ba4778b79ac6c5f6a952af6bbbb51e","modified":1461680187474},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461160892667},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461160892668},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1461160892668},{"_id":"themes/yilia/source/README.MDOWN","hash":"a762d1b497af570d5f90d0f0057de1f96783d7dd","modified":1461420143872},{"_id":"themes/yilia/source/favicon.ico","hash":"bcffe8f2c85d3cd6f8f01503b74fbba43c95ae89","modified":1461394475286},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1461160293341},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1461160293341},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1461160293341},{"_id":"themes/yilia/.git/logs/HEAD","hash":"74ca854435c0ae495d4c46b9e2ec2676cd5bb44e","modified":1461160892575},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1461160892644},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"3709af4e8f7e1196dbd1f9dea62fa440d4b47836","modified":1461160892642},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"82d5634885fdd1873040713c8aaa16e477c7ab3a","modified":1462604264823},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1461160892643},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"302a02485e52d8e8c35c7f475f4f5ea19656e028","modified":1461680171453},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"2bbf5aad03f54055d9d7852e70ff7e6952a41f26","modified":1461769655697},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1461160892646},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"ef6c3790033c0b536bbf7577cb1c20f5535cadb7","modified":1461508085556},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"0338292769fcd13b38efe063718cfe0c80bce7ab","modified":1461472889835},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1461160892648},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1461160892649},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461160892693},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461160892694},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461160892694},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461160892695},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461160892696},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461160892696},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1461160892701},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1461160892702},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1461160892703},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1461160892670},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1461160892671},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1461160892684},{"_id":"themes/yilia/source/css/style.styl","hash":"fc6c94ae964e8e68786e30378e0ebdc3720b0b7a","modified":1461768265966},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1461160892705},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1461160892704},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1461160892706},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1461160892707},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1461160892708},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1461160892708},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1461160892710},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1461160892709},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1461160892711},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1461160892711},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1461160892712},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1461160892713},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1461160892713},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1461160892712},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1461160892714},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1461160892714},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1461160892715},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1461160892715},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1461160892716},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1461160892716},{"_id":"themes/yilia/source/js/main.js","hash":"159f01296b637c1dd3f198f8ca2f585d9048d8e6","modified":1462199514364},{"_id":"themes/yilia/source/js/mobile.js","hash":"ef78b3aacc045f06ac5ab11f625c17ca96b054ea","modified":1461507267908},{"_id":"themes/yilia/source/js/pc.js","hash":"5656b518ecfd18b5508c80b16f8662087c73d844","modified":1461505913008},{"_id":"themes/yilia/source/js/photo.js","hash":"af0c1a26ed17345c1e16d0da07e18625b9b2bc23","modified":1462610805991},{"_id":"themes/yilia/source/img/title.png","hash":"fe6dc8e148b513f106a49f8079654fc76863e796","modified":1461340216384},{"_id":"themes/yilia/.git/objects/pack/pack-7c6281fcfbb53c4b1a1c9210b8dcf0eeedcf91b2.idx","hash":"86a78011839c03052caa24f288f7f139361b0fc0","modified":1461160892300},{"_id":"themes/yilia/.git/refs/heads/master","hash":"154ba3f579c6295c558c47456b8023ff4f0cc214","modified":1461160892573},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1461160892652},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1461160892650},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"7ec0a6e14254274edc50dc4c157ce75f1bd46b58","modified":1461507766226},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1461160892651},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1461160892653},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"0c74b6cb6d52675e1d6565073241040072550bd7","modified":1461505906769},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1461160892664},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1461160892665},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461160892697},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1461160892698},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1461160892698},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1461160892699},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1461160892700},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1461160892700},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1461160892673},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"e0175c5f060e9932da8289974db761875767842e","modified":1461950089359},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"43eec07ae291b07e649241d4c74926cc65eb6ca2","modified":1462201023887},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1461160892675},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"c7b317052c1d5960644e7bb0240bde8e0ae4a4ea","modified":1461949541375},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1461160892677},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"f773944526077f906dc8dee83f914f4ef4cf137d","modified":1461947421334},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1461160892678},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"4935504141c220b0f1d0682bde3bb8a1a0dc4adf","modified":1462540927920},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"6d4e509b97fce1833e4cc98fde384df5cce9ed5c","modified":1461947396161},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1461160892680},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1461160892680},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"e84b578dc574867fde1005bbce83b592d9317b3a","modified":1461471946988},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1461160892682},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1461160892686},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1461160892689},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1461160892690},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1461160892691},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1461160892683},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1461160892684},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1461160892687},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"74ca854435c0ae495d4c46b9e2ec2676cd5bb44e","modified":1461160892574},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1461160892563},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"74ca854435c0ae495d4c46b9e2ec2676cd5bb44e","modified":1461160892568},{"_id":"themes/yilia/source/img.png","hash":"743e3282df85ca36f013eeee53728301b0a94199","modified":1461342400267},{"_id":"themes/yilia/.git/objects/pack/pack-7c6281fcfbb53c4b1a1c9210b8dcf0eeedcf91b2.pack","hash":"905d5ca172da1ab03afbcbc9212cd75485c84edb","modified":1461160892350}],"Category":[{"name":"工作","_id":"cinwwqjt50003j4qin2bxoq56"},{"name":"丝茉茉","_id":"cinwwqjtl0006j4qi7h5feeqs"}],"Data":[],"Page":[{"title":"相册","date":"2016-05-07T07:12:16.000Z","noDate":"true","_content":"\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<script src=\"/js/photo.js\"></script>\n","source":"photos/index.md","raw":"---\n\ntitle: 相册\ndate: 2016-05-07 15:12:16\nnoDate: 'true'\n\n---\n\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<script src=\"/js/photo.js\"></script>\n","updated":"2016-05-07T08:47:23.559Z","path":"photos/index.html","comments":1,"layout":"page","_id":"cinwwqju0000lj4qi2p0bm4ab","content":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<script src=\"/js/photo.js\"></script>\n","excerpt":"","more":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<script src=\"/js/photo.js\"></script>\n"}],"Post":[{"title":"前后端分离之前端项目构建（grunt+require+angular）","date":"2016-05-02T14:33:32.000Z","_content":"\n---\n\n前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好＝＝\n\n可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。\n\n此时你会深深的感受到了那句名言的魅力，`时间就是金钱！`后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞`前后端分离了`！\n\n\n<!--more-->\n\n\n# 前后端分离的目的和作用\n\n\n>要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。\n\n现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。\n\n所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。\n\n\n# 前端项目构建\n\n现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。\n\n现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。\n\n- grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。\n\n- requireJs: js库加载管理，支持按需加载，模块化引入。\n\n- angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。\n\n\n这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。\n\n\n\n## 创建项目目录\n\n\n```js\nmkdir myProject\ncd myProject\n```\n\n创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。\n\n\n## 创建package.json\n\n`首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。`\n\n可以用命令生成，后续也能够手动修改。\n\n```js\nnpm init\n```\n\n他会问我们一些问题，一路使用默认值，创建完毕。\n\n\n## 安装grunt\n\n```js\nnpm install grunt --save-dev\n```\n\n使用npm安装grunt插件，它将被安装到根目录的`node_modules`文件夹下，所有npm插件都会放到这里。\n\n`--save-dev`： 意思是安装插件的同时，也把它添加到项目信息文件`package.json`中的`devDependencies`字段里，意思是这个项目依赖于这些插件。下次使用`npm install`的时候就会自动安装这些插件。\n\n\n## 为grunt创建配置文件Gruntfile.js\n\nGruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。\n\n- 安装grunt-init\n\n\t```js\n\tnpm install grunt-init -g      //全局安装grunt-init\n\t```\n\n- 下载grunt模板\n\n\t```js\n\tgit clone https://github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile\n\t```\n\n- 生成Gruntfile\n\n\t```js\n\tgrunt-init gruntfile  \n\t```\n\n\t在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。\n\n\n## 安装bower\n\nbower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。\n\n同样适用npm进行安装。\n\n```js\nnpm install bower -g\n```\n\n## 为bower生成配置文件bower.json\n\n整个项目的信息文件是`package.json`，执行任务插件grunt的信息文件是`Gruntfile.js`，那么bower当然也有自己的信息文件了，那就是`bower.json`。\n\n```js\nbower init\n```\n\n不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。\n\n比如使用bower下载angularjs：\n\n```js\nbower install angularjs\n```\n\n这行命令将会把angular下载下来，放在根目录下的`bower_components`文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？\n\n```js\nbower install angularjs#1.2.2\n```\n\n另外，bower只负责下载文件到`bower_components`目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件`grunt-bower-task`，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。\n\n\n## 关于Requirejs\n\n官网上是这样说的：\n\n> RequireJS的目标是鼓励代码的模块化。\n\n它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。\n\n\n\n## 使用Requirejs\n\n\n`<script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>`\n\n一般在首页加载requiejs文件，然后属性`data-main`指定的文件就是接下来要加载的文件，然后我们再看`main.js`文件:\n\n\n```js\nrequire.config({\n\tbaseUrl: 'script/lib',\n\tpaths: {\n\t\tapp: 'app',\n\t\tjquery: '/jquery/jquery-min',\n\t\tangular: '/angularjs/angular-min'\n\t},\n\tshim: {\n\t\t'angular': {\n            exports: 'angular'\n        }\n\t}\n});\nrequire([\n\t'app'\n], function(app) (\n\tapp.hello();\n))\n```\n\n\n- 我们在`paths`中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。\n\n- `shim`中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫`angular`的模块。\n\n- 最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了`app.hello()`方法。\n\n\n# AngularJs实例\n\n上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。\n\n\n## 目录结构\n\n项目文件夹结构如下图（当然目录结构因人而异）：\n\n![](https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png)\n\n- `node_modules`: 用来存放项目依赖的grunt插件。\n\n- `bower_components`: 用来存放bower下载的库。\n\n- `build`: 用来存放经过build处理之后的js文件。\n\n- `app`: 是真正的开发需要的文件。\n\n\t- `data`: 用来存放mock数据用的json文件。\n\n\t- `images`: 用来存放静态图片。\n\n\t- `scripts`: 用来存放所有js文件。\n\n\t\t- `controller`: 用来存放控制器文件。\n\n\t\t- `directive`: 定义的指令文件。\n\n\t\t- `filter`: 定义的过滤器文件。\n\n\t\t- `route`: 路由文件。\n\n\t\t- `service`: 服务文件。\n\n\t\t- `vendor`: 公共库文件，比如angular,jquery,bootstrap等等。\n\n\t- `styles`目录用来存放样式文件。\n\n\t- `views`目录用来存放`页面`html文件。\n\n\t- `partials`目录用来存放`页面片段`的html文件。\n\n\n目录创建好了，现在来写一些代码，让项目能够运行起来。\n\n## views/index.html\n\n\n```html\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>grunt+requirejs+angular项目构建</title>\n    <script src=\"../scripts/vendor/requirejs/require.js\" data-main=\"../scripts/config\"></script>    <!-- 先引入requirejs, 然后引入config.js -->\n</head>\n<body>\n    <div ng-controller=\"testController\">\n        {{app}}\n    </div>\n</body>\n</html>\n```\n\n上述index中，先引入了require.js，然后加载data-main对应的config.js文件。\n\n\n## scripts/config.js\n\n```js\nvar vendorPath = 'vendor/';\nrequire.config({    //配置模块\n    baseUrl: '../scripts/',\n    paths: {\n        'app': 'app',\n        'angular': vendorPath + 'angular/angular',\n        'jquery': vendorPath + 'jquery/jquery'\n    },\n    shim: {   //处理没有遵守requirejs规范的js库\n        'angular': {\n            exports: 'angular'\n        }\n    }\n});\nrequire(['./bootstrap'], function(bootstrap) {\n    // ...\n});\n```\n\n然后通过require引入了bootstrap.js文件。\n\n\n## scripts/bootstrap.js\n\n```js\ndefine([\n    'angular',\n    'app',\n    'jquery',\n    './controller/_base'\n], function(angular) {\n    // 手动将angular模块绑定到document对象\n    angular.element(document).ready(function() {\n        angular.bootstrap(document, ['myProject']);\n    });\n});\n```\n\n`注意：function的内容是requirejs引入所有文件之后的回调函数。`\n\nbootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。\n\n\n## scripts/app.js\n\n```js\ndefine([\n    'angular',\n    './controller/controllers'\n], function(angular) {\n    //定义将要绑定到document上的模块名称\n    return angular.module('myProject', ['projectController']);\n});\n```\n\n定义模块名`myProject`的时候，同时指定它依赖于另一个模块`projectController`。\n\n同时在`./controller/controllers.js`中定义这个模块：\n\n```js\ndefine(['angular'], function(angular) {\n    return angular.module('projectController', []);\n});\n```\n\n这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。\n\n\n## controller/testController.js\n\n如果想要让视图文件`views/index.html`能够看到效果，我们就要开始编写控制器文件了，\n\n```js\ndefine([\n    './controllers'\n], function(mod) {\n    var controllerFn = function($scope, $location) {\n        $scope.app = 'hello, world';\n    };\n    controllerFn.$inject = ['$scope', '$location'];\n    mod.controller('testController', controllerFn);\n});\n```\n\n引入控制器的单独模块文件'./controllers',然后在模块上新建一个名为`testController`的控制器，并在$scope上绑定了一个值为‘hello, world’的变量`app`。\n\n## 查看效果\n\n使用`python -m SimpleHTTPServer`启动一个简单的web服务器，默认监听8000端口。在浏览器输入正确地址就能看到效果了。\n\n\n```js\nhello, world\n```\n\n\n# 结语\n\n\n现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。\n","source":"_posts/grunt-angular.md","raw":"---\ntitle: 前后端分离之前端项目构建（grunt+require+angular）\ndate: 2016-05-02 22:33:32\ncategories: 工作\ntags: [grunt, angular, 构建, 教程]\n---\n\n---\n\n前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好＝＝\n\n可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。\n\n此时你会深深的感受到了那句名言的魅力，`时间就是金钱！`后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞`前后端分离了`！\n\n\n<!--more-->\n\n\n# 前后端分离的目的和作用\n\n\n>要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。\n\n现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。\n\n所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。\n\n\n# 前端项目构建\n\n现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。\n\n现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。\n\n- grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。\n\n- requireJs: js库加载管理，支持按需加载，模块化引入。\n\n- angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。\n\n\n这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。\n\n\n\n## 创建项目目录\n\n\n```js\nmkdir myProject\ncd myProject\n```\n\n创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。\n\n\n## 创建package.json\n\n`首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。`\n\n可以用命令生成，后续也能够手动修改。\n\n```js\nnpm init\n```\n\n他会问我们一些问题，一路使用默认值，创建完毕。\n\n\n## 安装grunt\n\n```js\nnpm install grunt --save-dev\n```\n\n使用npm安装grunt插件，它将被安装到根目录的`node_modules`文件夹下，所有npm插件都会放到这里。\n\n`--save-dev`： 意思是安装插件的同时，也把它添加到项目信息文件`package.json`中的`devDependencies`字段里，意思是这个项目依赖于这些插件。下次使用`npm install`的时候就会自动安装这些插件。\n\n\n## 为grunt创建配置文件Gruntfile.js\n\nGruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。\n\n- 安装grunt-init\n\n\t```js\n\tnpm install grunt-init -g      //全局安装grunt-init\n\t```\n\n- 下载grunt模板\n\n\t```js\n\tgit clone https://github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile\n\t```\n\n- 生成Gruntfile\n\n\t```js\n\tgrunt-init gruntfile  \n\t```\n\n\t在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。\n\n\n## 安装bower\n\nbower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。\n\n同样适用npm进行安装。\n\n```js\nnpm install bower -g\n```\n\n## 为bower生成配置文件bower.json\n\n整个项目的信息文件是`package.json`，执行任务插件grunt的信息文件是`Gruntfile.js`，那么bower当然也有自己的信息文件了，那就是`bower.json`。\n\n```js\nbower init\n```\n\n不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。\n\n比如使用bower下载angularjs：\n\n```js\nbower install angularjs\n```\n\n这行命令将会把angular下载下来，放在根目录下的`bower_components`文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？\n\n```js\nbower install angularjs#1.2.2\n```\n\n另外，bower只负责下载文件到`bower_components`目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件`grunt-bower-task`，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。\n\n\n## 关于Requirejs\n\n官网上是这样说的：\n\n> RequireJS的目标是鼓励代码的模块化。\n\n它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。\n\n\n\n## 使用Requirejs\n\n\n`<script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>`\n\n一般在首页加载requiejs文件，然后属性`data-main`指定的文件就是接下来要加载的文件，然后我们再看`main.js`文件:\n\n\n```js\nrequire.config({\n\tbaseUrl: 'script/lib',\n\tpaths: {\n\t\tapp: 'app',\n\t\tjquery: '/jquery/jquery-min',\n\t\tangular: '/angularjs/angular-min'\n\t},\n\tshim: {\n\t\t'angular': {\n            exports: 'angular'\n        }\n\t}\n});\nrequire([\n\t'app'\n], function(app) (\n\tapp.hello();\n))\n```\n\n\n- 我们在`paths`中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。\n\n- `shim`中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫`angular`的模块。\n\n- 最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了`app.hello()`方法。\n\n\n# AngularJs实例\n\n上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。\n\n\n## 目录结构\n\n项目文件夹结构如下图（当然目录结构因人而异）：\n\n![](https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png)\n\n- `node_modules`: 用来存放项目依赖的grunt插件。\n\n- `bower_components`: 用来存放bower下载的库。\n\n- `build`: 用来存放经过build处理之后的js文件。\n\n- `app`: 是真正的开发需要的文件。\n\n\t- `data`: 用来存放mock数据用的json文件。\n\n\t- `images`: 用来存放静态图片。\n\n\t- `scripts`: 用来存放所有js文件。\n\n\t\t- `controller`: 用来存放控制器文件。\n\n\t\t- `directive`: 定义的指令文件。\n\n\t\t- `filter`: 定义的过滤器文件。\n\n\t\t- `route`: 路由文件。\n\n\t\t- `service`: 服务文件。\n\n\t\t- `vendor`: 公共库文件，比如angular,jquery,bootstrap等等。\n\n\t- `styles`目录用来存放样式文件。\n\n\t- `views`目录用来存放`页面`html文件。\n\n\t- `partials`目录用来存放`页面片段`的html文件。\n\n\n目录创建好了，现在来写一些代码，让项目能够运行起来。\n\n## views/index.html\n\n\n```html\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>grunt+requirejs+angular项目构建</title>\n    <script src=\"../scripts/vendor/requirejs/require.js\" data-main=\"../scripts/config\"></script>    <!-- 先引入requirejs, 然后引入config.js -->\n</head>\n<body>\n    <div ng-controller=\"testController\">\n        {{app}}\n    </div>\n</body>\n</html>\n```\n\n上述index中，先引入了require.js，然后加载data-main对应的config.js文件。\n\n\n## scripts/config.js\n\n```js\nvar vendorPath = 'vendor/';\nrequire.config({    //配置模块\n    baseUrl: '../scripts/',\n    paths: {\n        'app': 'app',\n        'angular': vendorPath + 'angular/angular',\n        'jquery': vendorPath + 'jquery/jquery'\n    },\n    shim: {   //处理没有遵守requirejs规范的js库\n        'angular': {\n            exports: 'angular'\n        }\n    }\n});\nrequire(['./bootstrap'], function(bootstrap) {\n    // ...\n});\n```\n\n然后通过require引入了bootstrap.js文件。\n\n\n## scripts/bootstrap.js\n\n```js\ndefine([\n    'angular',\n    'app',\n    'jquery',\n    './controller/_base'\n], function(angular) {\n    // 手动将angular模块绑定到document对象\n    angular.element(document).ready(function() {\n        angular.bootstrap(document, ['myProject']);\n    });\n});\n```\n\n`注意：function的内容是requirejs引入所有文件之后的回调函数。`\n\nbootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。\n\n\n## scripts/app.js\n\n```js\ndefine([\n    'angular',\n    './controller/controllers'\n], function(angular) {\n    //定义将要绑定到document上的模块名称\n    return angular.module('myProject', ['projectController']);\n});\n```\n\n定义模块名`myProject`的时候，同时指定它依赖于另一个模块`projectController`。\n\n同时在`./controller/controllers.js`中定义这个模块：\n\n```js\ndefine(['angular'], function(angular) {\n    return angular.module('projectController', []);\n});\n```\n\n这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。\n\n\n## controller/testController.js\n\n如果想要让视图文件`views/index.html`能够看到效果，我们就要开始编写控制器文件了，\n\n```js\ndefine([\n    './controllers'\n], function(mod) {\n    var controllerFn = function($scope, $location) {\n        $scope.app = 'hello, world';\n    };\n    controllerFn.$inject = ['$scope', '$location'];\n    mod.controller('testController', controllerFn);\n});\n```\n\n引入控制器的单独模块文件'./controllers',然后在模块上新建一个名为`testController`的控制器，并在$scope上绑定了一个值为‘hello, world’的变量`app`。\n\n## 查看效果\n\n使用`python -m SimpleHTTPServer`启动一个简单的web服务器，默认监听8000端口。在浏览器输入正确地址就能看到效果了。\n\n\n```js\nhello, world\n```\n\n\n# 结语\n\n\n现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。\n","slug":"grunt-angular","published":1,"updated":"2016-05-02T14:52:17.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinwwqjsq0000j4qi5vwa48os","content":"<hr>\n<p>前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好＝＝</p>\n<p>可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。</p>\n<p>此时你会深深的感受到了那句名言的魅力，<code>时间就是金钱！</code>后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞<code>前后端分离了</code>！</p>\n<a id=\"more\"></a>\n<h1 id=\"前后端分离的目的和作用\"><a href=\"#前后端分离的目的和作用\" class=\"headerlink\" title=\"前后端分离的目的和作用\"></a>前后端分离的目的和作用</h1><blockquote>\n<p>要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。</p>\n</blockquote>\n<p>现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。</p>\n<p>所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。</p>\n<h1 id=\"前端项目构建\"><a href=\"#前端项目构建\" class=\"headerlink\" title=\"前端项目构建\"></a>前端项目构建</h1><p>现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。</p>\n<p>现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。</p>\n<ul>\n<li><p>grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。</p>\n</li>\n<li><p>requireJs: js库加载管理，支持按需加载，模块化引入。</p>\n</li>\n<li><p>angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。</p>\n</li>\n</ul>\n<p>这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。</p>\n<h2 id=\"创建项目目录\"><a href=\"#创建项目目录\" class=\"headerlink\" title=\"创建项目目录\"></a>创建项目目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir myProject</span><br><span class=\"line\">cd myProject</span><br></pre></td></tr></table></figure>\n<p>创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。</p>\n<h2 id=\"创建package-json\"><a href=\"#创建package-json\" class=\"headerlink\" title=\"创建package.json\"></a>创建package.json</h2><p><code>首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。</code></p>\n<p>可以用命令生成，后续也能够手动修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>他会问我们一些问题，一路使用默认值，创建完毕。</p>\n<h2 id=\"安装grunt\"><a href=\"#安装grunt\" class=\"headerlink\" title=\"安装grunt\"></a>安装grunt</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install grunt --save-dev</span><br></pre></td></tr></table></figure>\n<p>使用npm安装grunt插件，它将被安装到根目录的<code>node_modules</code>文件夹下，所有npm插件都会放到这里。</p>\n<p><code>--save-dev</code>： 意思是安装插件的同时，也把它添加到项目信息文件<code>package.json</code>中的<code>devDependencies</code>字段里，意思是这个项目依赖于这些插件。下次使用<code>npm install</code>的时候就会自动安装这些插件。</p>\n<h2 id=\"为grunt创建配置文件Gruntfile-js\"><a href=\"#为grunt创建配置文件Gruntfile-js\" class=\"headerlink\" title=\"为grunt创建配置文件Gruntfile.js\"></a>为grunt创建配置文件Gruntfile.js</h2><p>Gruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。</p>\n<ul>\n<li><p>安装grunt-init</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install grunt-init -g      <span class=\"comment\">//全局安装grunt-init</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载grunt模板</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成Gruntfile</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">grunt-init gruntfile</span><br></pre></td></tr></table></figure>\n<p>  在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。</p>\n</li>\n</ul>\n<h2 id=\"安装bower\"><a href=\"#安装bower\" class=\"headerlink\" title=\"安装bower\"></a>安装bower</h2><p>bower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。</p>\n<p>同样适用npm进行安装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install bower -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"为bower生成配置文件bower-json\"><a href=\"#为bower生成配置文件bower-json\" class=\"headerlink\" title=\"为bower生成配置文件bower.json\"></a>为bower生成配置文件bower.json</h2><p>整个项目的信息文件是<code>package.json</code>，执行任务插件grunt的信息文件是<code>Gruntfile.js</code>，那么bower当然也有自己的信息文件了，那就是<code>bower.json</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower init</span><br></pre></td></tr></table></figure>\n<p>不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。</p>\n<p>比如使用bower下载angularjs：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install angularjs</span><br></pre></td></tr></table></figure>\n<p>这行命令将会把angular下载下来，放在根目录下的<code>bower_components</code>文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install angularjs#1.2.2</span><br></pre></td></tr></table></figure>\n<p>另外，bower只负责下载文件到<code>bower_components</code>目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件<code>grunt-bower-task</code>，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。</p>\n<h2 id=\"关于Requirejs\"><a href=\"#关于Requirejs\" class=\"headerlink\" title=\"关于Requirejs\"></a>关于Requirejs</h2><p>官网上是这样说的：</p>\n<blockquote>\n<p>RequireJS的目标是鼓励代码的模块化。</p>\n</blockquote>\n<p>它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。</p>\n<h2 id=\"使用Requirejs\"><a href=\"#使用Requirejs\" class=\"headerlink\" title=\"使用Requirejs\"></a>使用Requirejs</h2><p><code>&lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>一般在首页加载requiejs文件，然后属性<code>data-main</code>指定的文件就是接下来要加载的文件，然后我们再看<code>main.js</code>文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">\tbaseUrl: <span class=\"string\">'script/lib'</span>,</span><br><span class=\"line\">\tpaths: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">\t\tjquery: <span class=\"string\">'/jquery/jquery-min'</span>,</span><br><span class=\"line\">\t\tangular: <span class=\"string\">'/angularjs/angular-min'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tshim: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'angular'</span>: &#123;</span><br><span class=\"line\">            exports: <span class=\"string\">'angular'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([</span><br><span class=\"line\">\t<span class=\"string\">'app'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) (<span class=\"params\"></span><br><span class=\"line\">\tapp.hello(</span>);</span><br><span class=\"line\">))</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>我们在<code>paths</code>中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。</p>\n</li>\n<li><p><code>shim</code>中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫<code>angular</code>的模块。</p>\n</li>\n<li><p>最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了<code>app.hello()</code>方法。</p>\n</li>\n</ul>\n<h1 id=\"AngularJs实例\"><a href=\"#AngularJs实例\" class=\"headerlink\" title=\"AngularJs实例\"></a>AngularJs实例</h1><p>上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>项目文件夹结构如下图（当然目录结构因人而异）：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png\" alt=\"\"></p>\n<ul>\n<li><p><code>node_modules</code>: 用来存放项目依赖的grunt插件。</p>\n</li>\n<li><p><code>bower_components</code>: 用来存放bower下载的库。</p>\n</li>\n<li><p><code>build</code>: 用来存放经过build处理之后的js文件。</p>\n</li>\n<li><p><code>app</code>: 是真正的开发需要的文件。</p>\n<ul>\n<li><p><code>data</code>: 用来存放mock数据用的json文件。</p>\n</li>\n<li><p><code>images</code>: 用来存放静态图片。</p>\n</li>\n<li><p><code>scripts</code>: 用来存放所有js文件。</p>\n<ul>\n<li><p><code>controller</code>: 用来存放控制器文件。</p>\n</li>\n<li><p><code>directive</code>: 定义的指令文件。</p>\n</li>\n<li><p><code>filter</code>: 定义的过滤器文件。</p>\n</li>\n<li><p><code>route</code>: 路由文件。</p>\n</li>\n<li><p><code>service</code>: 服务文件。</p>\n</li>\n<li><p><code>vendor</code>: 公共库文件，比如angular,jquery,bootstrap等等。</p>\n</li>\n</ul>\n</li>\n<li><p><code>styles</code>目录用来存放样式文件。</p>\n</li>\n<li><p><code>views</code>目录用来存放<code>页面</code>html文件。</p>\n</li>\n<li><p><code>partials</code>目录用来存放<code>页面片段</code>的html文件。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>目录创建好了，现在来写一些代码，让项目能够运行起来。</p>\n<h2 id=\"views-index-html\"><a href=\"#views-index-html\" class=\"headerlink\" title=\"views/index.html\"></a>views/index.html</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>grunt+requirejs+angular项目构建<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../scripts/vendor/requirejs/require.js\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"../scripts/config\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    <span class=\"comment\">&lt;!-- 先引入requirejs, 然后引入config.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"testController\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;app&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上述index中，先引入了require.js，然后加载data-main对应的config.js文件。</p>\n<h2 id=\"scripts-config-js\"><a href=\"#scripts-config-js\" class=\"headerlink\" title=\"scripts/config.js\"></a>scripts/config.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vendorPath = <span class=\"string\">'vendor/'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;    <span class=\"comment\">//配置模块</span></span><br><span class=\"line\">    baseUrl: <span class=\"string\">'../scripts/'</span>,</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        <span class=\"string\">'app'</span>: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">        <span class=\"string\">'angular'</span>: vendorPath + <span class=\"string\">'angular/angular'</span>,</span><br><span class=\"line\">        <span class=\"string\">'jquery'</span>: vendorPath + <span class=\"string\">'jquery/jquery'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shim: &#123;   <span class=\"comment\">//处理没有遵守requirejs规范的js库</span></span><br><span class=\"line\">        <span class=\"string\">'angular'</span>: &#123;</span><br><span class=\"line\">            exports: <span class=\"string\">'angular'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./bootstrap'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bootstrap</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后通过require引入了bootstrap.js文件。</p>\n<h2 id=\"scripts-bootstrap-js\"><a href=\"#scripts-bootstrap-js\" class=\"headerlink\" title=\"scripts/bootstrap.js\"></a>scripts/bootstrap.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([</span><br><span class=\"line\">    <span class=\"string\">'angular'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app'</span>,</span><br><span class=\"line\">    <span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./controller/_base'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手动将angular模块绑定到document对象</span></span><br><span class=\"line\">    angular.element(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        angular.bootstrap(<span class=\"built_in\">document</span>, [<span class=\"string\">'myProject'</span>]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>注意：function的内容是requirejs引入所有文件之后的回调函数。</code></p>\n<p>bootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。</p>\n<h2 id=\"scripts-app-js\"><a href=\"#scripts-app-js\" class=\"headerlink\" title=\"scripts/app.js\"></a>scripts/app.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([</span><br><span class=\"line\">    <span class=\"string\">'angular'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./controller/controllers'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义将要绑定到document上的模块名称</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'myProject'</span>, [<span class=\"string\">'projectController'</span>]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>定义模块名<code>myProject</code>的时候，同时指定它依赖于另一个模块<code>projectController</code>。</p>\n<p>同时在<code>./controller/controllers.js</code>中定义这个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'angular'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'projectController'</span>, []);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。</p>\n<h2 id=\"controller-testController-js\"><a href=\"#controller-testController-js\" class=\"headerlink\" title=\"controller/testController.js\"></a>controller/testController.js</h2><p>如果想要让视图文件<code>views/index.html</code>能够看到效果，我们就要开始编写控制器文件了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([</span><br><span class=\"line\">    <span class=\"string\">'./controllers'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> controllerFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $location</span>) </span>&#123;</span><br><span class=\"line\">        $scope.app = <span class=\"string\">'hello, world'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    controllerFn.$inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$location'</span>];</span><br><span class=\"line\">    mod.controller(<span class=\"string\">'testController'</span>, controllerFn);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>引入控制器的单独模块文件’./controllers’,然后在模块上新建一个名为<code>testController</code>的控制器，并在$scope上绑定了一个值为‘hello, world’的变量<code>app</code>。</p>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>使用<code>python -m SimpleHTTPServer</code>启动一个简单的web服务器，默认监听8000端口。在浏览器输入正确地址就能看到效果了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello, world</span><br></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。</p>\n","excerpt":"<hr>\n<p>前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好＝＝</p>\n<p>可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。</p>\n<p>此时你会深深的感受到了那句名言的魅力，<code>时间就是金钱！</code>后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞<code>前后端分离了</code>！</p>","more":"<h1 id=\"前后端分离的目的和作用\"><a href=\"#前后端分离的目的和作用\" class=\"headerlink\" title=\"前后端分离的目的和作用\"></a>前后端分离的目的和作用</h1><blockquote>\n<p>要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。</p>\n</blockquote>\n<p>现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。</p>\n<p>所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。</p>\n<h1 id=\"前端项目构建\"><a href=\"#前端项目构建\" class=\"headerlink\" title=\"前端项目构建\"></a>前端项目构建</h1><p>现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。</p>\n<p>现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。</p>\n<ul>\n<li><p>grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。</p>\n</li>\n<li><p>requireJs: js库加载管理，支持按需加载，模块化引入。</p>\n</li>\n<li><p>angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。</p>\n</li>\n</ul>\n<p>这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。</p>\n<h2 id=\"创建项目目录\"><a href=\"#创建项目目录\" class=\"headerlink\" title=\"创建项目目录\"></a>创建项目目录</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir myProject</span><br><span class=\"line\">cd myProject</span><br></pre></td></tr></table></figure>\n<p>创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。</p>\n<h2 id=\"创建package-json\"><a href=\"#创建package-json\" class=\"headerlink\" title=\"创建package.json\"></a>创建package.json</h2><p><code>首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。</code></p>\n<p>可以用命令生成，后续也能够手动修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>他会问我们一些问题，一路使用默认值，创建完毕。</p>\n<h2 id=\"安装grunt\"><a href=\"#安装grunt\" class=\"headerlink\" title=\"安装grunt\"></a>安装grunt</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install grunt --save-dev</span><br></pre></td></tr></table></figure>\n<p>使用npm安装grunt插件，它将被安装到根目录的<code>node_modules</code>文件夹下，所有npm插件都会放到这里。</p>\n<p><code>--save-dev</code>： 意思是安装插件的同时，也把它添加到项目信息文件<code>package.json</code>中的<code>devDependencies</code>字段里，意思是这个项目依赖于这些插件。下次使用<code>npm install</code>的时候就会自动安装这些插件。</p>\n<h2 id=\"为grunt创建配置文件Gruntfile-js\"><a href=\"#为grunt创建配置文件Gruntfile-js\" class=\"headerlink\" title=\"为grunt创建配置文件Gruntfile.js\"></a>为grunt创建配置文件Gruntfile.js</h2><p>Gruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。</p>\n<ul>\n<li><p>安装grunt-init</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install grunt-init -g      <span class=\"comment\">//全局安装grunt-init</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载grunt模板</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成Gruntfile</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">grunt-init gruntfile</span><br></pre></td></tr></table></figure>\n<p>  在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。</p>\n</li>\n</ul>\n<h2 id=\"安装bower\"><a href=\"#安装bower\" class=\"headerlink\" title=\"安装bower\"></a>安装bower</h2><p>bower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。</p>\n<p>同样适用npm进行安装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install bower -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"为bower生成配置文件bower-json\"><a href=\"#为bower生成配置文件bower-json\" class=\"headerlink\" title=\"为bower生成配置文件bower.json\"></a>为bower生成配置文件bower.json</h2><p>整个项目的信息文件是<code>package.json</code>，执行任务插件grunt的信息文件是<code>Gruntfile.js</code>，那么bower当然也有自己的信息文件了，那就是<code>bower.json</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower init</span><br></pre></td></tr></table></figure>\n<p>不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。</p>\n<p>比如使用bower下载angularjs：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install angularjs</span><br></pre></td></tr></table></figure>\n<p>这行命令将会把angular下载下来，放在根目录下的<code>bower_components</code>文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install angularjs#1.2.2</span><br></pre></td></tr></table></figure>\n<p>另外，bower只负责下载文件到<code>bower_components</code>目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件<code>grunt-bower-task</code>，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。</p>\n<h2 id=\"关于Requirejs\"><a href=\"#关于Requirejs\" class=\"headerlink\" title=\"关于Requirejs\"></a>关于Requirejs</h2><p>官网上是这样说的：</p>\n<blockquote>\n<p>RequireJS的目标是鼓励代码的模块化。</p>\n</blockquote>\n<p>它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。</p>\n<h2 id=\"使用Requirejs\"><a href=\"#使用Requirejs\" class=\"headerlink\" title=\"使用Requirejs\"></a>使用Requirejs</h2><p><code>&lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>一般在首页加载requiejs文件，然后属性<code>data-main</code>指定的文件就是接下来要加载的文件，然后我们再看<code>main.js</code>文件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">\tbaseUrl: <span class=\"string\">'script/lib'</span>,</span><br><span class=\"line\">\tpaths: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">\t\tjquery: <span class=\"string\">'/jquery/jquery-min'</span>,</span><br><span class=\"line\">\t\tangular: <span class=\"string\">'/angularjs/angular-min'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tshim: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'angular'</span>: &#123;</span><br><span class=\"line\">            exports: <span class=\"string\">'angular'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([</span><br><span class=\"line\">\t<span class=\"string\">'app'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) (<span class=\"params\"></span><br><span class=\"line\">\tapp.hello(</span>);</span><br><span class=\"line\">))</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>我们在<code>paths</code>中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。</p>\n</li>\n<li><p><code>shim</code>中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫<code>angular</code>的模块。</p>\n</li>\n<li><p>最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了<code>app.hello()</code>方法。</p>\n</li>\n</ul>\n<h1 id=\"AngularJs实例\"><a href=\"#AngularJs实例\" class=\"headerlink\" title=\"AngularJs实例\"></a>AngularJs实例</h1><p>上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>项目文件夹结构如下图（当然目录结构因人而异）：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png\" alt=\"\"></p>\n<ul>\n<li><p><code>node_modules</code>: 用来存放项目依赖的grunt插件。</p>\n</li>\n<li><p><code>bower_components</code>: 用来存放bower下载的库。</p>\n</li>\n<li><p><code>build</code>: 用来存放经过build处理之后的js文件。</p>\n</li>\n<li><p><code>app</code>: 是真正的开发需要的文件。</p>\n<ul>\n<li><p><code>data</code>: 用来存放mock数据用的json文件。</p>\n</li>\n<li><p><code>images</code>: 用来存放静态图片。</p>\n</li>\n<li><p><code>scripts</code>: 用来存放所有js文件。</p>\n<ul>\n<li><p><code>controller</code>: 用来存放控制器文件。</p>\n</li>\n<li><p><code>directive</code>: 定义的指令文件。</p>\n</li>\n<li><p><code>filter</code>: 定义的过滤器文件。</p>\n</li>\n<li><p><code>route</code>: 路由文件。</p>\n</li>\n<li><p><code>service</code>: 服务文件。</p>\n</li>\n<li><p><code>vendor</code>: 公共库文件，比如angular,jquery,bootstrap等等。</p>\n</li>\n</ul>\n</li>\n<li><p><code>styles</code>目录用来存放样式文件。</p>\n</li>\n<li><p><code>views</code>目录用来存放<code>页面</code>html文件。</p>\n</li>\n<li><p><code>partials</code>目录用来存放<code>页面片段</code>的html文件。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>目录创建好了，现在来写一些代码，让项目能够运行起来。</p>\n<h2 id=\"views-index-html\"><a href=\"#views-index-html\" class=\"headerlink\" title=\"views/index.html\"></a>views/index.html</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>grunt+requirejs+angular项目构建<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../scripts/vendor/requirejs/require.js\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"../scripts/config\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    <span class=\"comment\">&lt;!-- 先引入requirejs, 然后引入config.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"testController\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;app&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上述index中，先引入了require.js，然后加载data-main对应的config.js文件。</p>\n<h2 id=\"scripts-config-js\"><a href=\"#scripts-config-js\" class=\"headerlink\" title=\"scripts/config.js\"></a>scripts/config.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vendorPath = <span class=\"string\">'vendor/'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;    <span class=\"comment\">//配置模块</span></span><br><span class=\"line\">    baseUrl: <span class=\"string\">'../scripts/'</span>,</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        <span class=\"string\">'app'</span>: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">        <span class=\"string\">'angular'</span>: vendorPath + <span class=\"string\">'angular/angular'</span>,</span><br><span class=\"line\">        <span class=\"string\">'jquery'</span>: vendorPath + <span class=\"string\">'jquery/jquery'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shim: &#123;   <span class=\"comment\">//处理没有遵守requirejs规范的js库</span></span><br><span class=\"line\">        <span class=\"string\">'angular'</span>: &#123;</span><br><span class=\"line\">            exports: <span class=\"string\">'angular'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./bootstrap'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bootstrap</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后通过require引入了bootstrap.js文件。</p>\n<h2 id=\"scripts-bootstrap-js\"><a href=\"#scripts-bootstrap-js\" class=\"headerlink\" title=\"scripts/bootstrap.js\"></a>scripts/bootstrap.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([</span><br><span class=\"line\">    <span class=\"string\">'angular'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app'</span>,</span><br><span class=\"line\">    <span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./controller/_base'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手动将angular模块绑定到document对象</span></span><br><span class=\"line\">    angular.element(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        angular.bootstrap(<span class=\"built_in\">document</span>, [<span class=\"string\">'myProject'</span>]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>注意：function的内容是requirejs引入所有文件之后的回调函数。</code></p>\n<p>bootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。</p>\n<h2 id=\"scripts-app-js\"><a href=\"#scripts-app-js\" class=\"headerlink\" title=\"scripts/app.js\"></a>scripts/app.js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([</span><br><span class=\"line\">    <span class=\"string\">'angular'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./controller/controllers'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义将要绑定到document上的模块名称</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'myProject'</span>, [<span class=\"string\">'projectController'</span>]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>定义模块名<code>myProject</code>的时候，同时指定它依赖于另一个模块<code>projectController</code>。</p>\n<p>同时在<code>./controller/controllers.js</code>中定义这个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'angular'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">angular</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> angular.module(<span class=\"string\">'projectController'</span>, []);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。</p>\n<h2 id=\"controller-testController-js\"><a href=\"#controller-testController-js\" class=\"headerlink\" title=\"controller/testController.js\"></a>controller/testController.js</h2><p>如果想要让视图文件<code>views/index.html</code>能够看到效果，我们就要开始编写控制器文件了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([</span><br><span class=\"line\">    <span class=\"string\">'./controllers'</span></span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> controllerFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $location</span>) </span>&#123;</span><br><span class=\"line\">        $scope.app = <span class=\"string\">'hello, world'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    controllerFn.$inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$location'</span>];</span><br><span class=\"line\">    mod.controller(<span class=\"string\">'testController'</span>, controllerFn);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>引入控制器的单独模块文件’./controllers’,然后在模块上新建一个名为<code>testController</code>的控制器，并在$scope上绑定了一个值为‘hello, world’的变量<code>app</code>。</p>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>使用<code>python -m SimpleHTTPServer</code>启动一个简单的web服务器，默认监听8000端口。在浏览器输入正确地址就能看到效果了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello, world</span><br></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。</p>"},{"title":"一个有故事的人","date":"2016-04-23T14:54:48.000Z","_content":"\n\n---\n\n> 圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。\n\n<!--more-->\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/111.jpg)\n\n\n\n村里住着一户姓张的人家。他家原来是在屯子的东头居住，后来买了我家前院的房子就搬过来居住，这样我们两家就成了邻居。原来并不曾注意的人家，因为成了邻居，接触多了，也就多了一分关注和熟悉。\n\n他家有一个老太太，我认识她以来，她就和儿子一家人在一起生活，我从未见过她的老伴。但这并未引起我的好奇，别的人家老人没有老伴的也有。\n\n但因为是邻居了，对她和她家的事了解也就多了。一次我听屯邻给我讲了她和她老伴的事，我才知道原本一个平常无奇的老太太却是一个有故事的人。\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/222.jpg)\n（老奶奶：艹，无辜躺枪……orz）\n\n原来，老太太虽然其貌不扬，年轻时却嫁给了当地一位美男子，男方形象好，没的说。而老太太呢，因为小时得过天花，病好后，落下一张麻脸。等到了姑娘出嫁的年龄，却难了。\n\n那个时代，虽然还没有多少自由恋爱，但青年男女结婚前总要见上一面，算是相看，相中的就定下来。而一个年轻姑娘有张麻脸，男方一般是不会相中的。正好这时有人给她家姊妹做媒，于是女方家就想了一个调包之计，让麻脸姑娘的妹妹去相亲。\n\n到了结婚那天，把麻脸姑娘送到了男方家去成亲。一直到了结婚那天，男方才知道与他结婚的是有着麻脸的这位姑娘，然而却是生米做成了熟饭，男方也就无可奈何了。\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/333.jpg)\n（原谅我找了这么一张唯美又符合情境的图…）\n\n\n屯邻没告诉我当时男方是否反抗过，或许他也不知道。但按情理说，自己结婚的与相亲的不是一个人，男方肯定是不情愿的。伊人不见，嫫母当面，美好的想象变成了无奈的现实，放在谁身上都将是苦涩的。\n\n\n二人结婚后，生了一个儿子，就是老太太一直与之在一起生活的这位。再后来，听说男方有一次出去干活，受了凉，回家后肚子痛，大概是肠绞痛之类，却因此就死去了。此后就剩下老太太一个人与儿子一起生活。从年龄算来，老太太守寡时还很年轻，到现在也很多年了，不知道这算幸还是不幸。\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/4444.png)\n(这悲伤的表情……)\n\n\n最开始听到这个事，我很惊讶，甚至都有些怀疑。老太太是五六十年代过来的人，那个时代，正是中国人“大干革命”的年代。我一直认为那个时代的人都是一门心思、思想上纯而又纯。这个发生在老百姓中的真实的事让我知道，世事远没有我想的那么简单。老百姓也是有花花肠子弯弯道道的。不过因为这事发生在民间，觉得还是朴素的。\n\n老太太是很普通的一个农村老太太，性格平和，见我总是微笑说话。本来平平常常的一个人，自打听说这个事情，我后来再见到老太太，总觉得有点异样，好像一个人有了故事，就会让人觉得有些不平常了。\n","source":"_posts/simomo01.md","raw":"---\ntitle:  一个有故事的人\ndate: 2016-04-23 22:54:48\ncategories: 丝茉茉\ntags:\n---\n\n\n---\n\n> 圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。\n\n<!--more-->\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/111.jpg)\n\n\n\n村里住着一户姓张的人家。他家原来是在屯子的东头居住，后来买了我家前院的房子就搬过来居住，这样我们两家就成了邻居。原来并不曾注意的人家，因为成了邻居，接触多了，也就多了一分关注和熟悉。\n\n他家有一个老太太，我认识她以来，她就和儿子一家人在一起生活，我从未见过她的老伴。但这并未引起我的好奇，别的人家老人没有老伴的也有。\n\n但因为是邻居了，对她和她家的事了解也就多了。一次我听屯邻给我讲了她和她老伴的事，我才知道原本一个平常无奇的老太太却是一个有故事的人。\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/222.jpg)\n（老奶奶：艹，无辜躺枪……orz）\n\n原来，老太太虽然其貌不扬，年轻时却嫁给了当地一位美男子，男方形象好，没的说。而老太太呢，因为小时得过天花，病好后，落下一张麻脸。等到了姑娘出嫁的年龄，却难了。\n\n那个时代，虽然还没有多少自由恋爱，但青年男女结婚前总要见上一面，算是相看，相中的就定下来。而一个年轻姑娘有张麻脸，男方一般是不会相中的。正好这时有人给她家姊妹做媒，于是女方家就想了一个调包之计，让麻脸姑娘的妹妹去相亲。\n\n到了结婚那天，把麻脸姑娘送到了男方家去成亲。一直到了结婚那天，男方才知道与他结婚的是有着麻脸的这位姑娘，然而却是生米做成了熟饭，男方也就无可奈何了。\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/333.jpg)\n（原谅我找了这么一张唯美又符合情境的图…）\n\n\n屯邻没告诉我当时男方是否反抗过，或许他也不知道。但按情理说，自己结婚的与相亲的不是一个人，男方肯定是不情愿的。伊人不见，嫫母当面，美好的想象变成了无奈的现实，放在谁身上都将是苦涩的。\n\n\n二人结婚后，生了一个儿子，就是老太太一直与之在一起生活的这位。再后来，听说男方有一次出去干活，受了凉，回家后肚子痛，大概是肠绞痛之类，却因此就死去了。此后就剩下老太太一个人与儿子一起生活。从年龄算来，老太太守寡时还很年轻，到现在也很多年了，不知道这算幸还是不幸。\n\n![](http://7xtawy.com2.z0.glb.clouddn.com/4444.png)\n(这悲伤的表情……)\n\n\n最开始听到这个事，我很惊讶，甚至都有些怀疑。老太太是五六十年代过来的人，那个时代，正是中国人“大干革命”的年代。我一直认为那个时代的人都是一门心思、思想上纯而又纯。这个发生在老百姓中的真实的事让我知道，世事远没有我想的那么简单。老百姓也是有花花肠子弯弯道道的。不过因为这事发生在民间，觉得还是朴素的。\n\n老太太是很普通的一个农村老太太，性格平和，见我总是微笑说话。本来平平常常的一个人，自打听说这个事情，我后来再见到老太太，总觉得有点异样，好像一个人有了故事，就会让人觉得有些不平常了。\n","slug":"simomo01","published":1,"updated":"2016-04-23T16:04:46.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinwwqjt50001j4qi7r4c0oum","content":"<hr>\n<blockquote>\n<p>圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/111.jpg\" alt=\"\"></p>\n<p>村里住着一户姓张的人家。他家原来是在屯子的东头居住，后来买了我家前院的房子就搬过来居住，这样我们两家就成了邻居。原来并不曾注意的人家，因为成了邻居，接触多了，也就多了一分关注和熟悉。</p>\n<p>他家有一个老太太，我认识她以来，她就和儿子一家人在一起生活，我从未见过她的老伴。但这并未引起我的好奇，别的人家老人没有老伴的也有。</p>\n<p>但因为是邻居了，对她和她家的事了解也就多了。一次我听屯邻给我讲了她和她老伴的事，我才知道原本一个平常无奇的老太太却是一个有故事的人。</p>\n<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/222.jpg\" alt=\"\"><br>（老奶奶：艹，无辜躺枪……orz）</p>\n<p>原来，老太太虽然其貌不扬，年轻时却嫁给了当地一位美男子，男方形象好，没的说。而老太太呢，因为小时得过天花，病好后，落下一张麻脸。等到了姑娘出嫁的年龄，却难了。</p>\n<p>那个时代，虽然还没有多少自由恋爱，但青年男女结婚前总要见上一面，算是相看，相中的就定下来。而一个年轻姑娘有张麻脸，男方一般是不会相中的。正好这时有人给她家姊妹做媒，于是女方家就想了一个调包之计，让麻脸姑娘的妹妹去相亲。</p>\n<p>到了结婚那天，把麻脸姑娘送到了男方家去成亲。一直到了结婚那天，男方才知道与他结婚的是有着麻脸的这位姑娘，然而却是生米做成了熟饭，男方也就无可奈何了。</p>\n<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/333.jpg\" alt=\"\"><br>（原谅我找了这么一张唯美又符合情境的图…）</p>\n<p>屯邻没告诉我当时男方是否反抗过，或许他也不知道。但按情理说，自己结婚的与相亲的不是一个人，男方肯定是不情愿的。伊人不见，嫫母当面，美好的想象变成了无奈的现实，放在谁身上都将是苦涩的。</p>\n<p>二人结婚后，生了一个儿子，就是老太太一直与之在一起生活的这位。再后来，听说男方有一次出去干活，受了凉，回家后肚子痛，大概是肠绞痛之类，却因此就死去了。此后就剩下老太太一个人与儿子一起生活。从年龄算来，老太太守寡时还很年轻，到现在也很多年了，不知道这算幸还是不幸。</p>\n<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/4444.png\" alt=\"\"><br>(这悲伤的表情……)</p>\n<p>最开始听到这个事，我很惊讶，甚至都有些怀疑。老太太是五六十年代过来的人，那个时代，正是中国人“大干革命”的年代。我一直认为那个时代的人都是一门心思、思想上纯而又纯。这个发生在老百姓中的真实的事让我知道，世事远没有我想的那么简单。老百姓也是有花花肠子弯弯道道的。不过因为这事发生在民间，觉得还是朴素的。</p>\n<p>老太太是很普通的一个农村老太太，性格平和，见我总是微笑说话。本来平平常常的一个人，自打听说这个事情，我后来再见到老太太，总觉得有点异样，好像一个人有了故事，就会让人觉得有些不平常了。</p>\n","excerpt":"<hr>\n<blockquote>\n<p>圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。</p>\n</blockquote>","more":"<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/111.jpg\" alt=\"\"></p>\n<p>村里住着一户姓张的人家。他家原来是在屯子的东头居住，后来买了我家前院的房子就搬过来居住，这样我们两家就成了邻居。原来并不曾注意的人家，因为成了邻居，接触多了，也就多了一分关注和熟悉。</p>\n<p>他家有一个老太太，我认识她以来，她就和儿子一家人在一起生活，我从未见过她的老伴。但这并未引起我的好奇，别的人家老人没有老伴的也有。</p>\n<p>但因为是邻居了，对她和她家的事了解也就多了。一次我听屯邻给我讲了她和她老伴的事，我才知道原本一个平常无奇的老太太却是一个有故事的人。</p>\n<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/222.jpg\" alt=\"\"><br>（老奶奶：艹，无辜躺枪……orz）</p>\n<p>原来，老太太虽然其貌不扬，年轻时却嫁给了当地一位美男子，男方形象好，没的说。而老太太呢，因为小时得过天花，病好后，落下一张麻脸。等到了姑娘出嫁的年龄，却难了。</p>\n<p>那个时代，虽然还没有多少自由恋爱，但青年男女结婚前总要见上一面，算是相看，相中的就定下来。而一个年轻姑娘有张麻脸，男方一般是不会相中的。正好这时有人给她家姊妹做媒，于是女方家就想了一个调包之计，让麻脸姑娘的妹妹去相亲。</p>\n<p>到了结婚那天，把麻脸姑娘送到了男方家去成亲。一直到了结婚那天，男方才知道与他结婚的是有着麻脸的这位姑娘，然而却是生米做成了熟饭，男方也就无可奈何了。</p>\n<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/333.jpg\" alt=\"\"><br>（原谅我找了这么一张唯美又符合情境的图…）</p>\n<p>屯邻没告诉我当时男方是否反抗过，或许他也不知道。但按情理说，自己结婚的与相亲的不是一个人，男方肯定是不情愿的。伊人不见，嫫母当面，美好的想象变成了无奈的现实，放在谁身上都将是苦涩的。</p>\n<p>二人结婚后，生了一个儿子，就是老太太一直与之在一起生活的这位。再后来，听说男方有一次出去干活，受了凉，回家后肚子痛，大概是肠绞痛之类，却因此就死去了。此后就剩下老太太一个人与儿子一起生活。从年龄算来，老太太守寡时还很年轻，到现在也很多年了，不知道这算幸还是不幸。</p>\n<p><img src=\"http://7xtawy.com2.z0.glb.clouddn.com/4444.png\" alt=\"\"><br>(这悲伤的表情……)</p>\n<p>最开始听到这个事，我很惊讶，甚至都有些怀疑。老太太是五六十年代过来的人，那个时代，正是中国人“大干革命”的年代。我一直认为那个时代的人都是一门心思、思想上纯而又纯。这个发生在老百姓中的真实的事让我知道，世事远没有我想的那么简单。老百姓也是有花花肠子弯弯道道的。不过因为这事发生在民间，觉得还是朴素的。</p>\n<p>老太太是很普通的一个农村老太太，性格平和，见我总是微笑说话。本来平平常常的一个人，自打听说这个事情，我后来再见到老太太，总觉得有点异样，好像一个人有了故事，就会让人觉得有些不平常了。</p>"},{"title":"hexo搭建属于自己的博客","date":"2016-04-23T14:11:51.000Z","_content":"\n\n\n---\n\n一直都在博客园写博客，不过最近在逛园子的时候不小心看到了`hexo`,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^\n\n为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：\n\n```js\n$ hexo new(n)    //写文章\n$ hexo generate(g)    //把文章生成页面\n$ hexo server(s)    //启动本地服务调试\n$ hexo deploy(d)    //部署到github 可与hexo g合并为 hexo d -g\n```\n\n\n<!--more-->\n\n折腾了大半天，终于搭建好了自己的博客[点这里去看看](http://jarson7426.github.io/)。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。\n\n- `备注1：如果喜欢以官方教程为主的，点这里`[hexo官方文档](https://hexo.io/zh-cn/docs/)。\n- `备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。`\n\n# 准备工作\n\n* 安装node\n    到[Node.js](http://nodejs.org/)官网下载相应平台的最新版本，一路安装即可。\n* 安装git\n    根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:\n    ![](http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png)\n* 安装hexo\n    使用以下命令安装hexo到全局\n\n    ```js\n    $ npm install -g hexo\n    ```\n\n    然后输入命令`hexo -v`输入hexo的版本号即为安装成功。\n* github准备\n    - 博客是在[github](https://github.com/)上托管维护的，所以当然需要一个github的账号了。然后创建一个名为`jarson7426.github.io`的仓库。\n    - 其中‘jarson7426’是我的账户名，下文同理。\n    - 除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。\n\n        ```js\n        git config --global user.email xxx@163.com\n        git config --global user.name xxx\n        ssh-keygen -t rsa -C xxx@163.com(邮箱地址)      // 生成ssh\n        找到.ssh文件夹打开，使用cat id_rsa.pub    //打开公钥ssh串\n        登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）\n        ```\n\n\n# 初始化\n\nok，环境都准备好了，开始激动人心的步骤了，搭建博客。\n\n在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。\n\n```js\n$ hexo init\n```\n\n# 生成静态页面\n初始化完成之后，就已经生成一篇“hello word”的文章了，现在执行以下命令把文章编译为静态页面：\n\n```js\n$ hexo generate\n```\n# 本地启动\n把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入[http://localhost:4000/](http://localhost:4000/)查看生成的页面效果。\n\n```js\n$ hexo server\n```\n\n如果你看到了下面这个画面，恭喜你，你成功了！\n![](https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png)\n\n\n# 更换主题\n上面的博客效果是hexo自己默认的主题`landscape`，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题[yilia](https://github.com/litten/hexo-theme-yilia)，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~\n\n下面贴出github上star数量最多的前10个主题：\n\n- [iissnan/hexo-theme-next](https://github.com/iissnan/hexo-theme-next)， 3510个star。\n- [litten/hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)， 1703个star。\n- [TryGhost/Casper](https://github.com/TryGhost/Casper)， 679个star。\n- [wuchong/jacman](https://github.com/wuchong/jacman)， 503个star。\n- [A-limon/pacman](https://github.com/A-limon/pacman)， 431个star。\n- [daleanthony/uno](https://github.com/daleanthony/uno)， 416个star。\n- [orderedlist/modernist](https://github.com/orderedlist/modernist)， 367个star。\n- [AlxMedia/hueman](https://github.com/presscustomizr/hueman)， 336个star。\n- [kathyqian/crisp-ghost-theme](https://github.com/kathyqian/crisp-ghost-theme)， 303个star。\n- [xiangming/landscape-plus](https://github.com/xiangming/landscape-plus)， 287个star。\n\n\n- clone主题代码\n    在目录下执行下面的命令clone主题代码：\n\n    ```js\n    $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n    ```\n\n\n- 修改配置文件\n    修改`Blog/_config.yml`文件：\n\n    ```java\n    theme: yilia    //默认为landscape\n    ```\n\n    修改`themes/yilia/_config.yml`文件：\n\n    ```js\n    # Header\n    menu:\n        主页: /\n        所有文章: /archives\n        丝茉茉: /categories/simomo/\n        相册: /photos\n    # SubNav\n    subnav:\n        github: \"https://github.com/jarson7426\"\n         weibo: \"http://weibo.com/u/2732624311\"\n        zhihu: \"#\"\n        rss: /atom.xml\n    # Content\n    excerpt_link: 阅读全文\n    fancybox: true\n    mathjax: true\n    top: true\n    # 是否开启动画效果\n    animate: true\n    # 是否在新窗口打开链接\n    open_in_new: false\n    # Miscellaneous\n    google_analytics: ''\n    favicon: /favicon.ico\n    #你的头像url\n    avatar: /img.png\n    #是否开启分享\n    share_jia: true\n    share_addthis: false\n    #是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n    #若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\n    duoshuo: jarson7426\n    #是否开启云标签\n    tagcloud: true\n    #是否开启友情链接\n    #不开启——\n    friends: false\n    #开启——\n    #friends:\n    #  百度一下: http://www.baidu.com\n    #  淘宝商城: http://www.taobao.com\n    #是否开启“关于我”。\n    #不开启——\n    #aboutme: false\n    #开启——\n    aboutme: true\n    ```\n\n- 查看效果\n    更改主题之后可以使用命令`hexo server`打开本地服务，查看效果。\n\n# 部署到github\n上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。\n\n- 部署之前先修改`Blog/_config.yml`文件。\n\n    ```js\n    deploy:\n        type: git\n        repository: https://github.com/jarson7426/jarson7426.github.io.git  //jarson7426替换为你自己的用户名\n        branch: master\n    ```\n\n    `备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。`\n\n- 然后使用以下命令进行部署。\n\n    ```js\n    $ hexo deploy\n    ```\n\n    `备注：如果执行上述命令报错，你可以试试下面这个命令再试。`\n\n    ```js\n    $ npm install hexo-deployer-git--save\n    ```\n\n部署成功后，你在浏览器中输入[jarson7426.github.io](http://jarson7426.github.io/)，就能看到和本地一样的效果了。\n\n\n# 结语\n\n可能会有同学发现，我除了使用了新的主题外，还加了很多新的东西。\n\n- 鼠标移动头像上会有旋转效果。\n- 给文章添加打赏功能。\n- 添加回到顶部的功能。\n- 添加总站访问量和文章阅读量\n\n\n其实修改这些非常简单，只要你有html、css、js的基础就可以。\n思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。\n\n如果大家还有问题，欢迎留言，我会很乐意为大家解答的。\n\n好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！\n","source":"_posts/heoll-hexo.md","raw":"---\ntitle: hexo搭建属于自己的博客\ndate: 2016-04-23 22:11:51\ncategories: 工作\ntags: [hexo, 教程]\n---\n\n\n\n---\n\n一直都在博客园写博客，不过最近在逛园子的时候不小心看到了`hexo`,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^\n\n为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：\n\n```js\n$ hexo new(n)    //写文章\n$ hexo generate(g)    //把文章生成页面\n$ hexo server(s)    //启动本地服务调试\n$ hexo deploy(d)    //部署到github 可与hexo g合并为 hexo d -g\n```\n\n\n<!--more-->\n\n折腾了大半天，终于搭建好了自己的博客[点这里去看看](http://jarson7426.github.io/)。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。\n\n- `备注1：如果喜欢以官方教程为主的，点这里`[hexo官方文档](https://hexo.io/zh-cn/docs/)。\n- `备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。`\n\n# 准备工作\n\n* 安装node\n    到[Node.js](http://nodejs.org/)官网下载相应平台的最新版本，一路安装即可。\n* 安装git\n    根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:\n    ![](http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png)\n* 安装hexo\n    使用以下命令安装hexo到全局\n\n    ```js\n    $ npm install -g hexo\n    ```\n\n    然后输入命令`hexo -v`输入hexo的版本号即为安装成功。\n* github准备\n    - 博客是在[github](https://github.com/)上托管维护的，所以当然需要一个github的账号了。然后创建一个名为`jarson7426.github.io`的仓库。\n    - 其中‘jarson7426’是我的账户名，下文同理。\n    - 除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。\n\n        ```js\n        git config --global user.email xxx@163.com\n        git config --global user.name xxx\n        ssh-keygen -t rsa -C xxx@163.com(邮箱地址)      // 生成ssh\n        找到.ssh文件夹打开，使用cat id_rsa.pub    //打开公钥ssh串\n        登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）\n        ```\n\n\n# 初始化\n\nok，环境都准备好了，开始激动人心的步骤了，搭建博客。\n\n在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。\n\n```js\n$ hexo init\n```\n\n# 生成静态页面\n初始化完成之后，就已经生成一篇“hello word”的文章了，现在执行以下命令把文章编译为静态页面：\n\n```js\n$ hexo generate\n```\n# 本地启动\n把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入[http://localhost:4000/](http://localhost:4000/)查看生成的页面效果。\n\n```js\n$ hexo server\n```\n\n如果你看到了下面这个画面，恭喜你，你成功了！\n![](https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png)\n\n\n# 更换主题\n上面的博客效果是hexo自己默认的主题`landscape`，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题[yilia](https://github.com/litten/hexo-theme-yilia)，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~\n\n下面贴出github上star数量最多的前10个主题：\n\n- [iissnan/hexo-theme-next](https://github.com/iissnan/hexo-theme-next)， 3510个star。\n- [litten/hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)， 1703个star。\n- [TryGhost/Casper](https://github.com/TryGhost/Casper)， 679个star。\n- [wuchong/jacman](https://github.com/wuchong/jacman)， 503个star。\n- [A-limon/pacman](https://github.com/A-limon/pacman)， 431个star。\n- [daleanthony/uno](https://github.com/daleanthony/uno)， 416个star。\n- [orderedlist/modernist](https://github.com/orderedlist/modernist)， 367个star。\n- [AlxMedia/hueman](https://github.com/presscustomizr/hueman)， 336个star。\n- [kathyqian/crisp-ghost-theme](https://github.com/kathyqian/crisp-ghost-theme)， 303个star。\n- [xiangming/landscape-plus](https://github.com/xiangming/landscape-plus)， 287个star。\n\n\n- clone主题代码\n    在目录下执行下面的命令clone主题代码：\n\n    ```js\n    $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n    ```\n\n\n- 修改配置文件\n    修改`Blog/_config.yml`文件：\n\n    ```java\n    theme: yilia    //默认为landscape\n    ```\n\n    修改`themes/yilia/_config.yml`文件：\n\n    ```js\n    # Header\n    menu:\n        主页: /\n        所有文章: /archives\n        丝茉茉: /categories/simomo/\n        相册: /photos\n    # SubNav\n    subnav:\n        github: \"https://github.com/jarson7426\"\n         weibo: \"http://weibo.com/u/2732624311\"\n        zhihu: \"#\"\n        rss: /atom.xml\n    # Content\n    excerpt_link: 阅读全文\n    fancybox: true\n    mathjax: true\n    top: true\n    # 是否开启动画效果\n    animate: true\n    # 是否在新窗口打开链接\n    open_in_new: false\n    # Miscellaneous\n    google_analytics: ''\n    favicon: /favicon.ico\n    #你的头像url\n    avatar: /img.png\n    #是否开启分享\n    share_jia: true\n    share_addthis: false\n    #是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key\n    #若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论\n    duoshuo: jarson7426\n    #是否开启云标签\n    tagcloud: true\n    #是否开启友情链接\n    #不开启——\n    friends: false\n    #开启——\n    #friends:\n    #  百度一下: http://www.baidu.com\n    #  淘宝商城: http://www.taobao.com\n    #是否开启“关于我”。\n    #不开启——\n    #aboutme: false\n    #开启——\n    aboutme: true\n    ```\n\n- 查看效果\n    更改主题之后可以使用命令`hexo server`打开本地服务，查看效果。\n\n# 部署到github\n上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。\n\n- 部署之前先修改`Blog/_config.yml`文件。\n\n    ```js\n    deploy:\n        type: git\n        repository: https://github.com/jarson7426/jarson7426.github.io.git  //jarson7426替换为你自己的用户名\n        branch: master\n    ```\n\n    `备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。`\n\n- 然后使用以下命令进行部署。\n\n    ```js\n    $ hexo deploy\n    ```\n\n    `备注：如果执行上述命令报错，你可以试试下面这个命令再试。`\n\n    ```js\n    $ npm install hexo-deployer-git--save\n    ```\n\n部署成功后，你在浏览器中输入[jarson7426.github.io](http://jarson7426.github.io/)，就能看到和本地一样的效果了。\n\n\n# 结语\n\n可能会有同学发现，我除了使用了新的主题外，还加了很多新的东西。\n\n- 鼠标移动头像上会有旋转效果。\n- 给文章添加打赏功能。\n- 添加回到顶部的功能。\n- 添加总站访问量和文章阅读量\n\n\n其实修改这些非常简单，只要你有html、css、js的基础就可以。\n思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。\n\n如果大家还有问题，欢迎留言，我会很乐意为大家解答的。\n\n好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！\n","slug":"heoll-hexo","published":1,"updated":"2016-04-25T15:48:59.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinwwqjt50004j4qip286sywn","content":"<hr>\n<p>一直都在博客园写博客，不过最近在逛园子的时候不小心看到了<code>hexo</code>,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^</p>\n<p>为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span>(n)    <span class=\"comment\">//写文章</span></span><br><span class=\"line\">$ hexo generate(g)    <span class=\"comment\">//把文章生成页面</span></span><br><span class=\"line\">$ hexo server(s)    <span class=\"comment\">//启动本地服务调试</span></span><br><span class=\"line\">$ hexo deploy(d)    <span class=\"comment\">//部署到github 可与hexo g合并为 hexo d -g</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>折腾了大半天，终于搭建好了自己的博客<a href=\"http://jarson7426.github.io/\" target=\"_blank\" rel=\"external\">点这里去看看</a>。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。</p>\n<ul>\n<li><code>备注1：如果喜欢以官方教程为主的，点这里</code><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">hexo官方文档</a>。</li>\n<li><code>备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。</code></li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>安装node<br>  到<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a>官网下载相应平台的最新版本，一路安装即可。</li>\n<li>安装git<br>  根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:<br>  <img src=\"http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png\" alt=\"\"></li>\n<li><p>安装hexo<br>  使用以下命令安装hexo到全局</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>  然后输入命令<code>hexo -v</code>输入hexo的版本号即为安装成功。</p>\n</li>\n<li><p>github准备</p>\n<ul>\n<li>博客是在<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>上托管维护的，所以当然需要一个github的账号了。然后创建一个名为<code>jarson7426.github.io</code>的仓库。</li>\n<li>其中‘jarson7426’是我的账户名，下文同理。</li>\n<li><p>除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.email xxx@<span class=\"number\">163.</span>com</span><br><span class=\"line\">git config --global user.name xxx</span><br><span class=\"line\">ssh-keygen -t rsa -C xxx@<span class=\"number\">163.</span>com(邮箱地址)      <span class=\"comment\">// 生成ssh</span></span><br><span class=\"line\">找到.ssh文件夹打开，使用cat id_rsa.pub    <span class=\"comment\">//打开公钥ssh串</span></span><br><span class=\"line\">登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>ok，环境都准备好了，开始激动人心的步骤了，搭建博客。</p>\n<p>在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h1><p>初始化完成之后，就已经生成一篇“hello word”的文章了，现在执行以下命令把文章编译为静态页面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<h1 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h1><p>把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>查看生成的页面效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>如果你看到了下面这个画面，恭喜你，你成功了！<br><img src=\"https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png\" alt=\"\"></p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>上面的博客效果是hexo自己默认的主题<code>landscape</code>，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">yilia</a>，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~</p>\n<p>下面贴出github上star数量最多的前10个主题：</p>\n<ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">iissnan/hexo-theme-next</a>， 3510个star。</li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">litten/hexo-theme-yilia</a>， 1703个star。</li>\n<li><a href=\"https://github.com/TryGhost/Casper\" target=\"_blank\" rel=\"external\">TryGhost/Casper</a>， 679个star。</li>\n<li><a href=\"https://github.com/wuchong/jacman\" target=\"_blank\" rel=\"external\">wuchong/jacman</a>， 503个star。</li>\n<li><a href=\"https://github.com/A-limon/pacman\" target=\"_blank\" rel=\"external\">A-limon/pacman</a>， 431个star。</li>\n<li><a href=\"https://github.com/daleanthony/uno\" target=\"_blank\" rel=\"external\">daleanthony/uno</a>， 416个star。</li>\n<li><a href=\"https://github.com/orderedlist/modernist\" target=\"_blank\" rel=\"external\">orderedlist/modernist</a>， 367个star。</li>\n<li><a href=\"https://github.com/presscustomizr/hueman\" target=\"_blank\" rel=\"external\">AlxMedia/hueman</a>， 336个star。</li>\n<li><a href=\"https://github.com/kathyqian/crisp-ghost-theme\" target=\"_blank\" rel=\"external\">kathyqian/crisp-ghost-theme</a>， 303个star。</li>\n<li><a href=\"https://github.com/xiangming/landscape-plus\" target=\"_blank\" rel=\"external\">xiangming/landscape-plus</a>， 287个star。</li>\n</ul>\n<ul>\n<li><p>clone主题代码<br>  在目录下执行下面的命令clone主题代码：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone https:<span class=\"comment\">//github.com/litten/hexo-theme-yilia.git themes/yilia</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<br>  修改<code>Blog/_config.yml</code>文件：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: yilia    <span class=\"comment\">//默认为landscape</span></span><br></pre></td></tr></table></figure>\n<p>  修改<code>themes/yilia/_config.yml</code>文件：</p>\n  <figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Header</span><br><span class=\"line\">menu:</span><br><span class=\"line\">    主页: /</span><br><span class=\"line\">    所有文章: /archives</span><br><span class=\"line\">    丝茉茉: /categories/simomo/</span><br><span class=\"line\">    相册: /photos</span><br><span class=\"line\"># SubNav</span><br><span class=\"line\">subnav:</span><br><span class=\"line\">    github: \"https://github.com/jarson7426\"</span><br><span class=\"line\">     weibo: \"http://weibo.com/u/2732624311\"</span><br><span class=\"line\">    zhihu: \"#\"</span><br><span class=\"line\">    rss: /atom.xml</span><br><span class=\"line\"># Content</span><br><span class=\"line\">excerpt_link: 阅读全文</span><br><span class=\"line\">fancybox: true</span><br><span class=\"line\">mathjax: true</span><br><span class=\"line\">top: true</span><br><span class=\"line\"># 是否开启动画效果</span><br><span class=\"line\">animate: true</span><br><span class=\"line\"># 是否在新窗口打开链接</span><br><span class=\"line\">open_in_new: false</span><br><span class=\"line\"># Miscellaneous</span><br><span class=\"line\">google_analytics: ''</span><br><span class=\"line\">favicon: /favicon.ico</span><br><span class=\"line\">#你的头像url</span><br><span class=\"line\">avatar: /img.png</span><br><span class=\"line\">#是否开启分享</span><br><span class=\"line\">share_jia: true</span><br><span class=\"line\">share_addthis: false</span><br><span class=\"line\">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</span><br><span class=\"line\">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span><br><span class=\"line\">duoshuo: jarson7426</span><br><span class=\"line\">#是否开启云标签</span><br><span class=\"line\">tagcloud: true</span><br><span class=\"line\">#是否开启友情链接</span><br><span class=\"line\">#不开启——</span><br><span class=\"line\">friends: false</span><br><span class=\"line\">#开启——</span><br><span class=\"line\">#friends:</span><br><span class=\"line\">#  百度一下: http://www.baidu.com</span><br><span class=\"line\">#  淘宝商城: http://www.taobao.com</span><br><span class=\"line\">#是否开启“关于我”。</span><br><span class=\"line\">#不开启——</span><br><span class=\"line\">#aboutme: false</span><br><span class=\"line\">#开启——</span><br><span class=\"line\">aboutme: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看效果<br>  更改主题之后可以使用命令<code>hexo server</code>打开本地服务，查看效果。</p>\n</li>\n</ul>\n<h1 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h1><p>上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。</p>\n<ul>\n<li><p>部署之前先修改<code>Blog/_config.yml</code>文件。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repository: https:<span class=\"comment\">//github.com/jarson7426/jarson7426.github.io.git  //jarson7426替换为你自己的用户名</span></span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<p>  <code>备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。</code></p>\n</li>\n<li><p>然后使用以下命令进行部署。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>  <code>备注：如果执行上述命令报错，你可以试试下面这个命令再试。</code></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git--save</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>部署成功后，你在浏览器中输入<a href=\"http://jarson7426.github.io/\" target=\"_blank\" rel=\"external\">jarson7426.github.io</a>，就能看到和本地一样的效果了。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可能会有同学发现，我除了使用了新的主题外，还加了很多新的东西。</p>\n<ul>\n<li>鼠标移动头像上会有旋转效果。</li>\n<li>给文章添加打赏功能。</li>\n<li>添加回到顶部的功能。</li>\n<li>添加总站访问量和文章阅读量</li>\n</ul>\n<p>其实修改这些非常简单，只要你有html、css、js的基础就可以。<br>思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。</p>\n<p>如果大家还有问题，欢迎留言，我会很乐意为大家解答的。</p>\n<p>好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！</p>\n","excerpt":"<hr>\n<p>一直都在博客园写博客，不过最近在逛园子的时候不小心看到了<code>hexo</code>,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^</p>\n<p>为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span>(n)    <span class=\"comment\">//写文章</span></span><br><span class=\"line\">$ hexo generate(g)    <span class=\"comment\">//把文章生成页面</span></span><br><span class=\"line\">$ hexo server(s)    <span class=\"comment\">//启动本地服务调试</span></span><br><span class=\"line\">$ hexo deploy(d)    <span class=\"comment\">//部署到github 可与hexo g合并为 hexo d -g</span></span><br></pre></td></tr></table></figure>","more":"<p>折腾了大半天，终于搭建好了自己的博客<a href=\"http://jarson7426.github.io/\">点这里去看看</a>。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。</p>\n<ul>\n<li><code>备注1：如果喜欢以官方教程为主的，点这里</code><a href=\"https://hexo.io/zh-cn/docs/\">hexo官方文档</a>。</li>\n<li><code>备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。</code></li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>安装node<br>  到<a href=\"http://nodejs.org/\">Node.js</a>官网下载相应平台的最新版本，一路安装即可。</li>\n<li>安装git<br>  根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:<br>  <img src=\"http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png\" alt=\"\"></li>\n<li><p>安装hexo<br>  使用以下命令安装hexo到全局</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>  然后输入命令<code>hexo -v</code>输入hexo的版本号即为安装成功。</p>\n</li>\n<li><p>github准备</p>\n<ul>\n<li>博客是在<a href=\"https://github.com/\">github</a>上托管维护的，所以当然需要一个github的账号了。然后创建一个名为<code>jarson7426.github.io</code>的仓库。</li>\n<li>其中‘jarson7426’是我的账户名，下文同理。</li>\n<li><p>除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.email xxx@<span class=\"number\">163.</span>com</span><br><span class=\"line\">git config --global user.name xxx</span><br><span class=\"line\">ssh-keygen -t rsa -C xxx@<span class=\"number\">163.</span>com(邮箱地址)      <span class=\"comment\">// 生成ssh</span></span><br><span class=\"line\">找到.ssh文件夹打开，使用cat id_rsa.pub    <span class=\"comment\">//打开公钥ssh串</span></span><br><span class=\"line\">登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>ok，环境都准备好了，开始激动人心的步骤了，搭建博客。</p>\n<p>在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h1><p>初始化完成之后，就已经生成一篇“hello word”的文章了，现在执行以下命令把文章编译为静态页面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<h1 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h1><p>把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入<a href=\"http://localhost:4000/\">http://localhost:4000/</a>查看生成的页面效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>如果你看到了下面这个画面，恭喜你，你成功了！<br><img src=\"https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png\" alt=\"\"></p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>上面的博客效果是hexo自己默认的主题<code>landscape</code>，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia</a>，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~</p>\n<p>下面贴出github上star数量最多的前10个主题：</p>\n<ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">iissnan/hexo-theme-next</a>， 3510个star。</li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\">litten/hexo-theme-yilia</a>， 1703个star。</li>\n<li><a href=\"https://github.com/TryGhost/Casper\">TryGhost/Casper</a>， 679个star。</li>\n<li><a href=\"https://github.com/wuchong/jacman\">wuchong/jacman</a>， 503个star。</li>\n<li><a href=\"https://github.com/A-limon/pacman\">A-limon/pacman</a>， 431个star。</li>\n<li><a href=\"https://github.com/daleanthony/uno\">daleanthony/uno</a>， 416个star。</li>\n<li><a href=\"https://github.com/orderedlist/modernist\">orderedlist/modernist</a>， 367个star。</li>\n<li><a href=\"https://github.com/presscustomizr/hueman\">AlxMedia/hueman</a>， 336个star。</li>\n<li><a href=\"https://github.com/kathyqian/crisp-ghost-theme\">kathyqian/crisp-ghost-theme</a>， 303个star。</li>\n<li><a href=\"https://github.com/xiangming/landscape-plus\">xiangming/landscape-plus</a>， 287个star。</li>\n</ul>\n<ul>\n<li><p>clone主题代码<br>  在目录下执行下面的命令clone主题代码：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone https:<span class=\"comment\">//github.com/litten/hexo-theme-yilia.git themes/yilia</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<br>  修改<code>Blog/_config.yml</code>文件：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: yilia    <span class=\"comment\">//默认为landscape</span></span><br></pre></td></tr></table></figure>\n<p>  修改<code>themes/yilia/_config.yml</code>文件：</p>\n  <figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Header</span><br><span class=\"line\">menu:</span><br><span class=\"line\">    主页: /</span><br><span class=\"line\">    所有文章: /archives</span><br><span class=\"line\">    丝茉茉: /categories/simomo/</span><br><span class=\"line\">    相册: /photos</span><br><span class=\"line\"># SubNav</span><br><span class=\"line\">subnav:</span><br><span class=\"line\">    github: \"https://github.com/jarson7426\"</span><br><span class=\"line\">     weibo: \"http://weibo.com/u/2732624311\"</span><br><span class=\"line\">    zhihu: \"#\"</span><br><span class=\"line\">    rss: /atom.xml</span><br><span class=\"line\"># Content</span><br><span class=\"line\">excerpt_link: 阅读全文</span><br><span class=\"line\">fancybox: true</span><br><span class=\"line\">mathjax: true</span><br><span class=\"line\">top: true</span><br><span class=\"line\"># 是否开启动画效果</span><br><span class=\"line\">animate: true</span><br><span class=\"line\"># 是否在新窗口打开链接</span><br><span class=\"line\">open_in_new: false</span><br><span class=\"line\"># Miscellaneous</span><br><span class=\"line\">google_analytics: ''</span><br><span class=\"line\">favicon: /favicon.ico</span><br><span class=\"line\">#你的头像url</span><br><span class=\"line\">avatar: /img.png</span><br><span class=\"line\">#是否开启分享</span><br><span class=\"line\">share_jia: true</span><br><span class=\"line\">share_addthis: false</span><br><span class=\"line\">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</span><br><span class=\"line\">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span><br><span class=\"line\">duoshuo: jarson7426</span><br><span class=\"line\">#是否开启云标签</span><br><span class=\"line\">tagcloud: true</span><br><span class=\"line\">#是否开启友情链接</span><br><span class=\"line\">#不开启——</span><br><span class=\"line\">friends: false</span><br><span class=\"line\">#开启——</span><br><span class=\"line\">#friends:</span><br><span class=\"line\">#  百度一下: http://www.baidu.com</span><br><span class=\"line\">#  淘宝商城: http://www.taobao.com</span><br><span class=\"line\">#是否开启“关于我”。</span><br><span class=\"line\">#不开启——</span><br><span class=\"line\">#aboutme: false</span><br><span class=\"line\">#开启——</span><br><span class=\"line\">aboutme: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看效果<br>  更改主题之后可以使用命令<code>hexo server</code>打开本地服务，查看效果。</p>\n</li>\n</ul>\n<h1 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h1><p>上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。</p>\n<ul>\n<li><p>部署之前先修改<code>Blog/_config.yml</code>文件。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repository: https:<span class=\"comment\">//github.com/jarson7426/jarson7426.github.io.git  //jarson7426替换为你自己的用户名</span></span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<p>  <code>备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。</code></p>\n</li>\n<li><p>然后使用以下命令进行部署。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>  <code>备注：如果执行上述命令报错，你可以试试下面这个命令再试。</code></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git--save</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>部署成功后，你在浏览器中输入<a href=\"http://jarson7426.github.io/\">jarson7426.github.io</a>，就能看到和本地一样的效果了。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>可能会有同学发现，我除了使用了新的主题外，还加了很多新的东西。</p>\n<ul>\n<li>鼠标移动头像上会有旋转效果。</li>\n<li>给文章添加打赏功能。</li>\n<li>添加回到顶部的功能。</li>\n<li>添加总站访问量和文章阅读量</li>\n</ul>\n<p>其实修改这些非常简单，只要你有html、css、js的基础就可以。<br>思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。</p>\n<p>如果大家还有问题，欢迎留言，我会很乐意为大家解答的。</p>\n<p>好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cinwwqjsq0000j4qi5vwa48os","category_id":"cinwwqjt50003j4qin2bxoq56","_id":"cinwwqjtl0007j4qimgs2swl3"},{"post_id":"cinwwqjt50001j4qi7r4c0oum","category_id":"cinwwqjtl0006j4qi7h5feeqs","_id":"cinwwqjtl000aj4qi1jqsjncs"},{"post_id":"cinwwqjt50004j4qip286sywn","category_id":"cinwwqjt50003j4qin2bxoq56","_id":"cinwwqjtl000cj4qiomrvuh09"}],"PostTag":[{"post_id":"cinwwqjsq0000j4qi5vwa48os","tag_id":"cinwwqjt50002j4qilrypfe3q","_id":"cinwwqjtl000ej4qi5h9mhtb4"},{"post_id":"cinwwqjsq0000j4qi5vwa48os","tag_id":"cinwwqjtl0005j4qizd039ewv","_id":"cinwwqjtl000fj4qirzpzhu97"},{"post_id":"cinwwqjsq0000j4qi5vwa48os","tag_id":"cinwwqjtl0008j4qirux2q6dz","_id":"cinwwqjtl000hj4qimjn7svk6"},{"post_id":"cinwwqjsq0000j4qi5vwa48os","tag_id":"cinwwqjtl000bj4qimuraclje","_id":"cinwwqjtl000ij4qigv3707g1"},{"post_id":"cinwwqjt50004j4qip286sywn","tag_id":"cinwwqjtl000dj4qip2d9rvo3","_id":"cinwwqjtl000jj4qikly8svxj"},{"post_id":"cinwwqjt50004j4qip286sywn","tag_id":"cinwwqjtl000bj4qimuraclje","_id":"cinwwqjtl000kj4qioicxmbmm"}],"Tag":[{"name":"grunt","_id":"cinwwqjt50002j4qilrypfe3q"},{"name":"angular","_id":"cinwwqjtl0005j4qizd039ewv"},{"name":"构建","_id":"cinwwqjtl0008j4qirux2q6dz"},{"name":"教程","_id":"cinwwqjtl000bj4qimuraclje"},{"name":"hexo","_id":"cinwwqjtl000dj4qip2d9rvo3"}]}}