<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jarson的博客</title>
  <subtitle>我就是我，颜色不一样的烟火</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-02T14:52:17.550Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jarson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前后端分离之前端项目构建（grunt+require+angular）</title>
    <link href="http://yoursite.com/work/2016-05-02/grunt-angular.html"/>
    <id>http://yoursite.com/work/2016-05-02/grunt-angular.html</id>
    <published>2016-05-02T14:33:32.000Z</published>
    <updated>2016-05-02T14:52:17.550Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好＝＝&lt;/p&gt;
&lt;p&gt;可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。&lt;/p&gt;
&lt;p&gt;此时你会深深的感受到了那句名言的魅力，&lt;code&gt;时间就是金钱！&lt;/code&gt;后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞&lt;code&gt;前后端分离了&lt;/code&gt;！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;前后端分离的目的和作用&quot;&gt;&lt;a href=&quot;#前后端分离的目的和作用&quot; class=&quot;headerlink&quot; title=&quot;前后端分离的目的和作用&quot;&gt;&lt;/a&gt;前后端分离的目的和作用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。&lt;/p&gt;
&lt;p&gt;所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。&lt;/p&gt;
&lt;h1 id=&quot;前端项目构建&quot;&gt;&lt;a href=&quot;#前端项目构建&quot; class=&quot;headerlink&quot; title=&quot;前端项目构建&quot;&gt;&lt;/a&gt;前端项目构建&lt;/h1&gt;&lt;p&gt;现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。&lt;/p&gt;
&lt;p&gt;现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;requireJs: js库加载管理，支持按需加载，模块化引入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。&lt;/p&gt;
&lt;h2 id=&quot;创建项目目录&quot;&gt;&lt;a href=&quot;#创建项目目录&quot; class=&quot;headerlink&quot; title=&quot;创建项目目录&quot;&gt;&lt;/a&gt;创建项目目录&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir myProject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd myProject&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。&lt;/p&gt;
&lt;h2 id=&quot;创建package-json&quot;&gt;&lt;a href=&quot;#创建package-json&quot; class=&quot;headerlink&quot; title=&quot;创建package.json&quot;&gt;&lt;/a&gt;创建package.json&lt;/h2&gt;&lt;p&gt;&lt;code&gt;首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以用命令生成，后续也能够手动修改。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;他会问我们一些问题，一路使用默认值，创建完毕。&lt;/p&gt;
&lt;h2 id=&quot;安装grunt&quot;&gt;&lt;a href=&quot;#安装grunt&quot; class=&quot;headerlink&quot; title=&quot;安装grunt&quot;&gt;&lt;/a&gt;安装grunt&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用npm安装grunt插件，它将被安装到根目录的&lt;code&gt;node_modules&lt;/code&gt;文件夹下，所有npm插件都会放到这里。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--save-dev&lt;/code&gt;： 意思是安装插件的同时，也把它添加到项目信息文件&lt;code&gt;package.json&lt;/code&gt;中的&lt;code&gt;devDependencies&lt;/code&gt;字段里，意思是这个项目依赖于这些插件。下次使用&lt;code&gt;npm install&lt;/code&gt;的时候就会自动安装这些插件。&lt;/p&gt;
&lt;h2 id=&quot;为grunt创建配置文件Gruntfile-js&quot;&gt;&lt;a href=&quot;#为grunt创建配置文件Gruntfile-js&quot; class=&quot;headerlink&quot; title=&quot;为grunt创建配置文件Gruntfile.js&quot;&gt;&lt;/a&gt;为grunt创建配置文件Gruntfile.js&lt;/h2&gt;&lt;p&gt;Gruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装grunt-init&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt-init -g      &lt;span class=&quot;comment&quot;&gt;//全局安装grunt-init&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载grunt模板&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https:&lt;span class=&quot;comment&quot;&gt;//github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成Gruntfile&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grunt-init gruntfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装bower&quot;&gt;&lt;a href=&quot;#安装bower&quot; class=&quot;headerlink&quot; title=&quot;安装bower&quot;&gt;&lt;/a&gt;安装bower&lt;/h2&gt;&lt;p&gt;bower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。&lt;/p&gt;
&lt;p&gt;同样适用npm进行安装。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install bower -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;为bower生成配置文件bower-json&quot;&gt;&lt;a href=&quot;#为bower生成配置文件bower-json&quot; class=&quot;headerlink&quot; title=&quot;为bower生成配置文件bower.json&quot;&gt;&lt;/a&gt;为bower生成配置文件bower.json&lt;/h2&gt;&lt;p&gt;整个项目的信息文件是&lt;code&gt;package.json&lt;/code&gt;，执行任务插件grunt的信息文件是&lt;code&gt;Gruntfile.js&lt;/code&gt;，那么bower当然也有自己的信息文件了，那就是&lt;code&gt;bower.json&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bower init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。&lt;/p&gt;
&lt;p&gt;比如使用bower下载angularjs：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bower install angularjs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这行命令将会把angular下载下来，放在根目录下的&lt;code&gt;bower_components&lt;/code&gt;文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bower install angularjs#1.2.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，bower只负责下载文件到&lt;code&gt;bower_components&lt;/code&gt;目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件&lt;code&gt;grunt-bower-task&lt;/code&gt;，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。&lt;/p&gt;
&lt;h2 id=&quot;关于Requirejs&quot;&gt;&lt;a href=&quot;#关于Requirejs&quot; class=&quot;headerlink&quot; title=&quot;关于Requirejs&quot;&gt;&lt;/a&gt;关于Requirejs&lt;/h2&gt;&lt;p&gt;官网上是这样说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RequireJS的目标是鼓励代码的模块化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。&lt;/p&gt;
&lt;h2 id=&quot;使用Requirejs&quot;&gt;&lt;a href=&quot;#使用Requirejs&quot; class=&quot;headerlink&quot; title=&quot;使用Requirejs&quot;&gt;&lt;/a&gt;使用Requirejs&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script data-main=&amp;quot;scripts/main&amp;quot; src=&amp;quot;scripts/require.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一般在首页加载requiejs文件，然后属性&lt;code&gt;data-main&lt;/code&gt;指定的文件就是接下来要加载的文件，然后我们再看&lt;code&gt;main.js&lt;/code&gt;文件:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.config(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	baseUrl: &lt;span class=&quot;string&quot;&gt;&#39;script/lib&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	paths: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		app: &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		jquery: &lt;span class=&quot;string&quot;&gt;&#39;/jquery/jquery-min&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		angular: &lt;span class=&quot;string&quot;&gt;&#39;/angularjs/angular-min&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	shim: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            exports: &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;app&lt;/span&gt;) (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	app.hello(&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们在&lt;code&gt;paths&lt;/code&gt;中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shim&lt;/code&gt;中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫&lt;code&gt;angular&lt;/code&gt;的模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了&lt;code&gt;app.hello()&lt;/code&gt;方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;AngularJs实例&quot;&gt;&lt;a href=&quot;#AngularJs实例&quot; class=&quot;headerlink&quot; title=&quot;AngularJs实例&quot;&gt;&lt;/a&gt;AngularJs实例&lt;/h1&gt;&lt;p&gt;上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。&lt;/p&gt;
&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;p&gt;项目文件夹结构如下图（当然目录结构因人而异）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;node_modules&lt;/code&gt;: 用来存放项目依赖的grunt插件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bower_components&lt;/code&gt;: 用来存放bower下载的库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;build&lt;/code&gt;: 用来存放经过build处理之后的js文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;app&lt;/code&gt;: 是真正的开发需要的文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;data&lt;/code&gt;: 用来存放mock数据用的json文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;images&lt;/code&gt;: 用来存放静态图片。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scripts&lt;/code&gt;: 用来存放所有js文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;controller&lt;/code&gt;: 用来存放控制器文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;directive&lt;/code&gt;: 定义的指令文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;: 定义的过滤器文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;route&lt;/code&gt;: 路由文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;service&lt;/code&gt;: 服务文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt;: 公共库文件，比如angular,jquery,bootstrap等等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;styles&lt;/code&gt;目录用来存放样式文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;views&lt;/code&gt;目录用来存放&lt;code&gt;页面&lt;/code&gt;html文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;partials&lt;/code&gt;目录用来存放&lt;code&gt;页面片段&lt;/code&gt;的html文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录创建好了，现在来写一些代码，让项目能够运行起来。&lt;/p&gt;
&lt;h2 id=&quot;views-index-html&quot;&gt;&lt;a href=&quot;#views-index-html&quot; class=&quot;headerlink&quot; title=&quot;views/index.html&quot;&gt;&lt;/a&gt;views/index.html&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;grunt+requirejs+angular项目构建&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../scripts/vendor/requirejs/require.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-main&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../scripts/config&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 先引入requirejs, 然后引入config.js --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-controller&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;testController&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&amp;#123;app&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述index中，先引入了require.js，然后加载data-main对应的config.js文件。&lt;/p&gt;
&lt;h2 id=&quot;scripts-config-js&quot;&gt;&lt;a href=&quot;#scripts-config-js&quot; class=&quot;headerlink&quot; title=&quot;scripts/config.js&quot;&gt;&lt;/a&gt;scripts/config.js&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vendorPath = &lt;span class=&quot;string&quot;&gt;&#39;vendor/&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.config(&amp;#123;    &lt;span class=&quot;comment&quot;&gt;//配置模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    baseUrl: &lt;span class=&quot;string&quot;&gt;&#39;../scripts/&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    paths: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;: vendorPath + &lt;span class=&quot;string&quot;&gt;&#39;angular/angular&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;: vendorPath + &lt;span class=&quot;string&quot;&gt;&#39;jquery/jquery&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shim: &amp;#123;   &lt;span class=&quot;comment&quot;&gt;//处理没有遵守requirejs规范的js库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            exports: &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&#39;./bootstrap&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;bootstrap&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过require引入了bootstrap.js文件。&lt;/p&gt;
&lt;h2 id=&quot;scripts-bootstrap-js&quot;&gt;&lt;a href=&quot;#scripts-bootstrap-js&quot; class=&quot;headerlink&quot; title=&quot;scripts/bootstrap.js&quot;&gt;&lt;/a&gt;scripts/bootstrap.js&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./controller/_base&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;angular&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 手动将angular模块绑定到document对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    angular.element(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        angular.bootstrap(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;myProject&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;注意：function的内容是requirejs引入所有文件之后的回调函数。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;bootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。&lt;/p&gt;
&lt;h2 id=&quot;scripts-app-js&quot;&gt;&lt;a href=&quot;#scripts-app-js&quot; class=&quot;headerlink&quot; title=&quot;scripts/app.js&quot;&gt;&lt;/a&gt;scripts/app.js&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./controller/controllers&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;angular&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//定义将要绑定到document上的模块名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angular.module(&lt;span class=&quot;string&quot;&gt;&#39;myProject&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;projectController&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义模块名&lt;code&gt;myProject&lt;/code&gt;的时候，同时指定它依赖于另一个模块&lt;code&gt;projectController&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同时在&lt;code&gt;./controller/controllers.js&lt;/code&gt;中定义这个模块：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define([&lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;angular&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angular.module(&lt;span class=&quot;string&quot;&gt;&#39;projectController&#39;&lt;/span&gt;, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。&lt;/p&gt;
&lt;h2 id=&quot;controller-testController-js&quot;&gt;&lt;a href=&quot;#controller-testController-js&quot; class=&quot;headerlink&quot; title=&quot;controller/testController.js&quot;&gt;&lt;/a&gt;controller/testController.js&lt;/h2&gt;&lt;p&gt;如果想要让视图文件&lt;code&gt;views/index.html&lt;/code&gt;能够看到效果，我们就要开始编写控制器文件了，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./controllers&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mod&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; controllerFn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$scope, $location&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $scope.app = &lt;span class=&quot;string&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    controllerFn.$inject = [&lt;span class=&quot;string&quot;&gt;&#39;$scope&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;$location&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mod.controller(&lt;span class=&quot;string&quot;&gt;&#39;testController&#39;&lt;/span&gt;, controllerFn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引入控制器的单独模块文件’./controllers’,然后在模块上新建一个名为&lt;code&gt;testController&lt;/code&gt;的控制器，并在$scope上绑定了一个值为‘hello, world’的变量&lt;code&gt;app&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;查看效果&quot;&gt;&lt;a href=&quot;#查看效果&quot; class=&quot;headerlink&quot; title=&quot;查看效果&quot;&gt;&lt;/a&gt;查看效果&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;启动一个简单的web服务器，默认监听8000端口。在浏览器输入正确地址就能看到效果了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hello, world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好＝＝&lt;/p&gt;
&lt;p&gt;可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。&lt;/p&gt;
&lt;p&gt;此时你会深深的感受到了那句名言的魅力，&lt;code&gt;时间就是金钱！&lt;/code&gt;后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞&lt;code&gt;前后端分离了&lt;/code&gt;！&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="grunt" scheme="http://yoursite.com/tags/grunt/"/>
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
      <category term="构建" scheme="http://yoursite.com/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一个有故事的人</title>
    <link href="http://yoursite.com/simomo/2016-04-23/simomo01.html"/>
    <id>http://yoursite.com/simomo/2016-04-23/simomo01.html</id>
    <published>2016-04-23T14:54:48.000Z</published>
    <updated>2016-04-23T16:04:46.155Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/111.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;村里住着一户姓张的人家。他家原来是在屯子的东头居住，后来买了我家前院的房子就搬过来居住，这样我们两家就成了邻居。原来并不曾注意的人家，因为成了邻居，接触多了，也就多了一分关注和熟悉。&lt;/p&gt;
&lt;p&gt;他家有一个老太太，我认识她以来，她就和儿子一家人在一起生活，我从未见过她的老伴。但这并未引起我的好奇，别的人家老人没有老伴的也有。&lt;/p&gt;
&lt;p&gt;但因为是邻居了，对她和她家的事了解也就多了。一次我听屯邻给我讲了她和她老伴的事，我才知道原本一个平常无奇的老太太却是一个有故事的人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/222.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（老奶奶：艹，无辜躺枪……orz）&lt;/p&gt;
&lt;p&gt;原来，老太太虽然其貌不扬，年轻时却嫁给了当地一位美男子，男方形象好，没的说。而老太太呢，因为小时得过天花，病好后，落下一张麻脸。等到了姑娘出嫁的年龄，却难了。&lt;/p&gt;
&lt;p&gt;那个时代，虽然还没有多少自由恋爱，但青年男女结婚前总要见上一面，算是相看，相中的就定下来。而一个年轻姑娘有张麻脸，男方一般是不会相中的。正好这时有人给她家姊妹做媒，于是女方家就想了一个调包之计，让麻脸姑娘的妹妹去相亲。&lt;/p&gt;
&lt;p&gt;到了结婚那天，把麻脸姑娘送到了男方家去成亲。一直到了结婚那天，男方才知道与他结婚的是有着麻脸的这位姑娘，然而却是生米做成了熟饭，男方也就无可奈何了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/333.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（原谅我找了这么一张唯美又符合情境的图…）&lt;/p&gt;
&lt;p&gt;屯邻没告诉我当时男方是否反抗过，或许他也不知道。但按情理说，自己结婚的与相亲的不是一个人，男方肯定是不情愿的。伊人不见，嫫母当面，美好的想象变成了无奈的现实，放在谁身上都将是苦涩的。&lt;/p&gt;
&lt;p&gt;二人结婚后，生了一个儿子，就是老太太一直与之在一起生活的这位。再后来，听说男方有一次出去干活，受了凉，回家后肚子痛，大概是肠绞痛之类，却因此就死去了。此后就剩下老太太一个人与儿子一起生活。从年龄算来，老太太守寡时还很年轻，到现在也很多年了，不知道这算幸还是不幸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/4444.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(这悲伤的表情……)&lt;/p&gt;
&lt;p&gt;最开始听到这个事，我很惊讶，甚至都有些怀疑。老太太是五六十年代过来的人，那个时代，正是中国人“大干革命”的年代。我一直认为那个时代的人都是一门心思、思想上纯而又纯。这个发生在老百姓中的真实的事让我知道，世事远没有我想的那么简单。老百姓也是有花花肠子弯弯道道的。不过因为这事发生在民间，觉得还是朴素的。&lt;/p&gt;
&lt;p&gt;老太太是很普通的一个农村老太太，性格平和，见我总是微笑说话。本来平平常常的一个人，自打听说这个事情，我后来再见到老太太，总觉得有点异样，好像一个人有了故事，就会让人觉得有些不平常了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="丝茉茉" scheme="http://yoursite.com/categories/simomo/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建属于自己的博客</title>
    <link href="http://yoursite.com/work/2016-04-23/heoll-hexo.html"/>
    <id>http://yoursite.com/work/2016-04-23/heoll-hexo.html</id>
    <published>2016-04-23T14:11:51.000Z</published>
    <updated>2016-04-25T15:48:59.013Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;一直都在博客园写博客，不过最近在逛园子的时候不小心看到了&lt;code&gt;hexo&lt;/code&gt;,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^&lt;/p&gt;
&lt;p&gt;为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;(n)    &lt;span class=&quot;comment&quot;&gt;//写文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate(g)    &lt;span class=&quot;comment&quot;&gt;//把文章生成页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server(s)    &lt;span class=&quot;comment&quot;&gt;//启动本地服务调试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy(d)    &lt;span class=&quot;comment&quot;&gt;//部署到github 可与hexo g合并为 hexo d -g&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;折腾了大半天，终于搭建好了自己的博客&lt;a href=&quot;http://jarson7426.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里去看看&lt;/a&gt;。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;备注1：如果喜欢以官方教程为主的，点这里&lt;/code&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo官方文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装node&lt;br&gt;  到&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;官网下载相应平台的最新版本，一路安装即可。&lt;/li&gt;
&lt;li&gt;安装git&lt;br&gt;  根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:&lt;br&gt;  &lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装hexo&lt;br&gt;  使用以下命令安装hexo到全局&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  然后输入命令&lt;code&gt;hexo -v&lt;/code&gt;输入hexo的版本号即为安装成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;github准备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博客是在&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上托管维护的，所以当然需要一个github的账号了。然后创建一个名为&lt;code&gt;jarson7426.github.io&lt;/code&gt;的仓库。&lt;/li&gt;
&lt;li&gt;其中‘jarson7426’是我的账户名，下文同理。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email xxx@&lt;span class=&quot;number&quot;&gt;163.&lt;/span&gt;com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C xxx@&lt;span class=&quot;number&quot;&gt;163.&lt;/span&gt;com(邮箱地址)      &lt;span class=&quot;comment&quot;&gt;// 生成ssh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;找到.ssh文件夹打开，使用cat id_rsa.pub    &lt;span class=&quot;comment&quot;&gt;//打开公钥ssh串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h1&gt;&lt;p&gt;ok，环境都准备好了，开始激动人心的步骤了，搭建博客。&lt;/p&gt;
&lt;p&gt;在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;生成静态页面&quot;&gt;&lt;a href=&quot;#生成静态页面&quot; class=&quot;headerlink&quot; title=&quot;生成静态页面&quot;&gt;&lt;/a&gt;生成静态页面&lt;/h1&gt;&lt;p&gt;初始化完成之后，就已经生成一篇“hello word”的文章了，现在执行以下命令把文章编译为静态页面：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;本地启动&quot;&gt;&lt;a href=&quot;#本地启动&quot; class=&quot;headerlink&quot; title=&quot;本地启动&quot;&gt;&lt;/a&gt;本地启动&lt;/h1&gt;&lt;p&gt;把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt;查看生成的页面效果。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你看到了下面这个画面，恭喜你，你成功了！&lt;br&gt;&lt;img src=&quot;https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;更换主题&quot;&gt;&lt;a href=&quot;#更换主题&quot; class=&quot;headerlink&quot; title=&quot;更换主题&quot;&gt;&lt;/a&gt;更换主题&lt;/h1&gt;&lt;p&gt;上面的博客效果是hexo自己默认的主题&lt;code&gt;landscape&lt;/code&gt;，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yilia&lt;/a&gt;，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~&lt;/p&gt;
&lt;p&gt;下面贴出github上star数量最多的前10个主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iissnan/hexo-theme-next&lt;/a&gt;， 3510个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;litten/hexo-theme-yilia&lt;/a&gt;， 1703个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TryGhost/Casper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TryGhost/Casper&lt;/a&gt;， 679个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wuchong/jacman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wuchong/jacman&lt;/a&gt;， 503个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/A-limon/pacman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A-limon/pacman&lt;/a&gt;， 431个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daleanthony/uno&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;daleanthony/uno&lt;/a&gt;， 416个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orderedlist/modernist&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;orderedlist/modernist&lt;/a&gt;， 367个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/presscustomizr/hueman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AlxMedia/hueman&lt;/a&gt;， 336个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kathyqian/crisp-ghost-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kathyqian/crisp-ghost-theme&lt;/a&gt;， 303个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xiangming/landscape-plus&lt;/a&gt;， 287个star。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;clone主题代码&lt;br&gt;  在目录下执行下面的命令clone主题代码：&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone https:&lt;span class=&quot;comment&quot;&gt;//github.com/litten/hexo-theme-yilia.git themes/yilia&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改配置文件&lt;br&gt;  修改&lt;code&gt;Blog/_config.yml&lt;/code&gt;文件：&lt;/p&gt;
  &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theme: yilia    &lt;span class=&quot;comment&quot;&gt;//默认为landscape&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  修改&lt;code&gt;themes/yilia/_config.yml&lt;/code&gt;文件：&lt;/p&gt;
  &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Header&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;menu:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    主页: /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    所有文章: /archives&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    丝茉茉: /categories/simomo/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    相册: /photos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# SubNav&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subnav:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    github: &quot;https://github.com/jarson7426&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     weibo: &quot;http://weibo.com/u/2732624311&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zhihu: &quot;#&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rss: /atom.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;excerpt_link: 阅读全文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fancybox: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mathjax: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 是否开启动画效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;animate: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 是否在新窗口打开链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open_in_new: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Miscellaneous&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;google_analytics: &#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;favicon: /favicon.ico&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#你的头像url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;avatar: /img.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#是否开启分享&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;share_jia: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;share_addthis: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;duoshuo: jarson7426&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#是否开启云标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tagcloud: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#是否开启友情链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#不开启——&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;friends: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#开启——&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#friends:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#  百度一下: http://www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#  淘宝商城: http://www.taobao.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#是否开启“关于我”。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#不开启——&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#aboutme: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#开启——&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aboutme: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看效果&lt;br&gt;  更改主题之后可以使用命令&lt;code&gt;hexo server&lt;/code&gt;打开本地服务，查看效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;部署到github&quot;&gt;&lt;a href=&quot;#部署到github&quot; class=&quot;headerlink&quot; title=&quot;部署到github&quot;&gt;&lt;/a&gt;部署到github&lt;/h1&gt;&lt;p&gt;上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;部署之前先修改&lt;code&gt;Blog/_config.yml&lt;/code&gt;文件。&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repository: https:&lt;span class=&quot;comment&quot;&gt;//github.com/jarson7426/jarson7426.github.io.git  //jarson7426替换为你自己的用户名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;code&gt;备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后使用以下命令进行部署。&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;code&gt;备注：如果执行上述命令报错，你可以试试下面这个命令再试。&lt;/code&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo-deployer-git--save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部署成功后，你在浏览器中输入&lt;a href=&quot;http://jarson7426.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jarson7426.github.io&lt;/a&gt;，就能看到和本地一样的效果了。&lt;/p&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;可能会有同学发现，我除了使用了新的主题外，还加了很多新的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼠标移动头像上会有旋转效果。&lt;/li&gt;
&lt;li&gt;给文章添加打赏功能。&lt;/li&gt;
&lt;li&gt;添加回到顶部的功能。&lt;/li&gt;
&lt;li&gt;添加总站访问量和文章阅读量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实修改这些非常简单，只要你有html、css、js的基础就可以。&lt;br&gt;思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。&lt;/p&gt;
&lt;p&gt;如果大家还有问题，欢迎留言，我会很乐意为大家解答的。&lt;/p&gt;
&lt;p&gt;好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;一直都在博客园写博客，不过最近在逛园子的时候不小心看到了&lt;code&gt;hexo&lt;/code&gt;,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^&lt;/p&gt;
&lt;p&gt;为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;(n)    &lt;span class=&quot;comment&quot;&gt;//写文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate(g)    &lt;span class=&quot;comment&quot;&gt;//把文章生成页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server(s)    &lt;span class=&quot;comment&quot;&gt;//启动本地服务调试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy(d)    &lt;span class=&quot;comment&quot;&gt;//部署到github 可与hexo g合并为 hexo d -g&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
